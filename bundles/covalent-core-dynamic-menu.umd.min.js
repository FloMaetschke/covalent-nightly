!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/button"),require("@angular/material/icon"),require("@angular/material/list"),require("@angular/material/menu"),require("@angular/material/tooltip")):"function"==typeof define&&define.amd?define("@covalent/core/dynamic-menu",["exports","@angular/core","@angular/common","@angular/material/button","@angular/material/icon","@angular/material/list","@angular/material/menu","@angular/material/tooltip"],e):e(((t=t||self).covalent=t.covalent||{},t.covalent.core=t.covalent.core||{},t.covalent.core["dynamic-menu"]={}),t.ng.core,t.ng.common,t.ng.material.button,t.ng.material.icon,t.ng.material.list,t.ng.material.menu,t.ng.material.tooltip)}(this,(function(t,e,n,i,a,o,m,c){"use strict";var r=function(){function t(){this.itemClicked=new e.EventEmitter}return t.prototype.emitClicked=function(t){this.itemClicked.emit(t)},t.decorators=[{type:e.Component,args:[{selector:"td-dynamic-menu",template:'<button *ngIf="!trigger.text" mat-icon-button id="{{ trigger.id }}" [matMenuTriggerFor]="menu.childMenu">\n  <mat-icon *ngIf="trigger.svgIcon" [class]="trigger.iconClasses" [svgIcon]="trigger.svgIcon"></mat-icon>\n  <mat-icon *ngIf="trigger.icon" [class]="trigger.iconClasses">{{ trigger.icon }}</mat-icon>\n</button>\n<button *ngIf="trigger.text" mat-button id="{{ trigger.id }}" [matMenuTriggerFor]="menu.childMenu">\n  <mat-icon *ngIf="trigger.svgIcon" [class]="trigger.iconClasses" [svgIcon]="trigger.svgIcon"></mat-icon>\n  <mat-icon *ngIf="trigger.icon" [class]="trigger.iconClasses">{{ trigger.icon }}</mat-icon>\n  <span *ngIf="trigger.text">\n    {{ trigger.text }}\n  </span>\n</button>\n\n<td-dynamic-menu-item #menu [items]="items" (itemClicked)="emitClicked($event)"></td-dynamic-menu-item>\n',styles:[""]}]}],t.propDecorators={trigger:[{type:e.Input}],items:[{type:e.Input}],itemClicked:[{type:e.Output}]},t}();var l=function(){function t(){this.itemClicked=new e.EventEmitter}return t.prototype.emitClicked=function(t){this.itemClicked.emit(t)},t.decorators=[{type:e.Component,args:[{selector:"td-dynamic-menu-item",template:'<mat-menu #childMenu="matMenu" [overlapTrigger]="false">\n  <ng-template let-item ngFor [ngForOf]="items">\n    <ng-container *ngIf="item.children && item.children.length > 0">\n      <button mat-menu-item [id]="item.id" [matMenuTriggerFor]="menu.childMenu">\n        <mat-icon *ngIf="item.svgIcon" [class]="item.iconClasses" [svgIcon]="item.svgIcon"></mat-icon>\n        <mat-icon *ngIf="item.icon" [class]="item.iconClasses">{{ item.icon }}</mat-icon>\n        <span *ngIf="item.text">\n          {{ item.text }}\n        </span>\n      </button>\n      <td-dynamic-menu-item #menu [items]="item.children"></td-dynamic-menu-item>\n    </ng-container>\n    <ng-container *ngIf="!item.children || item.children.length === 0">\n      <td-dynamic-menu-link [item]="item" (itemClicked)="emitClicked($event)"></td-dynamic-menu-link>\n    </ng-container>\n  </ng-template>\n</mat-menu>\n',styles:[""]}]}],t.propDecorators={items:[{type:e.Input}],itemClicked:[{type:e.Output}],childMenu:[{type:e.ViewChild,args:["childMenu",{static:!0}]}]},t}();var s=function(){function t(){this.itemClicked=new e.EventEmitter}return t.prototype.emitClicked=function(){this.itemClicked.emit({text:this.item.text,action:this.item.action})},t.decorators=[{type:e.Component,args:[{selector:"td-dynamic-menu-link",template:'<a\n  *ngIf="item.link"\n  class="new-tab"\n  mat-menu-item\n  [id]="item.id"\n  [href]="item.link"\n  [target]="item.newTab ? \'_blank\' : \'_self\'"\n  (click)="emitClicked()"\n>\n  <mat-icon *ngIf="item.svgIcon" [class]="item.iconClasses" [svgIcon]="item.svgIcon"></mat-icon>\n  <mat-icon *ngIf="item.icon" [class]="item.iconClasses">{{ item.icon }}</mat-icon>\n  <span>{{ item.text }}</span>\n  <mat-icon *ngIf="item.newTab" class="new-tab-icon">launch</mat-icon>\n</a>\n<button *ngIf="item.action" mat-menu-item [id]="item.id" (click)="emitClicked()">\n  <mat-icon *ngIf="item.svgIcon" [class]="item.iconClasses" [svgIcon]="item.svgIcon"></mat-icon>\n  <mat-icon *ngIf="item.icon" [class]="item.iconClasses">{{ item.icon }}</mat-icon>\n  <span>{{ item.text }}</span>\n</button>\n',styles:[".new-tab{display:-ms-flexbox;display:flex;-ms-flex-pack:start;justify-content:start;-ms-flex-align:center;align-items:center}.new-tab span{-ms-flex:1;flex:1}.new-tab .new-tab-icon{margin:0 0 0 16px}"]}]}],t.propDecorators={item:[{type:e.Input}],itemClicked:[{type:e.Output}]},t}();var g=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{declarations:[r,l,s],imports:[n.CommonModule,i.MatButtonModule,a.MatIconModule,o.MatListModule,m.MatMenuModule,c.MatTooltipModule],providers:[],exports:[r,l,s]}]}],t}();t.CovalentDynamicMenuModule=g,t.TdDynamicMenuComponent=r,t.TdDynamicMenuItemComponent=l,t.Éµa=s,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=covalent-core-dynamic-menu.umd.min.js.map