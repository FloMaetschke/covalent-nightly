!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/button"),require("@angular/material/icon"),require("@angular/material/list"),require("@angular/material/menu"),require("@angular/material/tooltip")):"function"==typeof define&&define.amd?define("@covalent/core/dynamic-menu",["exports","@angular/core","@angular/common","@angular/material/button","@angular/material/icon","@angular/material/list","@angular/material/menu","@angular/material/tooltip"],e):e(((n=n||self).covalent=n.covalent||{},n.covalent.core=n.covalent.core||{},n.covalent.core["dynamic-menu"]={}),n.ng.core,n.ng.common,n.ng.material.button,n.ng.material.icon,n.ng.material.list,n.ng.material.menu,n.ng.material.tooltip)}(this,(function(n,e,t,i,a,o,r,m){"use strict";var c=function(){function n(){}return n.decorators=[{type:e.Component,args:[{selector:"td-dynamic-menu",template:'<button *ngIf="!trigger.text" mat-icon-button id="{{ trigger.id }}" [matMenuTriggerFor]="menu.childMenu">\n  <mat-icon *ngIf="trigger.svgIcon" [class]="trigger.iconClasses" [svgIcon]="trigger.svgIcon"></mat-icon>\n  <mat-icon *ngIf="trigger.icon" [class]="trigger.iconClasses">{{ trigger.icon }}</mat-icon>\n</button>\n<button *ngIf="trigger.text" mat-button id="{{ trigger.id }}" [matMenuTriggerFor]="menu.childMenu">\n  <mat-icon *ngIf="trigger.svgIcon" [class]="trigger.iconClasses" [svgIcon]="trigger.svgIcon"></mat-icon>\n  <mat-icon *ngIf="trigger.icon" [class]="trigger.iconClasses">{{ trigger.icon }}</mat-icon>\n  <span *ngIf="trigger.text">\n    {{ trigger.text }}\n  </span>\n</button>\n\n<td-dynamic-menu-item #menu [items]="items"></td-dynamic-menu-item>\n',styles:[""]}]}],n.propDecorators={trigger:[{type:e.Input}],items:[{type:e.Input}]},n}();var g=function(){function n(){}return n.decorators=[{type:e.Component,args:[{selector:"td-dynamic-menu-item",template:'<mat-menu #childMenu="matMenu" [overlapTrigger]="false">\n  <ng-template let-item ngFor [ngForOf]="items">\n    <ng-container *ngIf="item.children && item.children.length > 0">\n      <button mat-menu-item [id]="item.id" [matMenuTriggerFor]="menu.childMenu">\n        <mat-icon *ngIf="item.svgIcon" [class]="item.iconClasses" [svgIcon]="item.svgIcon"></mat-icon>\n        <mat-icon *ngIf="item.icon" [class]="item.iconClasses">{{ item.icon }}</mat-icon>\n        <span *ngIf="item.text">\n          {{ item.text }}\n        </span>\n      </button>\n      <td-dynamic-menu-item #menu [items]="item.children"></td-dynamic-menu-item>\n    </ng-container>\n    <ng-container *ngIf="!item.children || item.children.length === 0">\n      <a class="new-tab" mat-menu-item [id]="item.id" [href]="item.link" [target]="item.newTab ? \'_blank\' : \'_self\'">\n        <mat-icon *ngIf="item.svgIcon" [class]="item.iconClasses" [svgIcon]="item.svgIcon"></mat-icon>\n        <mat-icon *ngIf="item.icon" [class]="item.iconClasses">{{ item.icon }}</mat-icon>\n        <span *ngIf="item.text">\n          {{ item.text }}\n        </span>\n        <mat-icon *ngIf="item.newTab" class="new-tab-icon">launch</mat-icon>\n      </a>\n    </ng-container>\n  </ng-template>\n</mat-menu>\n',styles:[".new-tab{display:-ms-flexbox;display:flex;-ms-flex-pack:start;justify-content:start;-ms-flex-align:center;align-items:center}.new-tab span{-ms-flex:1;flex:1}.new-tab .new-tab-icon{margin:0 0 0 16px}"]}]}],n.propDecorators={items:[{type:e.Input}],childMenu:[{type:e.ViewChild,args:["childMenu",{static:!0}]}]},n}();var l=function(){function n(){}return n.decorators=[{type:e.NgModule,args:[{declarations:[c,g],imports:[t.CommonModule,i.MatButtonModule,a.MatIconModule,o.MatListModule,r.MatMenuModule,m.MatTooltipModule],providers:[],exports:[c,g]}]}],n}();n.CovalentDynamicMenuModule=l,n.TdDynamicMenuComponent=c,n.TdDynamicMenuItemComponent=g,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=covalent-core-dynamic-menu.umd.min.js.map