{"version":3,"sources":["ng://@covalent/core/media/services/media.service.ts","ng://@covalent/core/media/directives/media-toggle.directive.ts","ng://@covalent/core/media/media.module.ts"],"names":["TdMediaService","_ngZone","_this","this","_resizing","_queryMap","Map","_querySources","_queryObservables","set","_globalSubscription","runOutsideAngular","fromEvent","window","subscribe","setTimeout","_onResize","prototype","deregisterQuery","query","get","toLowerCase","unsubscribe","run","matchMedia","matches","registerQuery","BehaviorSubject","asObservable","broadcast","this_1","_matchMediaTrigger","next","Injectable","args","providedIn","NgZone","TdMediaToggleDirective","_renderer","_elementRef","_mediaService","_matches","_attributes","_styles","_classes","Object","defineProperty","Error","_query","attributes","classes","styles","ngOnInit","_mediaChange","_subscription","ngOnDestroy","_changeAttributes","_changeClasses","_changeStyles","attr","setAttribute","nativeElement","removeAttribute","forEach","className","addClass","removeClass","style","setStyle","removeStyle","Directive","selector","Renderer2","ElementRef","Input","TD_MEDIA","CovalentMediaModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription, fromEvent } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TdMediaService {\n  private _resizing: boolean = false;\n  private _globalSubscription: Subscription;\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: { [key: string]: BehaviorSubject<boolean> } = {};\n  private _queryObservables: { [key: string]: Observable<boolean> } = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', '(orientation: landscape)');\n    this._queryMap.set('portrait', '(orientation: portrait)');\n    this._queryMap.set('print', 'print');\n\n    this._resizing = false;\n    // we make sure that the resize checking happend outside of Angular since it happens often\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window, 'resize').subscribe(() => {\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\n        if (!this._resizing) {\n          this._resizing = true;\n          setTimeout(() => {\n            this._onResize();\n            this._resizing = false;\n          }, 100);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deregisters a query so its stops being notified or used.\n   */\n  deregisterQuery(query: string): void {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    this._querySources[query].unsubscribe();\n    delete this._querySources[query];\n    delete this._queryObservables[query];\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(matchMedia(query).matches);\n  }\n}\n","import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TdMediaService } from '../services/media.service';\n\n@Directive({\n  selector: '[tdMediaToggle]',\n})\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\n  private _subscription: Subscription;\n\n  private _query: string;\n  private _matches: boolean = false;\n  private _attributes: { [key: string]: string } = {};\n  private _styles: { [key: string]: string } = {};\n  private _classes: string[] = [];\n\n  /**\n   * tdMediaToggle: string\n   * Media query used to evaluate screen/window size.\n   * Toggles attributes, classes and styles if media query is matched.\n   */\n  @Input('tdMediaToggle')\n  set query(query: string) {\n    if (!query) {\n      throw new Error('Query needed for [tdMediaToggle] directive.');\n    }\n    this._query = query;\n  }\n\n  /**\n   * mediaAttributes: {[key: string]: string}\n   * Attributes to be toggled when media query matches.\n   */\n  @Input('mediaAttributes')\n  set attributes(attributes: any) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * mediaClasses: string[]\n   * CSS Classes to be toggled when media query matches.\n   */\n  @Input('mediaClasses')\n  set classes(classes: string[]) {\n    this._classes = classes;\n  }\n\n  /**\n   * mediaStyles: {[key: string]: string}\n   * CSS Styles to be toggled when media query matches.\n   */\n  @Input('mediaStyles')\n  set styles(styles: any) {\n    this._styles = styles;\n  }\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) {}\n\n  ngOnInit(): void {\n    this._mediaChange(this._mediaService.query(this._query));\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\n      this._mediaChange(matches);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _mediaChange(matches: boolean): void {\n    this._matches = matches;\n    this._changeAttributes();\n    this._changeClasses();\n    this._changeStyles();\n  }\n\n  private _changeAttributes(): void {\n    for (let attr in this._attributes) {\n      if (this._matches) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\n      }\n    }\n  }\n\n  private _changeClasses(): void {\n    this._classes.forEach((className: string) => {\n      if (this._matches) {\n        this._renderer.addClass(this._elementRef.nativeElement, className);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\n      }\n    });\n  }\n\n  private _changeStyles(): void {\n    for (let style in this._styles) {\n      if (this._matches) {\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\n      } else {\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\n      }\n    }\n  }\n}\n","import { Type } from '@angular/core';\nimport { NgModule } from '@angular/core';\n\nimport { TdMediaToggleDirective } from './directives/media-toggle.directive';\n\nconst TD_MEDIA: Type<any>[] = [TdMediaToggleDirective];\n\n@NgModule({\n  declarations: [TD_MEDIA],\n  exports: [TD_MEDIA],\n})\nexport class CovalentMediaModule {}\n"]}