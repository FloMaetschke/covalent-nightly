{"version":3,"file":"covalent-core-dialogs.umd.js","sources":["ng://@covalent/core/dialogs/dialog.component.ts","ng://@covalent/core/dialogs/alert-dialog/alert-dialog.component.ts","ng://@covalent/core/dialogs/confirm-dialog/confirm-dialog.component.ts","ng://@covalent/core/dialogs/prompt-dialog/prompt-dialog.component.ts","ng://@covalent/core/dialogs/services/dialog.service.ts","ng://@covalent/core/dialogs/dialogs.module.ts"],"sourcesContent":["import { Component, Directive, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\n@Directive({ selector: 'td-dialog-title' })\nexport class TdDialogTitleDirective {}\n\n@Directive({ selector: 'td-dialog-content' })\nexport class TdDialogContentDirective {}\n\n@Directive({ selector: 'td-dialog-actions' })\nexport class TdDialogActionsDirective {}\n\n@Component({\n  selector: 'td-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n})\nexport class TdDialogComponent implements AfterContentInit {\n  @ContentChildren(TdDialogTitleDirective) dialogTitle: QueryList<TdDialogTitleDirective>;\n  @ContentChildren(TdDialogContentDirective) dialogContent: QueryList<TdDialogContentDirective>;\n  @ContentChildren(TdDialogActionsDirective) dialogActions: QueryList<TdDialogActionsDirective>;\n\n  ngAfterContentInit(): void {\n    if (this.dialogTitle.length > 1) {\n      throw new Error('Duplicate td-dialog-title component at in td-dialog.');\n    }\n    if (this.dialogContent.length > 1) {\n      throw new Error('Duplicate td-dialog-content component at in td-dialog.');\n    }\n    if (this.dialogActions.length > 1) {\n      throw new Error('Duplicate td-dialog-actions component at in td-dialog.');\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-alert-dialog',\n  templateUrl: './alert-dialog.component.html',\n  styleUrls: ['./alert-dialog.component.scss'],\n})\nexport class TdAlertDialogComponent {\n  title: string;\n  message: string;\n  closeButton: string = 'CLOSE';\n\n  constructor(private _dialogRef: MatDialogRef<TdAlertDialogComponent>) {}\n\n  close(): void {\n    this._dialogRef.close();\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss'],\n})\nexport class TdConfirmDialogComponent {\n  title: string;\n  message: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  constructor(private _dialogRef: MatDialogRef<TdConfirmDialogComponent>) {}\n\n  cancel(): void {\n    this._dialogRef.close(false);\n  }\n\n  accept(): void {\n    this._dialogRef.close(true);\n  }\n}\n","import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-prompt-dialog',\n  templateUrl: './prompt-dialog.component.html',\n  styleUrls: ['./prompt-dialog.component.scss'],\n})\nexport class TdPromptDialogComponent implements AfterViewInit {\n  title: string;\n  message: string;\n  value: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  @ViewChild('input', { static: true }) _input: ElementRef;\n\n  constructor(private _dialogRef: MatDialogRef<TdPromptDialogComponent>) {}\n\n  ngAfterViewInit(): void {\n    // focus input once everything is rendered and good to go\n    Promise.resolve().then(() => {\n      (<HTMLInputElement>this._input.nativeElement).focus();\n    });\n  }\n\n  /**\n   * Method executed when input is focused\n   * Selects all text\n   */\n  handleInputFocus(): void {\n    (<HTMLInputElement>this._input.nativeElement).select();\n  }\n\n  cancel(): void {\n    this._dialogRef.close(undefined);\n  }\n\n  accept(): void {\n    this._dialogRef.close(this.value);\n  }\n}\n","import { Injectable, ViewContainerRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { MatDialog, MatDialogRef, MatDialogConfig } from '@angular/material/dialog';\nimport { ComponentType } from '@angular/cdk/portal';\n\nimport { TdAlertDialogComponent } from '../alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from '../prompt-dialog/prompt-dialog.component';\n\nexport interface IDialogConfig extends MatDialogConfig {\n  title?: string;\n  message: string;\n}\n\nexport interface IAlertConfig extends IDialogConfig {\n  closeButton?: string;\n}\n\nexport interface IConfirmConfig extends IDialogConfig {\n  acceptButton?: string;\n  cancelButton?: string;\n}\n\nexport interface IPromptConfig extends IConfirmConfig {\n  value?: string;\n}\n\n@Injectable()\nexport class TdDialogService {\n  constructor(private _dialogService: MatDialog) {}\n\n  /**\n   * params:\n   * - component: ComponentType<T>\n   * - config: MatDialogConfig\n   * Wrapper function over the open() method in MatDialog.\n   * Opens a modal dialog containing the given component.\n   */\n  public open<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> {\n    return this._dialogService.open(component, config);\n  }\n\n  /**\n   * Wrapper function over the closeAll() method in MatDialog.\n   * Closes all of the currently-open dialogs.\n   */\n  public closeAll(): void {\n    this._dialogService.closeAll();\n  }\n\n  /**\n   * params:\n   * - config: IAlertConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     closeButton?: string;\n   * }\n   *\n   * Opens an alert dialog with the provided config.\n   * Returns an MatDialogRef<TdAlertDialogComponent> object.\n   */\n  public openAlert(config: IAlertConfig): MatDialogRef<TdAlertDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdAlertDialogComponent> = this._dialogService.open(\n      TdAlertDialogComponent,\n      dialogConfig,\n    );\n    let alertDialogComponent: TdAlertDialogComponent = dialogRef.componentInstance;\n    alertDialogComponent.title = config.title;\n    alertDialogComponent.message = config.message;\n    if (config.closeButton) {\n      alertDialogComponent.closeButton = config.closeButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IConfirmConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a confirm dialog with the provided config.\n   * Returns an MatDialogRef<TdConfirmDialogComponent> object.\n   */\n  public openConfirm(config: IConfirmConfig): MatDialogRef<TdConfirmDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdConfirmDialogComponent> = this._dialogService.open(\n      TdConfirmDialogComponent,\n      dialogConfig,\n    );\n    let confirmDialogComponent: TdConfirmDialogComponent = dialogRef.componentInstance;\n    confirmDialogComponent.title = config.title;\n    confirmDialogComponent.message = config.message;\n    if (config.acceptButton) {\n      confirmDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      confirmDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IPromptConfig {\n   *     message: string;\n   *     title?: string;\n   *     value?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a prompt dialog with the provided config.\n   * Returns an MatDialogRef<TdPromptDialogComponent> object.\n   */\n  public openPrompt(config: IPromptConfig): MatDialogRef<TdPromptDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdPromptDialogComponent> = this._dialogService.open(\n      TdPromptDialogComponent,\n      dialogConfig,\n    );\n    let promptDialogComponent: TdPromptDialogComponent = dialogRef.componentInstance;\n    promptDialogComponent.title = config.title;\n    promptDialogComponent.message = config.message;\n    promptDialogComponent.value = config.value;\n    if (config.acceptButton) {\n      promptDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      promptDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  private _createConfig(config: IDialogConfig): MatDialogConfig {\n    let dialogConfig: MatDialogConfig = new MatDialogConfig();\n    dialogConfig.width = '400px';\n    Object.assign(dialogConfig, config);\n    return dialogConfig;\n  }\n}\n","import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport {\n  TdDialogComponent,\n  TdDialogTitleDirective,\n  TdDialogActionsDirective,\n  TdDialogContentDirective,\n} from './dialog.component';\nimport { TdAlertDialogComponent } from './alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from './confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from './prompt-dialog/prompt-dialog.component';\nimport { TdDialogService } from './services/dialog.service';\n\nconst TD_DIALOGS: Type<any>[] = [\n  TdAlertDialogComponent,\n  TdConfirmDialogComponent,\n  TdPromptDialogComponent,\n  TdDialogComponent,\n  TdDialogTitleDirective,\n  TdDialogActionsDirective,\n  TdDialogContentDirective,\n];\n\nconst TD_DIALOGS_ENTRY_COMPONENTS: Type<any>[] = [\n  TdAlertDialogComponent,\n  TdConfirmDialogComponent,\n  TdPromptDialogComponent,\n];\n\n@NgModule({\n  imports: [FormsModule, CommonModule, MatDialogModule, MatInputModule, MatButtonModule],\n  declarations: [TD_DIALOGS],\n  exports: [TD_DIALOGS],\n  providers: [TdDialogService],\n  entryComponents: [TD_DIALOGS_ENTRY_COMPONENTS],\n})\nexport class CovalentDialogsModule {}\n"],"names":["Directive","Component","ContentChildren","MatDialogRef","ViewChild","MatDialogConfig","Injectable","MatDialog","NgModule","FormsModule","CommonModule","MatDialogModule","MatInputModule","MatButtonModule"],"mappings":"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"}