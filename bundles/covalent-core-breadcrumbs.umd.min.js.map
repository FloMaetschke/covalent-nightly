{"version":3,"sources":["ng://@covalent/core/breadcrumbs/breadcrumb/breadcrumb.component.ts","ng://@covalent/core/breadcrumbs/breadcrumbs.component.ts","ng://@covalent/core/breadcrumbs/breadcrumbs.module.ts"],"names":["TdBreadcrumbComponent","_elementRef","_changeDetectorRef","this","_displayCrumb","_width","separatorIcon","_displayIcon","Object","defineProperty","prototype","shouldDisplay","markForCheck","undefined","ngAfterViewInit","_this","setTimeout","getBoundingClientRect","width","_handleIconClick","event","stopPropagation","preventDefault","Component","args","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ChangeDetectorRef","HostBinding","TdBreadcrumbsComponent","_resizeSubscription","Subscription","EMPTY","_widthSubject","Subject","_resizing","hiddenBreadcrumbs","ngOnInit","merge","fromEvent","window","pipe","debounceTime","asObservable","distinctUntilChanged","subscribe","_calculateVisibility","ngDoCheck","nativeElement","next","nativeElementWidth","ngAfterContentInit","setCrumbIcons","ngOnDestroy","unsubscribe","element","style","getComputedStyle","borderLeft","parseInt","borderRight","marginLeft","marginRight","paddingLeft","paddingRight","_breadcrumbs","length","breadcrumbArray","toArray","forEach","breadcrumb","crumbsArray","crumbWidthSum","hiddenCrumbs","i","displayCrumb","push","ContentChildren","Input","CovalentBreadcrumbsModule","NgModule","imports","CommonModule","MatIconModule","declarations","exports"],"mappings":"ilBAAA,IAAAA,EAAA,WAwDE,SAAAA,EAAoBC,EAAiCC,GAAjCC,KAAAF,YAAAA,EAAiCE,KAAAD,mBAAAA,EApC7CC,KAAAC,eAAyB,EACzBD,KAAAE,OAAiB,EAEzBF,KAAAG,cAAwB,gBAExBH,KAAAI,cAAwB,EAgD1B,OA9CEC,OAAAC,eAAIT,EAAAU,UAAA,eAAY,KAAhB,WACE,OAAOP,KAAKC,mBAMd,SAAiBO,GACfR,KAAKC,cAAgBO,EACrBR,KAAKD,mBAAmBU,gDAM1BJ,OAAAC,eAAIT,EAAAU,UAAA,QAAK,KAAT,WACE,OAAOP,KAAKE,wCAMdG,OAAAC,eACIT,EAAAU,UAAA,iBAAc,KADlB,WAIE,OAAOP,KAAKC,cAAgBS,UAAY,wCAK1Cb,EAAAU,UAAAI,gBAAA,WAAA,IAAAC,EAAAZ,KAEEa,WAAU,WACRD,EAAKV,OAAuBU,EAAKd,YAAyB,cAAEgB,wBAAwBC,MACpFH,EAAKb,mBAAmBU,kBAO5BZ,EAAAU,UAAAS,iBAAA,SAAiBC,GACfA,EAAMC,kBACND,EAAME,sCA9DTC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kCAEVC,SAAA,sNAEAC,KAAM,CACJC,QAAO,4BAETC,gBAAiBC,EAAAA,wBAAwBC,yfAfzCC,EAAAA,kBAIAC,EAAAA,6DA2CCC,EAAAA,YAAWV,KAAA,CAAC,oBAwBfxB,EAzEA,GCAAmC,EAAA,WA4CE,SAAAA,EAAoBlC,EAAiCC,GAAjCC,KAAAF,YAAAA,EAAiCE,KAAAD,mBAAAA,EAd7CC,KAAAiC,oBAAoCC,EAAAA,aAAaC,MACjDnC,KAAAoC,cAAiC,IAAIC,EAAAA,QACrCrC,KAAAsC,WAAqB,EAK7BtC,KAAAuC,kBAA6C,GAKpCvC,KAAAG,cAAwB,gBAsGnC,OAlGE6B,EAAAzB,UAAAiC,SAAA,WAAA,IAAA5B,EAAAZ,KACEA,KAAKiC,oBAAsBQ,EAAAA,MACzBC,EAAAA,UAAUC,OAAQ,UAAUC,KAAKC,EAAAA,aAAa,KAC9C7C,KAAKoC,cAAcU,eAAeF,KAAKG,EAAAA,yBACvCC,UAAS,WACJpC,EAAK0B,YACR1B,EAAK0B,WAAY,EACjBzB,WAAU,WACRD,EAAKqC,uBACLrC,EAAK0B,WAAY,EACjB1B,EAAKb,mBAAmBU,gBACvB,SAKTuB,EAAAzB,UAAA2C,UAAA,WACMlD,KAAKF,aAAeE,KAAKF,YAAYqD,eACvCnD,KAAKoC,cAAcgB,KAAKpD,KAAKqD,qBAIjCrB,EAAAzB,UAAA+C,mBAAA,WACEtD,KAAKuD,gBACLvD,KAAKD,mBAAmBU,gBAG1BuB,EAAAzB,UAAAiD,YAAA,WACExD,KAAKiC,oBAAoBwB,eAM3BpD,OAAAC,eAAI0B,EAAAzB,UAAA,qBAAkB,KAAtB,eACQmD,EAAoC1D,KAAKF,YAAyB,cAElE6D,EAA6BhB,OAAOiB,iBAAiBF,GACrDG,EAAqBC,SAASH,EAAME,WAAY,IAChDE,EAAsBD,SAASH,EAAMI,YAAa,IAClDC,EAAqBF,SAASH,EAAMK,WAAY,IAChDC,EAAsBH,SAASH,EAAMM,YAAa,IAClDC,EAAsBJ,SAASH,EAAMO,YAAa,IAClDC,EAAuBL,SAASH,EAAMQ,aAAc,IAE1D,OACET,EAAQ5C,wBAAwBC,MAChC8C,EACAE,EACAC,EACAC,EACAC,EACAC,mCAOJ9D,OAAAC,eAAI0B,EAAAzB,UAAA,QAAK,KAAT,WACE,OAAOP,KAAKoE,aAAepE,KAAKoE,aAAaC,OAAS,mCAMhDrC,EAAAzB,UAAAgD,cAAR,WAAA,IAAA3C,EAAAZ,KACQsE,EAA2CtE,KAAKoE,aAAaG,UAC/DD,EAAgBD,OAAS,IAE3BC,EAAgBA,EAAgBD,OAAS,GAAGjE,cAAe,GAE7DkE,EAAgBE,QAAO,SAAEC,GACvBA,EAAWtE,cAAgBS,EAAKT,iBAI5B6B,EAAAzB,UAAA0C,qBAAR,WAKE,QAJMyB,EAAuC1E,KAAKoE,aAAaG,UAC3DI,EAAwB,EACtBC,EAAwC,GAErCC,EAAYH,EAAYL,OAAS,EAAGQ,GAAK,EAAGA,IAAK,KAClDJ,EAAoCC,EAAYG,GAGlDF,EAAgBF,EAAW1D,MAAQf,KAAKqD,oBAC1CoB,EAAWK,cAAe,EAC1BF,EAAaG,KAAKN,IAGlBA,EAAWK,cAAe,EAE5BH,GAAiBF,EAAW1D,MAE9Bf,KAAKuC,kBAAoBqC,EACzB5E,KAAKD,mBAAmBU,oCA3H3BW,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBAEVC,SAAA,8BAEAC,KAAM,CACJC,QAAO,kBAETC,gBAAiBC,EAAAA,wBAAwBC,uIAjBzCC,EAAAA,kBADAC,EAAAA,2DA0BCkD,EAAAA,gBAAe3D,KAAA,CAACxB,0BAOhBoF,EAAAA,SAsGHjD,EAhJA,GCAAkD,EAAA,WAOA,SAAAA,KAKwC,2BALvCC,EAAAA,SAAQ9D,KAAA,CAAC,CACR+D,QAAS,CAACC,EAAAA,aAAcC,EAAAA,eACxBC,aAAc,CAACvD,EAAwBnC,GACvC2F,QAAS,CAACxD,EAAwBnC,OAEIqF,EAZxC","sourcesContent":["import {\n  Component,\n  ElementRef,\n  HostBinding,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'td-breadcrumb, a[td-breadcrumb]',\n  styleUrls: ['./breadcrumb.component.scss'],\n  templateUrl: './breadcrumb.component.html',\n  /* tslint:disable-next-line */\n  host: {\n    class: 'mat-button td-breadcrumb',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbComponent implements AfterViewInit {\n  private _displayCrumb: boolean = true;\n  private _width: number = 0;\n  // Sets the icon url shown between breadcrumbs. Defaults to 'chevron_right'\n  separatorIcon: string = 'chevron_right';\n  // Should show the right chevron or not before the label\n  _displayIcon: boolean = true;\n\n  get displayCrumb(): boolean {\n    return this._displayCrumb;\n  }\n\n  /**\n   * Whether to display the crumb or not\n   */\n  set displayCrumb(shouldDisplay: boolean) {\n    this._displayCrumb = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Width of the DOM element of the crumb\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayCrumb ? undefined : 'none';\n  }\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    setTimeout(() => {\n      this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Stop click propagation when clicking on icon\n   */\n  _handleIconClick(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n","import {\n  Component,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  DoCheck,\n  ChangeDetectorRef,\n  ElementRef,\n  Input,\n} from '@angular/core';\n\nimport { Subscription, Subject, fromEvent, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@Component({\n  selector: 'td-breadcrumbs',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  templateUrl: './breadcrumbs.component.html',\n  /* tslint:disable-next-line */\n  host: {\n    class: 'td-breadcrumbs',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbsComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n\n  // all the sub components, which are the individual breadcrumbs\n  @ContentChildren(TdBreadcrumbComponent) _breadcrumbs: QueryList<TdBreadcrumbComponent>;\n  // the list of hidden breadcrumbs not shown right now (responsive)\n  hiddenBreadcrumbs: TdBreadcrumbComponent[] = [];\n\n  /**\n   * Sets the icon url shown between breadcrumbs. Defaults to 'chevron_right'.\n   */\n  @Input() separatorIcon: string = 'chevron_right';\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(debounceTime(10)),\n      this._widthSubject.asObservable().pipe(distinctUntilChanged()),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this._calculateVisibility();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setCrumbIcons();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n   * Current width of the element container\n   */\n  get nativeElementWidth(): number {\n    const element: HTMLElement = <HTMLElement>this._elementRef.nativeElement;\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    const style: CSSStyleDeclaration = window.getComputedStyle(element);\n    const borderLeft: number = parseInt(style.borderLeft, 10);\n    const borderRight: number = parseInt(style.borderRight, 10);\n    const marginLeft: number = parseInt(style.marginLeft, 10);\n    const marginRight: number = parseInt(style.marginRight, 10);\n    const paddingLeft: number = parseInt(style.paddingLeft, 10);\n    const paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return (\n      element.getBoundingClientRect().width -\n      borderLeft -\n      borderRight -\n      marginLeft -\n      marginRight -\n      paddingLeft -\n      paddingRight\n    );\n  }\n\n  /**\n   * The total count of individual breadcrumbs\n   */\n  get count(): number {\n    return this._breadcrumbs ? this._breadcrumbs.length : 0;\n  }\n\n  /**\n   * Set the crumb icon separators\n   */\n  private setCrumbIcons(): void {\n    const breadcrumbArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    if (breadcrumbArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      breadcrumbArray[breadcrumbArray.length - 1]._displayIcon = false;\n    }\n    breadcrumbArray.forEach((breadcrumb: TdBreadcrumbComponent) => {\n      breadcrumb.separatorIcon = this.separatorIcon;\n    });\n  }\n\n  private _calculateVisibility(): void {\n    const crumbsArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    let crumbWidthSum: number = 0;\n    const hiddenCrumbs: TdBreadcrumbComponent[] = [];\n    // loop through crumbs in reverse order to calculate which ones should be removed\n    for (let i: number = crumbsArray.length - 1; i >= 0; i--) {\n      const breadcrumb: TdBreadcrumbComponent = crumbsArray[i];\n      // if crumb exceeds width, then we skip it from the sum and add it into the hiddencrumbs array\n      // and hide it\n      if (crumbWidthSum + breadcrumb.width > this.nativeElementWidth) {\n        breadcrumb.displayCrumb = false;\n        hiddenCrumbs.push(breadcrumb);\n      } else {\n        // else we show it\n        breadcrumb.displayCrumb = true;\n      }\n      crumbWidthSum += breadcrumb.width;\n    }\n    this.hiddenBreadcrumbs = hiddenCrumbs;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdBreadcrumbsComponent } from './breadcrumbs.component';\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, MatIconModule],\n  declarations: [TdBreadcrumbsComponent, TdBreadcrumbComponent],\n  exports: [TdBreadcrumbsComponent, TdBreadcrumbComponent],\n})\nexport class CovalentBreadcrumbsModule {}\n"]}