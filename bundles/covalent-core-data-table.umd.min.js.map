{
  "version": 3,
  "file": "covalent-core-data-table.umd.min.js",
  "sources": [
    "ng://@covalent/core/data-table/node_modules/tslib/tslib.es6.js",
    "ng://@covalent/core/data-table/out/data-table-row/data-table-row.component.ts",
    "ng://@covalent/core/data-table/out/directives/data-table-template.directive.ts",
    "ng://@covalent/core/data-table/out/data-table.component.ts",
    "ng://@covalent/core/data-table/out/data-table-column/data-table-column.component.ts",
    "ng://@covalent/core/data-table/out/data-table-cell/data-table-cell.component.ts",
    "ng://@covalent/core/data-table/out/data-table-table/data-table-table.component.ts",
    "ng://@covalent/core/data-table/out/services/data-table.service.ts",
    "ng://@covalent/core/data-table/out/data-table.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Component, Input, Output, Renderer2, ElementRef, ContentChildren, QueryList, HostListener } from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styles: [`:host{border-bottom-style:solid;border-bottom-width:1px}:host.td-data-table-row{height:48px}:host.td-data-table-column-row{height:56px}`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableColumnRowComponent {\n\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styles: [`:host{border-bottom-style:solid;border-bottom-width:1px}:host.td-data-table-row{height:48px}:host.td-data-table-column-row{height:56px}`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableRowComponent {\n\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click')\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n}\n",
    "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdDataTableTemplate]ng-template'})\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy,\n         ChangeDetectorRef, ViewChild, OnDestroy, AfterViewInit,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject,\n         Optional, ViewChildren, ElementRef, OnInit, AfterContentChecked } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable, Subscription, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent, TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdDataTableComponent),\n    multi: true,\n  }],\n  selector: 'td-data-table',\n  styles: [`:host{display:block;overflow:hidden}:host .td-data-table-scrollable{position:relative;overflow:auto;height:calc(100% - 56px)}.td-data-table-column-resizer{right:0;width:6px;cursor:col-resize}.td-data-table-column-resizer,.td-data-table-column-resizer .td-data-table-column-separator{position:absolute;height:100%;top:0}.td-data-table-column-resizer .td-data-table-column-separator{left:2px}.td-data-table-column-resizer.td-resizing{cursor:-webkit-grabbing}table.td-data-table{width:auto!important}table.td-data-table.mat-selectable tbody>tr.td-data-table-row{-webkit-transition:background-color .2s;transition:background-color .2s}table.td-data-table.mat-selectable .td-data-table-column:first-child>.td-data-table-column-content-wrapper,table.td-data-table.mat-selectable td.td-data-table-cell:first-child>.td-data-table-column-content-wrapper,table.td-data-table.mat-selectable th.td-data-table-column:first-child>.td-data-table-column-content-wrapper{width:18px;min-width:18px;padding:0 24px}table.td-data-table.mat-selectable .td-data-table-column:nth-child(2)>.td-data-table-column-content-wrapper,table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2)>.td-data-table-column-content-wrapper,table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2)>.td-data-table-column-content-wrapper{padding-left:0}[dir=rtl] table.td-data-table.mat-selectable .td-data-table-column:nth-child(2)>.td-data-table-column-content-wrapper,[dir=rtl] table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2)>.td-data-table-column-content-wrapper,[dir=rtl] table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2)>.td-data-table-column-content-wrapper{padding-right:0;padding-left:28px}table.td-data-table td.mat-checkbox-cell,table.td-data-table th.mat-checkbox-column{min-width:42px;width:42px;font-size:0!important}table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox,table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox{width:18px;height:18px}::ng-deep table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after,::ng-deep table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after{width:11px!important;height:4px!important}table.td-data-table td.mat-checkbox-cell mat-checkbox ::ng-deep .mat-checkbox-inner-container,table.td-data-table th.mat-checkbox-column mat-checkbox ::ng-deep .mat-checkbox-inner-container{width:18px;height:18px;margin:0}`],\n  template: `<table td-data-table\n        [style.left.px]=\"columnsLeftScroll\"\n        [class.mat-selectable]=\"selectable\">\n  <thead class=\"td-data-table-head\"\n          (dragover)=\"_handleColumnDrag($event)\">\n    <tr td-data-table-column-row>\n      <th td-data-table-column class=\"mat-checkbox-column\" *ngIf=\"selectable\">\n        <mat-checkbox\n          #checkBoxAll\n          *ngIf=\"multiple\"\n          [disabled]=\"!hasData\"\n          [indeterminate]=\"indeterminate && !allSelected && hasData\"\n          [checked]=\"allSelected && hasData\"\n          (click)=\"blockEvent($event); selectAll(!checkBoxAll.checked)\"\n          (keyup.enter)=\"selectAll(!checkBoxAll.checked)\"\n          (keyup.space)=\"selectAll(!checkBoxAll.checked)\"\n          (keydown.space)=\"blockEvent($event)\">\n        </mat-checkbox>\n      </th>\n      <th td-data-table-column\n        #columnElement\n        *ngFor=\"let column of columns; let i = index; let last = last\"\n        [style.min-width.px]=\"getColumnWidth(i)\"\n        [style.max-width.px]=\"getColumnWidth(i)\"\n        [name]=\"column.name\"\n        [numeric]=\"column.numeric\"\n        [active]=\"(column.sortable || sortable) && column === sortByColumn\"\n        [sortable]=\"column.sortable || (sortable && column.sortable !== false)\"\n        [sortOrder]=\"sortOrderEnum\"\n        [hidden]=\"column.hidden\"\n        (sortChange)=\"handleSort(column)\">\n        <span [matTooltip]=\"column.tooltip\">{{column.label}}</span>\n        <span td-column-resizer\n              *ngIf=\"resizableColumns\"\n              draggable=\"true\"\n              class=\"td-data-table-column-resizer\"\n              [class.td-resizing]=\"i === resizingColumn\"\n              (mousedown)=\"_handleStartColumnDrag(i, $event)\"\n              (dragstart)=\"$event?.dataTransfer?.setData('text', '')\"\n              (drag)=\"_handleColumnDrag($event)\"\n              (dragend)=\"_handleEndColumnDrag()\"\n              (mouseup)=\"_handleEndColumnDrag()\">\n          <span class=\"td-data-table-column-separator\"></span>\n        </span>\n      </th>\n    </tr>\n  </thead>\n</table>\n<div #scrollableDiv class=\"td-data-table-scrollable\"\n      (scroll)=\"handleScroll($event)\">\n  <div [style.height.px]=\"totalHeight\"></div>\n  <table td-data-table\n          [style.transform]=\"offsetTransform\"\n          [style.position]=\"'absolute'\"\n          [class.mat-selectable]=\"selectable\"\n          [class.mat-clickable]=\"clickable\">\n    <tbody class=\"td-data-table-body\">\n      <tr td-data-table-row\n          #dtRow\n          [tabIndex]=\"selectable ? 0 : -1\"\n          [selected]=\"(clickable || selectable) && isRowSelected(row)\"\n          *ngFor=\"let row of virtualData; let rowIndex = index\"\n          (click)=\"handleRowClick(row, fromRow + rowIndex, $event)\"\n          (keyup)=\"selectable && _rowKeyup($event, row, rowIndex)\"\n          (keydown.space)=\"blockEvent($event)\"\n          (keydown.shift.space)=\"blockEvent($event)\"\n          (keydown.shift)=\"disableTextSelection()\"\n          (keyup.shift)=\"enableTextSelection()\">\n        <td td-data-table-cell class=\"mat-checkbox-cell\" *ngIf=\"selectable\">\n          <mat-pseudo-checkbox\n            [state]=\"dtRow.selected ? 'checked' : 'unchecked'\"\n            (mousedown)=\"disableTextSelection()\"\n            (mouseup)=\"enableTextSelection()\"\n            stopRowClick\n            (click)=\"select(row, $event, fromRow + rowIndex)\">\n          </mat-pseudo-checkbox>\n        </td>\n        <td td-data-table-cell\n            [numeric]=\"column.numeric\"\n            [hidden]=\"column.hidden\"\n            *ngFor=\"let column of columns; let i = index\"\n            [style.min-width.px]=\"getColumnWidth(i)\"\n            [style.max-width.px]=\"getColumnWidth(i)\">\n          <span *ngIf=\"!getTemplateRef(column.name)\">{{column.format ? column.format(getCellValue(column, row)) : getCellValue(column, row)}}</span>\n          <ng-template\n            *ngIf=\"getTemplateRef(column.name)\"\n            [ngTemplateOutlet]=\"getTemplateRef(column.name)\"\n            [ngTemplateOutletContext]=\"{ value: getCellValue(column, row), row: row, column: column.name }\">\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<ng-content></ng-content>\n`,\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase implements IControlValueAccessor, OnInit,\n                                          AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  /** manually resizable columns */\n  private _resizableColumns: boolean = false;\n  private _columnClientX: number = 0;\n  private _columnResizeSubs: Subscription;\n  private _resizingColumn: number;\n  private _onColumnResize: Subject<number> = new Subject<number>();\n\n  get resizingColumn(): number {\n    return this._resizingColumn;\n  }\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv') _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * resizableColumns?: boolean\n   * Enables manual column resize.\n   * Defaults to 'false'\n   */\n  @Input('resizableColumns')\n  set resizableColumns(resizableColumns: boolean) {\n    this._resizableColumns = coerceBooleanProperty(resizableColumns);\n  }\n  get resizableColumns(): boolean {\n    return this._resizableColumns;\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n\n    // initialize observable for column resize calculations\n    this._columnResizeSubs = this._onColumnResize.asObservable().pipe(\n      debounceTime(0),\n    ).subscribe((clientX: number) => {\n      this._columnClientX = clientX;\n      this._calculateWidths();\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable()\n      .subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable()\n      .subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    if (this._elementRef.nativeElement) {\n      let newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        this._hostWidth = newHostWidth;\n        this._onResize.next();\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      let newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(\n      debounceTime(0),\n    ).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._columnResizeSubs) {\n      this._columnResizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          let modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          let index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n    this.onChange(this.value);\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value ? this.value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if ((this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n           (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if ((this._firstSelectedIndex > currentSelected) || (this._firstSelectedIndex < currentSelected)) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            let rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) ||\n                (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (this._shiftPreviouslyPressed) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              if ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                  (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex)) {\n                this._doSelection(this._data[i], i);\n              }\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n      // if shift wasnt pressed, then we take the element checked as the first row\n      // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      let element: HTMLElement = event.target as HTMLElement;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null && element.tagName.toLowerCase() !== 'mat-pseudo-checkbox') {\n        this.onRowClick.emit({\n          row: row,\n          index: index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < (this._rows.toArray().length - 1)) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Sets column index of the dragged column and initial clientX of column\n   */\n  _handleStartColumnDrag(index: number, event: MouseEvent): void {\n    this._columnClientX = event.clientX;\n    this._resizingColumn = index;\n  }\n\n  /**\n   * Calculates new width depending on new clientX of dragger column\n   */\n  _handleColumnDrag(event: MouseEvent | DragEvent): void {\n    // check if there was been a separator clicked for resize\n    if (this._resizingColumn !== undefined && event.clientX > 0) {\n      let xPosition: number = event.clientX;\n      // checks if the separator is being moved to try and resize the column, else dont do anything\n      if (xPosition > 0 && this._columnClientX > 0 && (xPosition - this._columnClientX) !== 0) {\n        // calculate the new width depending if making the column bigger or smaller\n        let proposedManualWidth: number = this._widths[this._resizingColumn].value + (xPosition - this._columnClientX);\n        // if the proposed new width is less than the projected min width of the column, use projected min width\n        if (proposedManualWidth < this._colElements.toArray()[this._resizingColumn].projectedWidth) {\n          proposedManualWidth = this._colElements.toArray()[this._resizingColumn].projectedWidth;\n        }\n        this.columns[this._resizingColumn].width = proposedManualWidth;\n        // update new x position for the resized column\n        this._onColumnResize.next(xPosition);\n      }\n    }\n  }\n\n  /**\n   * Ends dragged flags\n   */\n  _handleEndColumnDrag(): void {\n    this._columnClientX = undefined;\n    this._resizingColumn = undefined;\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, index: rowIndex, selected: !wasSelected});\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    let flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      let newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue ||\n            this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue ||\n            !this._widths[colWidth.index].limit) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      let newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value: value,\n      index: index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        let widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = (widthOpts && !!widthOpts.min);\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n        // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n      // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection &&\n        this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    let renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, i: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[i]) {\n          this._rowHeightCache[i] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[i];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      let fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      let range: number = (index - 1) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, HostListener, ViewChild } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styles: [`:host{white-space:nowrap;position:relative;padding:0;vertical-align:middle;text-align:left}:host>.td-data-table-heading{padding:0 28px}:host:first-child>.td-data-table-heading{padding-left:24px;padding-right:initial}html[dir=rtl] :host:first-child>.td-data-table-heading{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}body[dir=rtl] :host:first-child>.td-data-table-heading{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}[dir=rtl] :host:first-child>.td-data-table-heading{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}:host:first-child>.td-data-table-heading bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host:first-child>.td-data-table-heading bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host:last-child>.td-data-table-heading{padding-left:28px;padding-right:24px}html[dir=rtl] :host:last-child>.td-data-table-heading{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}body[dir=rtl] :host:last-child>.td-data-table-heading{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}[dir=rtl] :host:last-child>.td-data-table-heading{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}:host:last-child>.td-data-table-heading bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host:last-child>.td-data-table-heading bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host mat-icon{height:16px;width:16px;font-size:16px!important;line-height:16px!important}:host mat-icon.td-data-table-sort-icon{opacity:0;-webkit-transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s;position:absolute;top:0}:host mat-icon.td-data-table-sort-icon.mat-asc{-webkit-transform:rotate(0);transform:rotate(0)}:host mat-icon.td-data-table-sort-icon.mat-desc{-webkit-transform:rotate(180deg);transform:rotate(180deg)}:host.mat-active.mat-sortable mat-icon.td-data-table-sort-icon,:host:hover.mat-sortable mat-icon.td-data-table-sort-icon{opacity:1}html[dir=rtl] :host{text-align:right;unicode-bidi:embed}body[dir=rtl] :host{text-align:right;unicode-bidi:embed}[dir=rtl] :host{text-align:right;unicode-bidi:embed}:host bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host>*{vertical-align:middle}:host.mat-clickable{cursor:pointer}:host.mat-clickable:focus{outline:0}:host .td-data-table-heading{display:inline-block;position:relative}:host.mat-numeric{text-align:right}html[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}body[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}:host.mat-numeric bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host.mat-numeric bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host.mat-numeric mat-icon.td-data-table-sort-icon{margin-left:-22px;margin-right:initial}html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:-22px;unicode-bidi:embed}body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:-22px;unicode-bidi:embed}[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:-22px;unicode-bidi:embed}:host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{margin-left:6px;margin-right:initial}html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:6px;unicode-bidi:embed}body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:6px;unicode-bidi:embed}[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon{margin-left:initial;unicode-bidi:embed;margin-right:6px;unicode-bidi:embed}:host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}`],\n  template: `<span #columnContent class=\"td-data-table-heading\">\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n  <span>\n    <ng-content></ng-content>\n  </span>\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && !numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n</span>\n<ng-content select=\"[td-column-resizer]\"></ng-content>\n`,\n})\nexport class TdDataTableColumnComponent {\n\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', {read: ElementRef}) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input('name') name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable') sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input('active') active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                        new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click')\n  handleClick(): void {\n    if (this.sortable) {\n      this.onSortChange.emit({name: this.name, order: this._sortOrder});\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n\n}\n",
    "import { Component, Input, Renderer2, ElementRef, HostBinding } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td[td-data-table-cell]',\n  styles: [`:host{vertical-align:middle;text-align:left;padding:0}html[dir=rtl] :host{text-align:right;unicode-bidi:embed}body[dir=rtl] :host{text-align:right;unicode-bidi:embed}[dir=rtl] :host{text-align:right;unicode-bidi:embed}:host bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host>.td-data-table-cell-content-wrapper{padding:0 28px;-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:start}:host>.td-data-table-cell-content-wrapper.td-data-table-cell-numeric{-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}:host:first-child>.td-data-table-cell-content-wrapper{padding-left:24px;padding-right:initial}html[dir=rtl] :host:first-child>.td-data-table-cell-content-wrapper{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}body[dir=rtl] :host:first-child>.td-data-table-cell-content-wrapper{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}[dir=rtl] :host:first-child>.td-data-table-cell-content-wrapper{padding-left:initial;unicode-bidi:embed;padding-right:24px;unicode-bidi:embed}:host:first-child>.td-data-table-cell-content-wrapper bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host:first-child>.td-data-table-cell-content-wrapper bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host:last-child>.td-data-table-cell-content-wrapper{padding-left:28px;padding-right:24px}html[dir=rtl] :host:last-child>.td-data-table-cell-content-wrapper{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}body[dir=rtl] :host:last-child>.td-data-table-cell-content-wrapper{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}[dir=rtl] :host:last-child>.td-data-table-cell-content-wrapper{padding-left:24px;unicode-bidi:embed;padding-right:28px;unicode-bidi:embed}:host:last-child>.td-data-table-cell-content-wrapper bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host:last-child>.td-data-table-cell-content-wrapper bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}:host>*{vertical-align:middle}:host.mat-clickable{cursor:pointer}:host.mat-clickable:focus{outline:0}:host.mat-numeric{text-align:right}html[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}body[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}[dir=rtl] :host.mat-numeric{text-align:left;unicode-bidi:embed}:host.mat-numeric bdo[dir=rtl]{direction:rtl;unicode-bidi:bidi-override}:host.mat-numeric bdo[dir=ltr]{direction:ltr;unicode-bidi:bidi-override}`],\n  template: `<div class=\"td-data-table-cell-content-wrapper\"\n     [class.td-data-table-cell-numeric]=\"numeric\">\n  <ng-content></ng-content>\n</div>`,\n})\nexport class TdDataTableCellComponent {\n\n  /**\n   * numeric?: boolean\n   * Makes cell follow the numeric data-table specs.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-cell');\n  }\n\n}\n",
    "import { Component, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'table[td-data-table]',\n  styles: [`:host{width:100%;position:relative;border-spacing:0;overflow:hidden;border-collapse:collapse}`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableTableComponent {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table');\n  }\n\n}\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { TdDataTableSortingOrder, ITdDataTableColumn } from '../data-table.component';\n\n@Injectable()\nexport class TdDataTableService {\n\n  /**\n   * params:\n   * - data: any[]\n   * - searchTerm: string\n   * - ignoreCase: boolean = false\n   * - excludedColumns: string[] = []\n   *\n   * Searches [data] parameter for [searchTerm] matches and returns a new array with them.\n   */\n  filterData(data: any[], searchTerm: string, ignoreCase: boolean = false, excludedColumns?: string[]): any[] {\n    let filter: string = searchTerm ? (ignoreCase ? searchTerm.toLowerCase() : searchTerm) : '';\n    if (filter) {\n      data = data.filter((item: any) => {\n        const res: any = Object.keys(item).find((key: string) => {\n          if (!excludedColumns || excludedColumns.indexOf(key) === -1) {\n            const preItemValue: string = ('' + item[key]);\n            const itemValue: string = ignoreCase ? preItemValue.toLowerCase() : preItemValue;\n            return itemValue.indexOf(filter) > -1;\n          }\n        });\n        return !(typeof res === 'undefined');\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - sortBy: string\n   * - sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending\n   *\n   * Sorts [data] parameter by [sortBy] and [sortOrder] and returns the sorted data.\n   */\n  sortData(data: any[], sortBy: string, sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending): any[] {\n    if (sortBy) {\n      data = Array.from(data); // Change the array reference to trigger OnPush and not mutate original array\n      data.sort((a: any, b: any) => {\n        let compA: any = a[sortBy];\n        let compB: any = b[sortBy];\n        let direction: number = 0;\n        if (!Number.isNaN(Number.parseFloat(compA)) && !Number.isNaN(Number.parseFloat(compB))) {\n          direction = Number.parseFloat(compA) - Number.parseFloat(compB);\n        } else {\n          if (compA < compB) {\n            direction = -1;\n          } else if (compA > compB) {\n            direction = 1;\n          }\n        }\n        return direction * (sortOrder === TdDataTableSortingOrder.Descending ? -1 : 1);\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - fromRow: number\n   * - toRow: : number\n   *\n   * Returns a section of the [data] parameter starting from [fromRow] and ending in [toRow].\n   */\n  pageData(data: any[], fromRow: number, toRow: number): any[] {\n    if (fromRow >= 1) {\n      data = data.slice(fromRow - 1, toRow);\n    }\n    return data;\n  }\n}\n\nexport function DATA_TABLE_PROVIDER_FACTORY(\n    parent: TdDataTableService): TdDataTableService {\n  return parent || new TdDataTableService();\n}\n\nexport const DATA_TABLE_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdDataTableService,\n  deps: [[new Optional(), new SkipSelf(), TdDataTableService]],\n  useFactory: DATA_TABLE_PROVIDER_FACTORY,\n};\n",
    "import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nimport { TdDataTableComponent } from './data-table.component';\nimport { TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableCellComponent } from './data-table-cell/data-table-cell.component';\nimport { TdDataTableRowComponent, TdDataTableColumnRowComponent } from './data-table-row/data-table-row.component';\nimport { TdDataTableTableComponent } from './data-table-table/data-table-table.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { DATA_TABLE_PROVIDER } from './services/data-table.service';\n\nconst TD_DATA_TABLE: Type<any>[] = [\n  TdDataTableComponent,\n  TdDataTableTemplateDirective,\n\n  TdDataTableColumnComponent,\n  TdDataTableCellComponent,\n  TdDataTableRowComponent,\n  TdDataTableColumnRowComponent,\n  TdDataTableTableComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    MatIconModule,\n    MatPseudoCheckboxModule,\n  ],\n  declarations: [\n    TD_DATA_TABLE,\n  ],\n  exports: [\n    TD_DATA_TABLE,\n  ],\n  providers: [\n    DATA_TABLE_PROVIDER,\n  ],\n})\nexport class CovalentDataTableModule {\n\n}\n"
  ],
  "names": [
    "extendStatics",
    "d",
    "b",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "TdDataTableColumnRowComponent",
    "_elementRef",
    "_renderer",
    "addClass",
    "nativeElement",
    "type",
    "Component",
    "args",
    "selector",
    "styles",
    "template",
    "ElementRef",
    "Renderer2",
    "TdDataTableRowComponent",
    "_selected",
    "defineProperty",
    "get",
    "set",
    "selected",
    "removeClass",
    "height",
    "getBoundingClientRect",
    "clickListener",
    "focus",
    "Input",
    "HostListener",
    "TdDataTableTemplateDirective",
    "_super",
    "templateRef",
    "viewContainerRef",
    "call",
    "tslib_1.__extends",
    "TemplatePortalDirective",
    "Directive",
    "TemplateRef",
    "ViewContainerRef",
    "tdDataTableTemplate",
    "Ascending",
    "Descending",
    "TdDataTableBase",
    "_changeDetectorRef",
    "_TdDataTableMixinBase",
    "mixinControlValueAccessor",
    "TdDataTableComponent",
    "_document",
    "_domSanitizer",
    "_this",
    "_hostWidth",
    "_resizableColumns",
    "_columnClientX",
    "_onColumnResize",
    "Subject",
    "_widths",
    "_onResize",
    "_scrollHorizontalOffset",
    "_onHorizontalScroll",
    "_onVerticalScroll",
    "_rowHeightCache",
    "_totalHeight",
    "_hostHeight",
    "_scrollVerticalOffset",
    "_fromRow",
    "_toRow",
    "_selectable",
    "_clickable",
    "_multiple",
    "_allSelected",
    "_indeterminate",
    "_sortable",
    "_sortOrder",
    "TdDataTableSortingOrder",
    "_shiftPreviouslyPressed",
    "_lastSelectedIndex",
    "_firstSelectedIndex",
    "_firstCheckboxValue",
    "_templateMap",
    "Map",
    "onSortChange",
    "EventEmitter",
    "onRowSelect",
    "onRowClick",
    "onSelectAll",
    "compareWith",
    "row",
    "model",
    "_resizingColumn",
    "selectable",
    "_offsetTransform",
    "_data",
    "data",
    "Promise",
    "resolve",
    "then",
    "refresh",
    "_scrollableDiv",
    "scrollTop",
    "_virtualData",
    "_columns",
    "hasData",
    "keys",
    "forEach",
    "k",
    "find",
    "c",
    "name",
    "push",
    "label",
    "cols",
    "resizableColumns",
    "coerceBooleanProperty",
    "clickable",
    "multiple",
    "sortable",
    "columnName",
    "column",
    "columns",
    "Error",
    "_sortBy",
    "order",
    "sortOrder",
    "toUpperCase",
    "length",
    "ngOnInit",
    "_resizeSubs",
    "asObservable",
    "subscribe",
    "_rows",
    "toArray",
    "index",
    "fromRow",
    "_calculateWidths",
    "_calculateVirtualRows",
    "_columnResizeSubs",
    "pipe",
    "debounceTime",
    "clientX",
    "markForCheck",
    "_horizontalScrollSubs",
    "horizontalScroll",
    "_verticalScrollSubs",
    "verticalScroll",
    "_valueChangesSubs",
    "valueChanges",
    "value",
    "ngAfterContentInit",
    "i",
    "_templates",
    "ngAfterContentChecked",
    "newHostWidth",
    "width",
    "next",
    "newHostHeight",
    "ngAfterViewInit",
    "_rowsChangedSubs",
    "changes",
    "ngOnDestroy",
    "unsubscribe",
    "handleScroll",
    "event",
    "element",
    "scrollLeft",
    "getColumnWidth",
    "undefined",
    "getCellValue",
    "nested",
    "_getNestedValue",
    "getTemplateRef",
    "clearModel",
    "splice",
    "_calculateCheckboxState",
    "selectAll",
    "checked",
    "toggledRows",
    "isRowSelected",
    "modelRow",
    "filter",
    "val",
    "indexOf",
    "emit",
    "rows",
    "onChange",
    "select",
    "currentSelected",
    "blockEvent",
    "mouseEvent",
    "shiftKey",
    "firstIndex",
    "lastIndex",
    "_doSelection",
    "rowSelected",
    "disableTextSelection",
    "onselectstart",
    "enableTextSelection",
    "handleRowClick",
    "srcElement",
    "currentTarget",
    "getAttribute",
    "tagName",
    "toLowerCase",
    "handleSort",
    "_rowKeyup",
    "keyCode",
    "ENTER",
    "SPACE",
    "UP_ARROW",
    "DOWN_ARROW",
    "_handleStartColumnDrag",
    "_handleColumnDrag",
    "xPosition",
    "proposedManualWidth",
    "_colElements",
    "projectedWidth",
    "_handleEndColumnDrag",
    "preventDefault",
    "splitName",
    "split",
    "rowIndex",
    "wasSelected",
    "_a",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "done",
    "tslib_1.__values",
    "_b",
    "col",
    "_adjustColumnWidth",
    "_calculateWidth",
    "_adjustColumnWidhts",
    "fixedTotalWidth",
    "flexibleWidths",
    "hidden",
    "limit",
    "max",
    "min",
    "recalculateHostWidth",
    "hostWidth",
    "newValue_1",
    "Math",
    "floor",
    "adjustedNumber_1",
    "colWidth",
    "newFlexibleWidths",
    "skipMinWidthProjection",
    "widthOpts",
    "renderedColumns",
    "scrolledRows",
    "rowHeightSum_1",
    "hostHeight",
    "toRow",
    "isFinite",
    "offset",
    "bypassSecurityTrustStyle",
    "totalHeight",
    "slice",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "inputs",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "decorators",
    "Optional",
    "Inject",
    "DOCUMENT",
    "DomSanitizer",
    "ChangeDetectorRef",
    "ContentChildren",
    "ViewChild",
    "ViewChildren",
    "sortBy",
    "Output",
    "TdDataTableColumnComponent",
    "active",
    "numeric",
    "_columnContent",
    "handleClick",
    "isAscending",
    "isDescending",
    "read",
    "bindClickable",
    "HostBinding",
    "bingSortable",
    "bindActive",
    "bindNumeric",
    "TdDataTableCellComponent",
    "TdDataTableTableComponent",
    "TdDataTableService",
    "filterData",
    "searchTerm",
    "ignoreCase",
    "excludedColumns",
    "item",
    "key",
    "preItemValue",
    "sortData",
    "from",
    "sort",
    "a",
    "compA",
    "compB",
    "direction",
    "Number",
    "isNaN",
    "parseFloat",
    "pageData",
    "DATA_TABLE_PROVIDER_FACTORY",
    "parent",
    "Injectable",
    "DATA_TABLE_PROVIDER",
    "deps",
    "SkipSelf",
    "useFactory",
    "TD_DATA_TABLE",
    "CovalentDataTableModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatCheckboxModule",
    "MatTooltipModule",
    "MatIconModule",
    "MatPseudoCheckboxModule",
    "declarations",
    "exports"
  ],
  "mappings": "yxCAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GC1BnF,IAAAK,EAaE,SAAFA,EAAwBC,EAAmCC,GAAnCN,KAAxBK,YAAwBA,EAAmCL,KAA3DM,UAA2DA,EACvDN,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,2CAT5D,CAAAC,KAACC,EAAAA,UAADC,KAAA,CAAW,CAETC,SAAU,+BACVC,OAAQ,CAAC,2IACTC,SAAU,mEATZ,CAAAL,KAA8CM,EAAAA,YAA9C,CAAAN,KAAmCO,EAAAA,aAyBnC,IAAAC,EAAA,WAyBE,SAAFA,EAAsBZ,EAAiCC,GAAjCN,KAAtBK,YAAsBA,EAAiCL,KAAvDM,UAAuDA,EAvBvDN,KAAAkB,WAA+B,EAwB3BlB,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,4BArB5DhB,OAAA2B,eAAMF,EAANf,UAAA,WAAA,CAQAkB,IAAE,WACE,OAAOpB,KAAKkB,WAThBG,IAAA,SAAeC,GACPA,EACFtB,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,eAExDR,KAAKM,UAAUiB,YAAYvB,KAAKK,YAAYG,cAAe,eAE7DR,KAAKkB,UAAYI,mCAMnB9B,OAAF2B,eAAMF,EAANf,UAAA,SAAA,CAAAkB,IAAE,WACE,IAAII,EAAiB,GAIrB,OAHIxB,KAAKK,YAAYG,gBACnBgB,EAAuBxB,KAAKK,YAAyB,cAAEoB,wBAAwBD,QAE1EA,mCAWTP,EAAFf,UAAAwB,cAAE,WACE1B,KAAK2B,SAGPV,EAAFf,UAAAyB,MAAE,WACE3B,KAAKK,YAAYG,cAAcmB,WAtCnC,iBANA,CAAAlB,KAACC,EAAAA,UAADC,KAAA,CAAW,CAETC,SAAU,wBACVC,OAAQ,CAAC,2IACTC,SAAU,mEAvBZ,CAAAL,KAA8CM,EAAAA,YAA9C,CAAAN,KAAmCO,EAAAA,+BA6BnCM,SAAA,CAAA,CAAAb,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,cA4BTe,cAAA,CAAA,CAAAjB,KAAGoB,EAAAA,aAAHlB,KAAA,CAAgB,YCzDhB,IAAAmB,EAAA,SAAAC,GAOE,SAAFD,EAAcE,EAA+BC,GAC7C,OAAIF,EAAJG,KAAAlC,KAAUgC,EAAaC,IAAvBjC,YAJkDmC,EAAlDA,EAAAA,KAJA,CAIkDC,EAAAA,uCADlD,CAAA3B,KAAC4B,EAAAA,UAAD1B,KAAA,CAAW,CAACC,SAAU,0EAHtB,CAAAH,KAA2B6B,EAAAA,aAA3B,CAAA7B,KAAwC8B,EAAAA,sCAMxCC,oBAAA,CAAA,CAAA/B,KAAGmB,EAAAA,gBCcHa,UAAc,MACdC,WAAe,QAuDfC,EACE,SAAFA,EAAqBC,GAAA5C,KAArB4C,mBAAqBA,GAIRC,EAAwBC,EAAAA,0BAA0BH,EAAiB,IA6GhFI,EAAA,SAAAhB,GAuUE,SAAFgB,EAAoDC,EAC9B3C,EACA4C,EACRL,GAHZ,IAAFM,EAIInB,EAJJG,KAAAlC,KAIU4C,IAJV5C,YAAoDkD,EAApDF,UAAoDA,EAC9BE,EAAtB7C,YAAsBA,EACA6C,EAAtBD,cAAsBA,EAnUtBC,EAAAC,WAA+B,EAG/BD,EAAAE,mBAAuC,EACvCF,EAAAG,eAAmC,EAGnCH,EAAAI,gBAA6C,IAAIC,EAAAA,QAejDL,EAAAM,QAA4C,GAC5CN,EAAAO,UAAqC,IAAIF,EAAAA,QAKzCL,EAAAQ,wBAA4C,EAE5CR,EAAAS,oBAAiD,IAAIJ,EAAAA,QACrDL,EAAAU,kBAA+C,IAAIL,EAAAA,QAGnDL,EAAAW,gBAAsC,GAEtCX,EAAAY,aAAiC,EAEjCZ,EAAAa,YAAgC,EAEhCb,EAAAc,sBAA0C,EAK1Cd,EAAAe,SAA6B,EAC7Bf,EAAAgB,OAA2B,EAqC3BhB,EAAAiB,aAAiC,EACjCjB,EAAAkB,YAAgC,EAChClB,EAAAmB,WAA+B,EAC/BnB,EAAAoB,cAAkC,EAClCpB,EAAAqB,gBAAoC,EAGpCrB,EAAAsB,WAA+B,EAE/BtB,EAAAuB,WAAgDC,EAAwBjC,UAGxES,EAAAyB,yBAA6C,EAC7CzB,EAAA0B,oBAAwC,EACxC1B,EAAA2B,qBAAyC,EACzC3B,EAAA4B,qBAAyC,EAGzC5B,EAAA6B,aAAwD,IAAIC,IAoM5D9B,EAAA+B,aAAsC,IAAIC,EAAAA,aAO1ChC,EAAAiC,YAA4E,IAAID,EAAAA,aAOhFhC,EAAAkC,WAA4E,IAAIF,EAAAA,aAQhFhC,EAAAmC,YAAoC,IAAIH,EAAAA,aAcxChC,EAAAoC,YAAyE,SAACC,EAAUC,GAChF,OAAOD,IAAQC,YApVuBrD,EAA1CA,EAAAA,GAeE3C,OAAF2B,eAAM4B,EAAN7C,UAAA,iBAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKyF,iDAGdjG,OAAF2B,eAAM4B,EAAN7C,UAAA,YAAA,CAAAkB,IAAE,WAGE,OAAIpB,KAAK0F,WACA1F,KAAKmD,WAAa,GAEpBnD,KAAKmD,4CAiCd3D,OAAF2B,eAAM4B,EAAN7C,UAAA,kBAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAK2F,kDAMdnG,OAAF2B,eAAM4B,EAAN7C,UAAA,cAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAK8D,8CAMdtE,OAAF2B,eAAM4B,EAAN7C,UAAA,UAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKiE,0CAMdzE,OAAF2B,eAAM4B,EAAN7C,UAAA,QAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKkE,wCAuCd1E,OAAF2B,eAAM4B,EAAN7C,UAAA,oBAAA,CAAAkB,IAAE,WACE,OAAuC,EAAhCpB,KAAK0D,yDAMdlE,OAAF2B,eAAM4B,EAAN7C,UAAA,cAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKsE,8CAOd9E,OAAF2B,eAAM4B,EAAN7C,UAAA,gBAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKuE,gDAQhB/E,OAAA2B,eAAM4B,EAAN7C,UAAA,OAAA,CASAkB,IAAE,WACE,OAAOpB,KAAK4F,OAVhBvE,IAAA,SAAWwE,GAAX,IAAA3C,EAAAlD,KACIA,KAAK4F,MAAQC,EACb7F,KAAK6D,gBAAkB,GACvBiC,QAAQC,UAAUC,KAAK,WACrB9C,EAAK+C,UAEL/C,EAAKgD,eAAe1F,cAAc2F,UAAY,qCAOlD3G,OAAF2B,eAAM4B,EAAN7C,UAAA,cAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKoG,8CAShB5G,OAAA2B,eAAM4B,EAAN7C,UAAA,UAAA,CAGAkB,IAAE,WAAA,IAAF8B,EAAAlD,KACI,GAAIA,KAAKqG,SACP,OAAOrG,KAAKqG,SAGd,GAAIrG,KAAKsG,QAAS,CAChBtG,KAAKqG,SAAW,GAEhB,IAAId,EAAWvF,KAAK4F,MAAM,GAM1B,OALApG,OAAO+G,KAAKhB,GAAKiB,QAAQ,SAACC,GACnBvD,EAAKmD,SAASK,KAAK,SAACC,GAAW,OAAAA,EAAEC,OAASH,KAC7CvD,EAAKmD,SAASQ,KAAK,CAAED,KAAMH,EAAGK,MAAOL,MAGlCzG,KAAKqG,SAEZ,MAAO,IAnBbhF,IAAA,SAAc0F,GACV/G,KAAKqG,SAAWU,mCA4BpBvH,OAAA2B,eAAM4B,EAAN7C,UAAA,mBAAA,CAGAkB,IAAE,WACE,OAAOpB,KAAKoD,mBAJhB/B,IAAA,SAAuB2F,GACnBhH,KAAKoD,kBAAoB6D,EAAAA,sBAAsBD,oCAYnDxH,OAAA2B,eAAM4B,EAAN7C,UAAA,aAAA,CAGAkB,IAAE,WACE,OAAOpB,KAAKmE,aAJhB9C,IAAA,SAAiBqE,GACb1F,KAAKmE,YAAc8C,EAAAA,sBAAsBvB,oCAY7ClG,OAAA2B,eAAM4B,EAAN7C,UAAA,YAAA,CAGAkB,IAAE,WACE,OAAOpB,KAAKoE,YAJhB/C,IAAA,SAAgB6F,GACZlH,KAAKoE,WAAa6C,EAAAA,sBAAsBC,oCAY5C1H,OAAA2B,eAAM4B,EAAN7C,UAAA,WAAA,CAGAkB,IAAE,WACE,OAAOpB,KAAKqE,WAJhBhD,IAAA,SAAe8F,GACXnH,KAAKqE,UAAY4C,EAAAA,sBAAsBE,oCAY3C3H,OAAA2B,eAAM4B,EAAN7C,UAAA,WAAA,CAGAkB,IAAE,WACE,OAAOpB,KAAKwE,WAJhBnD,IAAA,SAAe+F,GACXpH,KAAKwE,UAAYyC,EAAAA,sBAAsBG,oCAW3C5H,OAAA2B,eAAM4B,EAAN7C,UAAA,SAAA,CAAAmB,IAAA,SAAagG,GACT,GAAKA,EAAL,CAGA,IAAMC,EAA6BtH,KAAKuH,QAAQb,KAAK,SAACC,GAAW,OAAAA,EAAEC,OAASS,IAC5E,IAAKC,EACH,MAAM,IAAIE,MAAM,wCAGlBxH,KAAKyH,QAAUH,oCAEjB9H,OAAF2B,eAAM4B,EAAN7C,UAAA,eAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKyH,yCAShBjI,OAAA2B,eAAM4B,EAAN7C,UAAA,YAAA,CAAAmB,IAAA,SAAgBqG,GACZ,IAAIC,EAAoBD,EAAQA,EAAME,cAAgB,MACtD,GAAkB,SAAdD,GAAsC,QAAdA,EAC1B,MAAM,IAAIH,MAAM,0CAGlBxH,KAAKyE,WAA2B,QAAdkD,EAChBjD,EAAwBjC,UAAYiC,EAAwBhC,4CAEhElD,OAAF2B,eAAM4B,EAAN7C,UAAA,gBAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAKyE,4CAGdjF,OAAF2B,eAAM4B,EAAN7C,UAAA,UAAA,CAAAkB,IAAE,WACE,OAAOpB,KAAK4F,OAA6B,EAApB5F,KAAK4F,MAAMiC,wCAoDlC9E,EAAF7C,UAAA4H,SAAE,WAAA,IAAF5E,EAAAlD,KAEIA,KAAK+H,YAAc/H,KAAKyD,UAAUuE,eAAeC,UAAU,WACrD/E,EAAKgF,OACPhF,EAAKgF,MAAMC,UAAU3B,QAAQ,SAACjB,EAA8B6C,GAC1DlF,EAAKW,gBAAgBX,EAAKmF,QAAUD,GAAS7C,EAAI/D,OAAS,IAG9D0B,EAAKoF,mBACLpF,EAAKqF,0BAIPvI,KAAKwI,kBAAoBxI,KAAKsD,gBAAgB0E,eAAeS,KAC3DC,EAAAA,aAAa,IACbT,UAAU,SAACU,GACXzF,EAAKG,eAAiBsF,EACtBzF,EAAKoF,mBACLpF,EAAKN,mBAAmBgG,iBAG1B5I,KAAK6I,sBAAwB7I,KAAK2D,oBAAoBqE,eACnDC,UAAU,SAACa,GACZ5F,EAAKQ,wBAA0BoF,EAC/B5F,EAAKN,mBAAmBgG,iBAG1B5I,KAAK+I,oBAAsB/I,KAAK4D,kBAAkBoE,eAC/CC,UAAU,SAACe,GACZ9F,EAAKc,sBAAwBgF,EAC7B9F,EAAKqF,wBACLrF,EAAKN,mBAAmBgG,iBAE1B5I,KAAKiJ,kBAAoBjJ,KAAKkJ,aAAajB,UAAU,SAACkB,GACpDjG,EAAK+C,aAOTlD,EAAF7C,UAAAkJ,mBAAE,WACE,IAAK,IAAIC,EAAY,EAAGA,EAAIrJ,KAAKsJ,WAAWnB,UAAUN,OAAQwB,IAC5DrJ,KAAK+E,aAAa1D,IAChBrB,KAAKsJ,WAAWnB,UAAUkB,GAAG7G,oBAC7BxC,KAAKsJ,WAAWnB,UAAUkB,GAAGrH,cAQnCe,EAAF7C,UAAAqJ,sBAAE,WACE,GAAIvJ,KAAKK,YAAYG,cAAe,CAClC,IAAIgJ,EAAuBxJ,KAAKK,YAAYG,cAAciB,wBAAwBgI,MAE9EzJ,KAAKmD,aAAeqG,IACtBxJ,KAAKmD,WAAaqG,EAClBxJ,KAAKyD,UAAUiG,QAGnB,GAAI1J,KAAKkG,eAAe1F,cAAe,CACrC,IAAImJ,EAAwB3J,KAAKkG,eAAe1F,cAAciB,wBAAwBD,OAElFxB,KAAK+D,cAAgB4F,IACvB3J,KAAK+D,YAAc4F,EACnB3J,KAAKuI,wBACLvI,KAAK4C,mBAAmBgG,kBAS9B7F,EAAF7C,UAAA0J,gBAAE,WAAA,IAAF1G,EAAAlD,KACIA,KAAK6J,iBAAmB7J,KAAKkI,MAAM4B,QAAQrB,KACzCC,EAAAA,aAAa,IACbT,UAAU,WACV/E,EAAKO,UAAUiG,SAEjB1J,KAAKuI,yBAMPxF,EAAF7C,UAAA6J,YAAE,WACM/J,KAAK+H,aACP/H,KAAK+H,YAAYiC,cAEfhK,KAAKwI,mBACPxI,KAAKwI,kBAAkBwB,cAErBhK,KAAK6I,uBACP7I,KAAK6I,sBAAsBmB,cAEzBhK,KAAK+I,qBACP/I,KAAK+I,oBAAoBiB,cAEvBhK,KAAK6J,kBACP7J,KAAK6J,iBAAiBG,cAEpBhK,KAAKiJ,mBACPjJ,KAAKiJ,kBAAkBe,eAQ3BjH,EAAF7C,UAAA+J,aAAE,SAAaC,GACX,IAAIC,EAAqCD,EAAY,OACrD,GAAIC,EAAS,CACX,IAAIrB,EAA2BqB,EAAQC,WACnCpK,KAAK0D,0BAA4BoF,GACnC9I,KAAK2D,oBAAoB+F,KAAKZ,GAEhC,IAAIE,EAAyBmB,EAAQhE,UACjCnG,KAAKgE,wBAA0BgF,GACjChJ,KAAK4D,kBAAkB8F,KAAKV,KAQlCjG,EAAF7C,UAAAmK,eAAE,SAAejC,GACb,OAAIpI,KAAKwD,QAAQ4E,GACRpI,KAAKwD,QAAQ4E,GAAOe,MAEtBmB,WAGTvH,EAAF7C,UAAAqK,aAAE,SAAajD,EAA4B6B,GACvC,OAAI7B,EAAOkD,SAAWF,WAAahD,EAAOkD,OACjCxK,KAAKyK,gBAAgBnD,EAAOV,KAAMuC,GAEpCA,EAAM7B,EAAOV,OAMrB7D,EAAH7C,UAAAwK,eAAG,SAAe9D,GACb,OAAO5G,KAAK+E,aAAa3D,IAAIwF,IAMhC7D,EAAF7C,UAAAyK,WAAE,WACE3K,KAAKmJ,MAAMyB,OAAO,EAAG5K,KAAKmJ,MAAMtB,SAMlC9E,EAAF7C,UAAA+F,QAAE,WACEjG,KAAKuI,wBACLvI,KAAKsI,mBACLtI,KAAK6K,0BACL7K,KAAK4C,mBAAmBgG,gBAM1B7F,EAAF7C,UAAA4K,UAAE,SAAUC,GAAV,IAAF7H,EAAAlD,KACQgL,EAAqB,GACrBD,GACF/K,KAAK4F,MAAMY,QAAQ,SAACjB,GAEbrC,EAAK+H,cAAc1F,KACtBrC,EAAKiG,MAAMtC,KAAKtB,GAEhByF,EAAYnE,KAAKtB,MAGrBvF,KAAKsE,cAAe,EACpBtE,KAAKuE,gBAAiB,IAEtBvE,KAAK4F,MAAMY,QAAQ,SAACjB,GAElB,GAAIrC,EAAK+H,cAAc1F,GAAM,CAC3ByF,EAAYnE,KAAKtB,GACjB,IAAI2F,EAAgBhI,EAAKiG,MAAMgC,OAAO,SAACC,GACrC,OAAOlI,EAAKoC,YAAYC,EAAK6F,KAC5B,GACChD,EAAgBlF,EAAKiG,MAAMkC,QAAQH,IAC1B,EAAT9C,GACFlF,EAAKiG,MAAMyB,OAAOxC,EAAO,MAI/BpI,KAAKsE,cAAe,EACpBtE,KAAKuE,gBAAiB,GAExBvE,KAAKqF,YAAYiG,KAAK,CAACC,KAAMP,EAAa1J,SAAUyJ,IACpD/K,KAAKwL,SAASxL,KAAKmJ,QAMrBpG,EAAF7C,UAAA+K,cAAE,SAAc1F,GAAd,IAAFrC,EAAAlD,KAEI,QAAOA,KAAKmJ,OAEA,EAFQnJ,KAAKmJ,MAAMgC,OAAO,SAACC,GACrC,OAAOlI,EAAKoC,YAAYC,EAAK6F,KAC5BvD,QAOL9E,EAAF7C,UAAAuL,OAAE,SAAOlG,EAAU2E,EAAcwB,GAC7B,GAAI1L,KAAK0F,WAAY,CACnB1F,KAAK2L,WAAWzB,GAEhB,IAAI0B,EAAU,EACd,GAAI5L,KAAKmH,UAAYyE,GAAcA,EAAWC,WAAuC,EAA3B7L,KAAK4E,mBAAyB,CACtF,IAAIkH,EAAqBJ,EACrBK,EAAoB/L,KAAK4E,mBAO7B,GANI8G,EAAkB1L,KAAK4E,qBACzBkH,EAAa9L,KAAK4E,mBAClBmH,EAAYL,GAIT1L,KAAK6E,qBAAuB6G,GAAmB1L,KAAK4E,mBAAqB5E,KAAK6E,qBAC/E7E,KAAK6E,qBAAuB6G,GAAmB1L,KAAK4E,mBAAqB5E,KAAK6E,oBAChF,IAAK,IAAIwE,EAAYyC,EAAYzC,GAAK0C,EAAW1C,IAC3CrJ,KAAK6E,sBAAwBwE,GAC/BrJ,KAAKgM,aAAahM,KAAK4F,MAAMyD,GAAIA,QAGhC,GAAKrJ,KAAK6E,oBAAsB6G,GAAqB1L,KAAK6E,oBAAsB6G,EAAkB,CAEnG1L,KAAK6E,oBAAsB6G,EAC7BK,IACS/L,KAAK6E,oBAAsB6G,GACpCI,IAEF,IAASzC,EAAYyC,EAAYzC,GAAK0C,EAAW1C,IAAK,CACpD,IAAI4C,EAAuBjM,KAAKiL,cAAcjL,KAAK4F,MAAMyD,IAIpDrJ,KAAK8E,sBAAwBmH,IAC5BjM,KAAK8E,qBAAuBmH,EAChCjM,KAAKgM,aAAahM,KAAK4F,MAAMyD,GAAIA,GACxBrJ,KAAK2E,0BAGT+G,GAAmB1L,KAAK6E,qBAAuB6G,GAAmB1L,KAAK4E,oBACvE8G,GAAmB1L,KAAK6E,qBAAuB6G,GAAmB1L,KAAK4E,qBAC1E5E,KAAKgM,aAAahM,KAAK4F,MAAMyD,GAAIA,IAKzCrJ,KAAK2E,yBAA0B,OAGtBiH,IAAeA,EAAWC,WACnC7L,KAAK8E,oBAAsB9E,KAAKgM,aAAazG,EAAKmG,GAClD1L,KAAK2E,yBAA0B,EAC/B3E,KAAK6E,oBAAsB6G,GAE7B1L,KAAK4E,mBAAqB8G,IAQ9B3I,EAAF7C,UAAAgM,qBAAE,WACMlM,KAAKgD,YACPhD,KAAKgD,UAAUmJ,cAAgB,WAC7B,OAAO,KAQbpJ,EAAF7C,UAAAkM,oBAAE,WACMpM,KAAKgD,YACPhD,KAAKgD,UAAUmJ,cAAgB7B,YAQnCvH,EAAF7C,UAAAmM,eAAE,SAAe9G,EAAU6C,EAAe8B,GACtC,GAAIlK,KAAKkH,UAAW,CAGlB,IAAMoF,EAAkBpC,EAAMoC,YAAcpC,EAAMqC,cAC9CpC,EAAuBD,EAA2B,OAEN,OAA5CoC,EAAWE,aAAa,iBAA8D,wBAAlCrC,EAAQsC,QAAQC,eACtE1M,KAAKoF,WAAWkG,KAAK,CACnB/F,IAAKA,EACL6C,MAAOA,MASfrF,EAAF7C,UAAAyM,WAAE,SAAWrF,GACLtH,KAAKyH,UAAYH,EACnBtH,KAAKyE,WAAazE,KAAKyE,aAAeC,EAAwBjC,UAC5DiC,EAAwBhC,WAAagC,EAAwBjC,WAE/DzC,KAAKyH,QAAUH,EACftH,KAAKyE,WAAaC,EAAwBjC,WAE5CzC,KAAKiF,aAAayE,KAAK,CAAE9C,KAAM5G,KAAKyH,QAAQb,KAAMc,MAAO1H,KAAKyE,cAMhE1B,EAAF7C,UAAA0M,UAAE,SAAU1C,EAAsB3E,EAAU6C,GACxC,OAAQ8B,EAAM2C,SACZ,KAAKC,EAAAA,MACL,KAAKC,EAAAA,MAEC/M,KAAK0F,YACP1F,KAAKgM,aAAahM,KAAK4F,MAAM5F,KAAKqI,QAAUD,GAAQpI,KAAKqI,QAAUD,GAErE,MACF,KAAK4E,EAAAA,SAKS,EAAR5E,GACFpI,KAAKkI,MAAMC,UAAUC,EAAQ,GAAGzG,QAElC3B,KAAK2L,WAAWzB,GACZlK,KAAK0F,YAAc1F,KAAKmH,UAAY+C,EAAM2B,UAAoC,GAAxB7L,KAAKqI,QAAUD,GACvEpI,KAAKgM,aAAahM,KAAK4F,MAAM5F,KAAKqI,QAAUD,GAAQpI,KAAKqI,QAAUD,GAErE,MACF,KAAK6E,EAAAA,WAKC7E,EAASpI,KAAKkI,MAAMC,UAAUN,OAAS,GACzC7H,KAAKkI,MAAMC,UAAUC,EAAQ,GAAGzG,QAElC3B,KAAK2L,WAAWzB,GACZlK,KAAK0F,YAAc1F,KAAKmH,UAAY+C,EAAM2B,UAAY7L,KAAKqI,QAAUD,EAAQpI,KAAK4F,MAAMiC,QAC1F7H,KAAKgM,aAAahM,KAAK4F,MAAM5F,KAAKqI,QAAUD,GAAQpI,KAAKqI,QAAUD,KAW3ErF,EAAF7C,UAAAgN,uBAAE,SAAuB9E,EAAe8B,GACpClK,KAAKqD,eAAiB6G,EAAMvB,QAC5B3I,KAAKyF,gBAAkB2C,GAMzBrF,EAAF7C,UAAAiN,kBAAE,SAAkBjD,GAEhB,GAAIlK,KAAKyF,kBAAoB6E,WAA6B,EAAhBJ,EAAMvB,QAAa,CAC3D,IAAIyE,EAAoBlD,EAAMvB,QAE9B,GAAgB,EAAZyE,GAAuC,EAAtBpN,KAAKqD,gBAAuB+J,EAAYpN,KAAKqD,gBAAoB,EAAG,CAEvF,IAAIgK,EAA8BrN,KAAKwD,QAAQxD,KAAKyF,iBAAiB0D,OAASiE,EAAYpN,KAAKqD,gBAE3FgK,EAAsBrN,KAAKsN,aAAanF,UAAUnI,KAAKyF,iBAAiB8H,iBAC1EF,EAAsBrN,KAAKsN,aAAanF,UAAUnI,KAAKyF,iBAAiB8H,gBAE1EvN,KAAKuH,QAAQvH,KAAKyF,iBAAiBgE,MAAQ4D,EAE3CrN,KAAKsD,gBAAgBoG,KAAK0D,MAQhCrK,EAAF7C,UAAAsN,qBAAE,WACExN,KAAKqD,eAAiBiH,UACtBtK,KAAKyF,gBAAkB6E,WAMzBvH,EAAF7C,UAAAyL,WAAE,SAAWzB,GACTA,EAAMuD,kBAGA1K,EAAV7C,UAAAuK,gBAAU,SAAgB7D,EAAcuC,GACpC,KAAMA,aAAiB3J,QAAYoH,GACjC,OAAOuC,EAET,IAAyB,EAArBvC,EAAKyE,QAAQ,KAAW,CAC1B,IAAIqC,EAAsB9G,EAAK+G,MAAM,SAAU,GAC/C,OAAO3N,KAAKyK,gBAAgBiD,EAAU,GAAIvE,EAAMuE,EAAU,KAE1D,OAAOvE,EAAMvC,IAOT7D,EAAV7C,UAAA8L,aAAU,SAAazG,EAAUqI,GAAvB,IAAV1K,EAAAlD,KACQ6N,EAAuB7N,KAAKiL,cAAc1F,GAC9C,GAAKsI,EAKE,CAELtI,EAAMvF,KAAKmJ,MAAMgC,OAAO,SAACC,GACvB,OAAOlI,EAAKoC,YAAYC,EAAK6F,KAC5B,GACH,IAAIhD,EAAgBpI,KAAKmJ,MAAMkC,QAAQ9F,IAC1B,EAAT6C,GACFpI,KAAKmJ,MAAMyB,OAAOxC,EAAO,QAXtBpI,KAAKqE,WACRrE,KAAK2K,aAEP3K,KAAKmJ,MAAMtC,KAAKtB,GAclB,OAHAvF,KAAK6K,0BACL7K,KAAKmF,YAAYmG,KAAK,CAAC/F,IAAKA,EAAK6C,MAAOwF,EAAUtM,UAAWuM,IAC7D7N,KAAKwL,SAASxL,KAAKmJ,QACX0E,GAMF9K,EAAV7C,UAAA2K,wBAAU,WAAA,QAAV3H,EAAAlD,KACI,GAAIA,KAAK4F,MAAO,CACd5F,KAAKsE,kBAA8E,IAAxDtE,KAAK4F,MAAMc,KAAK,SAACpH,GAAW,OAAC4D,EAAK+H,cAAc3L,KAC3EU,KAAKuE,gBAAiB,MACtB,IAAgB,IAAAuJ,EHh4BtB,SAAgBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAW9E,EAAI,EAChE,OAAI4E,EAAUA,EAAE/L,KAAK8L,GACd,CACHtE,KAAM,WAEF,OADIsE,GAAK3E,GAAK2E,EAAEnG,SAAQmG,OAAI,GACrB,CAAE7E,MAAO6E,GAAKA,EAAE3E,KAAM+E,MAAOJ,KG03B1BK,CAAArO,KAAK4F,OAA3B0I,EAAAR,EAAApE,QAAA4E,EAAAF,KAAAE,EAAAR,EAAApE,OAAA,CAAW,IAAInE,EAAf+I,EAAAnF,MACQ,GAAKnJ,KAAKiL,cAAc1F,GAAxB,CAGAvF,KAAKuE,gBAAiB,EACtB,+GAQExB,EAAV7C,UAAAoI,iBAAU,WAAA,IAAVpF,EAAAlD,KACQA,KAAKsN,cAAgBtN,KAAKsN,aAAazF,SACzC7H,KAAKwD,QAAU,GACfxD,KAAKsN,aAAa9G,QAAQ,SAAC+H,EAAiCnG,GAC1DlF,EAAKsL,mBAAmBpG,EAAOlF,EAAKuL,qBAEtCzO,KAAK0O,sBACL1O,KAAK4C,mBAAmBgG,iBAOpB7F,EAAV7C,UAAAwO,oBAAU,WAAA,IAAVxL,EAAAlD,KACQ2O,EAA0B,EAE1BC,EAAyB5O,KAAKwD,QAAQ2H,OAAO,SAAC1B,EAA6BrB,GAC7E,OAAIlF,EAAKqE,QAAQa,GAAOyG,UAGpBpF,EAAMqF,OAASrF,EAAMsF,KAAOtF,EAAMuF,OACpCL,GAAmBlF,EAAMN,QAEnBM,EAAMqF,QAAUrF,EAAMsF,MAAQtF,EAAMuF,OAC3CnH,OAGCoH,EAA+B,EAMnC,GALIN,EAAkB3O,KAAKkP,YACzBD,EAAuBjP,KAAKkP,UAAYP,GAItCC,GAAkBK,EAAsB,CAC1C,IAAIE,EAAmBC,KAAKC,MAAMJ,EAAuBL,GACrDU,EAAyB,EAE7BtP,KAAKwD,QAAQgD,QAAQ,SAAC+I,IAChBrM,EAAKM,QAAQ+L,EAASnH,OAAO2G,KAAO7L,EAAKM,QAAQ+L,EAASnH,OAAOe,MAAQgG,GACzEjM,EAAKM,QAAQ+L,EAASnH,OAAO4G,KAAO9L,EAAKM,QAAQ+L,EAASnH,OAAOe,MAAQgG,IACxEjM,EAAKM,QAAQ+L,EAASnH,OAAO0G,SAChC5L,EAAKsL,mBAAmBe,EAASnH,MAAO+G,GACxCG,OAIJ,IAAIE,EAA4BxP,KAAKwD,QAAQ2H,OAAO,SAAC1B,GACnD,OAAQA,EAAMqF,QAAUrF,EAAMsF,MAC7BlH,OACC2H,IAAsBF,GAAkBE,IAAsBZ,GAChE5O,KAAK0O,wBAQH3L,EAAV7C,UAAAsO,mBAAU,SAAmBpG,EAAee,GAUxC,IAAIsG,IATJzP,KAAKwD,QAAQ4E,GAAS,CACpBe,MAAOA,EACPf,MAAOA,EACP0G,OAAO,EACPE,KAAK,EACLD,KAAK,IAKP,GAAI/O,KAAKuH,QAAQa,GAEf,GAAyC,iBAA9BpI,KAAKuH,QAAQa,GAAOqB,MAAoB,CACjD,IAAIiG,EAA8D1P,KAAKuH,QAAQa,GAAY,MAE3FqH,EAA0BC,KAAeA,EAAUV,IAC/CU,GAAaA,EAAUV,KAAOhP,KAAKwD,QAAQ4E,GAAOe,OACpDnJ,KAAKwD,QAAQ4E,GAAOe,MAAQuG,EAAUV,IACtChP,KAAKwD,QAAQ4E,GAAO4G,KAAM,GAEjBU,GAAaA,EAAUX,KAAO/O,KAAKwD,QAAQ4E,GAAOe,QAC3DnJ,KAAKwD,QAAQ4E,GAAOe,MAAQuG,EAAUX,IACtC/O,KAAKwD,QAAQ4E,GAAO2G,KAAM,OAGkB,iBAA9B/O,KAAKuH,QAAQa,GAAOqB,QACpCzJ,KAAKwD,QAAQ4E,GAAOe,MAAgBnJ,KAAKuH,QAAQa,GAAY,MAC7DqH,EAAyBzP,KAAKwD,QAAQ4E,GAAO0G,OAAQ,IAIpDW,GACDzP,KAAKwD,QAAQ4E,GAAOe,MAAQnJ,KAAKsN,aAAanF,UAAUC,GAAOmF,iBACjEvN,KAAKwD,QAAQ4E,GAAOe,MAAQnJ,KAAKsN,aAAanF,UAAUC,GAAOmF,eAC/DvN,KAAKwD,QAAQ4E,GAAO4G,KAAM,EAC1BhP,KAAKwD,QAAQ4E,GAAO0G,OAAQ,IAOxB/L,EAAV7C,UAAAuO,gBAAU,WACN,IAAIkB,EAAwC3P,KAAKuH,QAAQ4D,OAAO,SAACoD,GAA4B,OAACA,EAAIM,SAClG,OAAOO,KAAKC,MAAMrP,KAAKkP,UAAYS,EAAgB9H,SAM7C9E,EAAV7C,UAAAqI,sBAAU,WAAA,IAAVrF,EAAAlD,KACQ4P,EAAuB,EAC3B,GAAI5P,KAAK4F,MAAO,CAEd,IAAIiK,EADJ7P,KAAK8D,aAAe,EAIpB9D,KAAK4F,MAAMY,QAAQ,SAAClH,EAAQ+J,GAGrBnG,EAAKW,gBAAgBwF,KACxBnG,EAAKW,gBAAgBwF,GAAKnG,EAAKW,gBAAgB,IAtiCX,IAwiCtCgM,GAAgB3M,EAAKW,gBAAgBwF,GAEW,EAA5CnG,EAAKc,sBAAwB6L,GAC/BD,MAGJ5P,KAAK8D,aAAe+L,EAEpB,IAAIxH,EAAkBuH,EArjCM,EAsjC5B5P,KAAKiE,SAAqB,EAAVoE,EAAcA,EAAU,EAKxC,IAHA,IAAIyH,EAAqB9P,KAAK+D,YAC1BqE,EAAgB,EAEA,EAAb0H,GACLA,GAAc9P,KAAK6D,gBAAgB7D,KAAKqI,QAAUD,GAClDA,IAGF,IACI2H,EADiB3H,EAAQ,EAAC,EACFpI,KAAKqI,QAE7B2H,SAASD,IAAUA,EAAQ/P,KAAK4F,MAAMiC,OACxCkI,EAAQ/P,KAAK4F,MAAMiC,OACTmI,SAASD,KACnBA,EAtkC0B,GAwkC5B/P,KAAKkE,OAAS6L,OAEd/P,KAAK8D,aAAe,EACpB9D,KAAKiE,SAAW,EAChBjE,KAAKkE,OAAS,EAGhB,IAAI+L,EAAiB,EAErB,GAjlC8B,EAilC1BL,EACF,IAASxH,EAAgB,EAAGA,EAAQpI,KAAKqI,QAASD,IAChD6H,GAAUjQ,KAAK6D,gBAAgBuE,GAInCpI,KAAK2F,iBAAmB3F,KAAKiD,cAAciN,yBAAyB,eAAiBD,EAASjQ,KAAKmQ,aAAe,OAC9GnQ,KAAK4F,QACP5F,KAAKoG,aAAepG,KAAK6F,KAAKuK,MAAMpQ,KAAKqI,QAASrI,KAAK+P,QAIzDjK,QAAQC,UAAUC,KAAK,WACrB9C,EAAKN,mBAAmBgG,oBAr+B9B,CAA0C/F,iBA3G1C,CAAApC,KAACC,EAAAA,UAADC,KAAA,CAAW,CACT0P,UAAW,CAAC,CACVC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA1N,IAC9B2N,OAAO,IAET9P,SAAU,gBACVC,OAAQ,CAAC,u7EACTC,SAAU,upIAgGV6P,OAAQ,CAAC,SACTC,gBAAiBC,EAAAA,wBAAwBC,8CAyU3C,CAAArQ,KAAA6J,UAAAyG,WAAA,CAAA,CAAAtQ,KAAeuQ,EAAAA,UAAf,CAAAvQ,KAA2BwQ,EAAAA,OAA3BtQ,KAAA,CAAkCuQ,EAAAA,aAlgBlC,CAAAzQ,KAAiCM,EAAAA,YACjC,CAAAN,KAAmB0Q,EAAAA,cAHnB,CAAA1Q,KAAS2Q,EAAAA,uCAyST9H,WAAA,CAAA,CAAA7I,KAAG4Q,EAAAA,gBAAH1Q,KAAA,CAAmBmB,KAEnBoE,eAAA,CAAA,CAAAzF,KAAG6Q,EAAAA,UAAH3Q,KAAA,CAAa,mBAEb2M,aAAA,CAAA,CAAA7M,KAAG8Q,EAAAA,aAAH5Q,KAAA,CAAgB,mBAEhBuH,MAAA,CAAA,CAAAzH,KAAG8Q,EAAAA,aAAH5Q,KAAA,CAAgBM,KA4BhB4E,KAAA,CAAA,CAAApF,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,UAuBT4G,QAAA,CAAA,CAAA9G,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,aA6BTqG,iBAAA,CAAA,CAAAvG,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,sBAaT+E,WAAA,CAAA,CAAAjF,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,gBAaTuG,UAAA,CAAA,CAAAzG,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,eAaTwG,SAAA,CAAA,CAAA1G,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,cAaTyG,SAAA,CAAA,CAAA3G,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,cAYT6Q,OAAA,CAAA,CAAA/Q,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,YAqBTgH,UAAA,CAAA,CAAAlH,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,eAuBTsE,aAAA,CAAA,CAAAxE,KAAGgR,EAAAA,OAAH9Q,KAAA,CAAU,gBAQVwE,YAAA,CAAA,CAAA1E,KAAGgR,EAAAA,OAAH9Q,KAAA,CAAU,eAOVyE,WAAA,CAAA,CAAA3E,KAAGgR,EAAAA,OAAH9Q,KAAA,CAAU,cAOV0E,YAAA,CAAA,CAAA5E,KAAGgR,EAAAA,OAAH9Q,KAAA,CAAU,eAeV2E,YAAA,CAAA,CAAA7E,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,kBC9eT,IAAA+Q,EAAA,WAoFE,SAAFA,EAAsBrR,EAAiCC,GAAjCN,KAAtBK,YAAsBA,EAAiCL,KAAvDM,UAAuDA,EAlFvDN,KAAAyE,WAAgDC,EAAwBjC,UAexEzC,KAAA4G,KAAgC,GAOhC5G,KAAAoH,UAAyC,EAOzCpH,KAAA2R,QAAqC,EAOrC3R,KAAA4R,SAAuC,EAwBvC5R,KAAAiF,aAAwB,IAAIC,EAAAA,aAuBxBlF,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,+BA/E1DhB,OAAF2B,eAAMuQ,EAANxR,UAAA,iBAAA,CAAAkB,IAAE,WACE,OAAIpB,KAAK6R,gBAAkB7R,KAAK6R,eAAerR,cACxBR,KAAK6R,eAA4B,cAAEpQ,wBAAwBgI,MAE3E,qCAoCXjK,OAAA2B,eAAMuQ,EAANxR,UAAA,YAAA,CAAAmB,IAAA,SAAgBqG,GACZ,IAAIC,EAAoBD,EAAQA,EAAME,cAAgB,MACtD,GAAkB,SAAdD,GAAsC,QAAdA,EAC1B,MAAM,IAAIH,MAAM,0CAGlBxH,KAAKyE,WAA2B,QAAdkD,EAChBjD,EAAwBjC,UAAYiC,EAAwBhC,4CAYlElD,OAAA2B,eAAMuQ,EAANxR,UAAA,gBAAA,CAAAkB,IAAA,WACI,OAAOpB,KAAKoH,0CAIhB5H,OAAA2B,eAAMuQ,EAANxR,UAAA,eAAA,CAAAkB,IAAA,WACI,OAAOpB,KAAKoH,0CAIhB5H,OAAA2B,eAAMuQ,EAANxR,UAAA,aAAA,CAAAkB,IAAA,WACI,OAAOpB,KAAK2R,wCAIhBnS,OAAA2B,eAAMuQ,EAANxR,UAAA,cAAA,CAAAkB,IAAA,WACI,OAAOpB,KAAK4R,yCAWdF,EAAFxR,UAAA4R,YAAE,WACM9R,KAAKoH,UACPpH,KAAKiF,aAAaqG,KAAK,CAAC1E,KAAM5G,KAAK4G,KAAMc,MAAO1H,KAAKyE,cAIzDiN,EAAFxR,UAAA6R,YAAE,WACE,OAAO/R,KAAKyE,aAAeC,EAAwBjC,WAGrDiP,EAAFxR,UAAA8R,aAAE,WACE,OAAOhS,KAAKyE,aAAeC,EAAwBhC,cAvGvD,iBA1BA,CAAAjC,KAACC,EAAAA,UAADC,KAAA,CAAW,CAETC,SAAU,2BACVC,OAAQ,CAAC,8wIACTC,SAAU,ipBAbZ,CAAAL,KAA4DM,EAAAA,YAA5D,CAAAN,KAAiDO,EAAAA,+BAuCjD6Q,eAAA,CAAA,CAAApR,KAAG6Q,EAAAA,UAAH3Q,KAAA,CAAa,gBAAiB,CAACsR,KAAMlR,EAAAA,eAarC6F,KAAA,CAAA,CAAAnG,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,UAOTyG,SAAA,CAAA,CAAA3G,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,cAOTgR,OAAA,CAAA,CAAAlR,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,YAOTiR,QAAA,CAAA,CAAAnR,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,aAOTgH,UAAA,CAAA,CAAAlH,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,eAgBTsE,aAAA,CAAA,CAAAxE,KAAGgR,EAAAA,OAAH9Q,KAAA,CAAU,gBAGVuR,cAAA,CAAA,CAAAzR,KAAG0R,EAAAA,YAAHxR,KAAA,CAAe,yBAKfyR,aAAA,CAAA,CAAA3R,KAAG0R,EAAAA,YAAHxR,KAAA,CAAe,wBAKf0R,WAAA,CAAA,CAAA5R,KAAG0R,EAAAA,YAAHxR,KAAA,CAAe,sBAKf2R,YAAA,CAAA,CAAA7R,KAAG0R,EAAAA,YAAHxR,KAAA,CAAe,uBAYfmR,YAAA,CAAA,CAAArR,KAAGoB,EAAAA,aAAHlB,KAAA,CAAgB,YC9HhB,IAAA4R,EAAA,WAyBE,SAAFA,EAAsBlS,EAAiCC,GAAjCN,KAAtBK,YAAsBA,EAAiCL,KAAvDM,UAAuDA,EAPvDN,KAAA4R,SAAuC,EAQnC5R,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,6BAL5DhB,OAAA2B,eAAMoR,EAANrS,UAAA,cAAA,CAAAkB,IAAA,WACI,OAAOpB,KAAK4R,2CAtBhB,iBAEA,CAAAnR,KAACC,EAAAA,UAADC,KAAA,CAAW,CAETC,SAAU,yBACVC,OAAQ,CAAC,8zFACTC,SAAU,kLANZ,CAAAL,KAAsCM,EAAAA,YAAtC,CAAAN,KAA2BO,EAAAA,+BAkB3B4Q,QAAA,CAAA,CAAAnR,KAAGmB,EAAAA,MAAHjB,KAAA,CAAS,aAET2R,YAAA,CAAA,CAAA7R,KAAG0R,EAAAA,YAAHxR,KAAA,CAAe,wBCpBf,IAAA6R,EAUE,SAAFA,EAAsBnS,EAAiCC,GAAjCN,KAAtBK,YAAsBA,EAAiCL,KAAvDM,UAAuDA,EACnDN,KAAKM,UAAUC,SAASP,KAAKK,YAAYG,cAAe,gCAT5D,CAAAC,KAACC,EAAAA,UAADC,KAAA,CAAW,CAETC,SAAU,uBACVC,OAAQ,CAAC,iGACTC,SAAU,mEANZ,CAAAL,KAA+BM,EAAAA,YAA/B,CAAAN,KAAoBO,EAAAA,aCApB,IAAAyR,EAAA,WAAA,SAAAA,YAgBEA,EAAFvS,UAAAwS,WAAE,SAAW7M,EAAa8M,EAAoBC,EAA6BC,QAA3E,IAAAD,IAA8CA,GAA9C,GACI,IAAIzH,EAAiBwH,EAAcC,EAAaD,EAAWjG,cAAgBiG,EAAc,GAazF,OAZIxH,IACFtF,EAAOA,EAAKsF,OAAO,SAAC2H,GAQlB,aAAwB,IAPPtT,OAAO+G,KAAKuM,GAAMpM,KAAK,SAACqM,GACvC,IAAKF,IAAqD,IAAlCA,EAAgBxH,QAAQ0H,GAAa,CAC3D,IAAMC,EAAwB,GAAKF,EAAKC,GAExC,OAAoC,GADVH,EAAaI,EAAatG,cAAgBsG,GACnD3H,QAAQF,UAM1BtF,GAWT4M,EAAFvS,UAAA+S,SAAE,SAASpN,EAAa2L,EAAgB7J,GAmBpC,YAnBJ,IAAAA,IAAwCA,EAAqCjD,EAAwBjC,WAC7F+O,IACF3L,EAAOlG,MAAMuT,KAAKrN,IACbsN,KAAK,SAACC,EAAQ7T,GACjB,IAAI8T,EAAaD,EAAE5B,GACf8B,EAAa/T,EAAEiS,GACf+B,EAAoB,EAUxB,OATKC,OAAOC,MAAMD,OAAOE,WAAWL,KAAYG,OAAOC,MAAMD,OAAOE,WAAWJ,IAGzED,EAAQC,EACVC,GAAa,EACID,EAARD,IACTE,EAAY,GALdA,EAAYC,OAAOE,WAAWL,GAASG,OAAOE,WAAWJ,GAQpDC,GAAa5L,IAAcjD,EAAwBhC,YAAc,EAAI,KAGzEmD,GAWT4M,EAAFvS,UAAAyT,SAAE,SAAS9N,EAAawC,EAAiB0H,GAIrC,OAHe,GAAX1H,IACFxC,EAAOA,EAAKuK,MAAM/H,EAAU,EAAG0H,IAE1BlK,KA3EX,GA+EA,SAAA+N,EACIC,GACF,OAAOA,GAAU,IAAIpB,gBA7EvB,CAAAhS,KAACqT,EAAAA,mDAgFD,IAAaC,EAAgC,CAE3CzD,QAASmC,EACTuB,KAAM,CAAC,CAAC,IAAIhD,EAAAA,SAAY,IAAIiD,EAAAA,SAAYxB,IACxCyB,WAAYN,GCxERO,EAA6B,CACjCpR,EACAjB,EAEA4P,EACAa,EACAtR,EACAb,EACAoS,GAqBF4B,EAAA,SAAAA,oBAlBA,CAAA3T,KAAC4T,EAAAA,SAAD1T,KAAA,CAAU,CACR2T,QAAS,CACPC,EAAAA,aACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,yBAEFC,aAAc,CACZT,GAEFU,QAAS,CACPV,GAEF9D,UAAW,CACT0D"
}
