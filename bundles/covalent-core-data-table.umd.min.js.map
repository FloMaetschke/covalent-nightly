{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@covalent/core/data-table/data-table-row/data-table-row.component.ts","ng://@covalent/core/data-table/directives/data-table-template.directive.ts","ng://@covalent/core/data-table/data-table.component.ts","ng://@covalent/core/data-table/data-table-column/data-table-column.component.ts","ng://@covalent/core/data-table/data-table-cell/data-table-cell.component.ts","ng://@covalent/core/data-table/data-table-table/data-table-table.component.ts","ng://@covalent/core/data-table/data-table.module.ts","ng://@covalent/core/data-table/services/data-table.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","TdDataTableColumnRowComponent","_elementRef","_renderer","addClass","nativeElement","Component","args","selector","template","ElementRef","Renderer2","TdDataTableRowComponent","_selected","defineProperty","selected","removeClass","height","getBoundingClientRect","clickListener","focus","Input","HostListener","TdDataTableTemplateDirective","templateRef","viewContainerRef","_super","tslib_1.__extends","Directive","TemplateRef","ViewContainerRef","TemplatePortalDirective","Ascending","Descending","TdDataTableBase","_changeDetectorRef","_TdDataTableMixinBase","mixinControlValueAccessor","TdDataTableComponent","_document","_domSanitizer","_this","_hostWidth","_resizableColumns","_columnClientX","_onColumnResize","Subject","_widths","_onResize","_scrollHorizontalOffset","_onHorizontalScroll","_onVerticalScroll","_rowHeightCache","_totalHeight","_hostHeight","_scrollVerticalOffset","_fromRow","_toRow","_selectable","_clickable","_multiple","_allSelected","_indeterminate","_sortable","_sortOrder","TdDataTableSortingOrder","_shiftPreviouslyPressed","_lastSelectedIndex","_firstSelectedIndex","_firstCheckboxValue","_templateMap","Map","sortChange","EventEmitter","rowSelect","rowClick","selectAll","compareWith","row","model","_resizingColumn","selectable","_offsetTransform","_data","data","Promise","resolve","then","refresh","_scrollableDiv","scrollTop","_virtualData","_columns","hasData","keys","forEach","k","find","c","name","push","label","cols","resizableColumns","coerceBooleanProperty","clickable","multiple","sortable","columnName","column","columns","Error","_sortBy","order","sortOrder","toUpperCase","ngOnInit","_resizeSubs","asObservable","subscribe","_rows","toArray","index","fromRow","_calculateWidths","_calculateVirtualRows","_columnResizeSubs","pipe","debounceTime","clientX","markForCheck","_horizontalScrollSubs","horizontalScroll","_verticalScrollSubs","verticalScroll","_valueChangesSubs","valueChanges","ngAfterContentInit","_b","tslib_1.__values","_templates","_c","set","tdDataTableTemplate","ngAfterContentChecked","newHostWidth_1","width","setTimeout","newHostHeight","ngAfterViewInit","_rowsChangedSubs","changes","ngOnDestroy","unsubscribe","handleScroll","event","element","scrollLeft","getColumnWidth","undefined","getCellValue","nested","_getNestedValue","getTemplateRef","get","clearModel","splice","_calculateCheckboxState","_selectAll","checked","toggledRows","isRowSelected","modelRow","filter","val","indexOf","emit","rows","onChange","select","currentSelected","blockEvent","mouseEvent","shiftKey","firstIndex","lastIndex","_doSelection","rowSelected","disableTextSelection","onselectstart","enableTextSelection","handleRowClick","srcElement","currentTarget","getAttribute","tagName","toLowerCase","handleSort","_rowKeyup","keyCode","ENTER","SPACE","UP_ARROW","DOWN_ARROW","_handleStartColumnDrag","_handleColumnDrag","xPosition","proposedManualWidth","_colElements","projectedWidth","_handleEndColumnDrag","preventDefault","splitName","split","rowIndex","wasSelected","col","_adjustColumnWidth","_calculateWidth","_adjustColumnWidhts","fixedTotalWidth","flexibleWidths","hidden","limit","max","min","recalculateHostWidth","hostWidth","newValue_1","Math","floor","adjustedNumber_1","colWidth","newFlexibleWidths","skipMinWidthProjection","widthOpts","renderedColumns","scrolledRows","rowHeightSum_1","hostHeight","toRow","TD_VIRTUAL_OFFSET","isFinite","offset","bypassSecurityTrustStyle","totalHeight","slice","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","changeDetection","ChangeDetectionStrategy","OnPush","Optional","type","Inject","DOCUMENT","DomSanitizer","ChangeDetectorRef","ContentChildren","ViewChild","static","ViewChildren","Output","TdDataTableColumnComponent","active","numeric","_columnContent","handleClick","isAscending","isDescending","read","HostBinding","TdDataTableCellComponent","_align","align","TdDataTableTableComponent","TD_DATA_TABLE","CovalentDataTableModule","NgModule","imports","CommonModule","MatCheckboxModule","MatTooltipModule","MatIconModule","MatPseudoCheckboxModule","declarations","exports","TdDataTableService","filterData","searchTerm","ignoreCase","excludedColumns","item","key","preItemValue","sortData","sortBy","from","sort","a","compA","compB","direction","Number","isNaN","parseFloat","pageData","Injectable","providedIn"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  Component,\n  Input,\n  Output,\n  Renderer2,\n  ElementRef,\n  ContentChildren,\n  QueryList,\n  HostListener,\n} from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styleUrls: ['./data-table-row.component.scss'],\n  templateUrl: './data-table-row.component.html',\n})\nexport class TdDataTableColumnRowComponent {\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styleUrls: ['./data-table-row.component.scss'],\n  templateUrl: './data-table-row.component.html',\n})\nexport class TdDataTableRowComponent {\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click')\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({ selector: '[tdDataTableTemplate]ng-template' })\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n  ContentChildren,\n  TemplateRef,\n  AfterContentInit,\n  QueryList,\n  Inject,\n  Optional,\n  ViewChildren,\n  ElementRef,\n  OnInit,\n  AfterContentChecked,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable, Subscription, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport {\n  ITdDataTableSortChangeEvent,\n  TdDataTableColumnComponent,\n} from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TdDataTableComponent),\n      multi: true,\n    },\n  ],\n  selector: 'td-data-table',\n  styleUrls: ['./data-table.component.scss'],\n  templateUrl: './data-table.component.html',\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase\n  implements IControlValueAccessor, OnInit, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  /** manually resizable columns */\n  private _resizableColumns: boolean = false;\n  private _columnClientX: number = 0;\n  private _columnResizeSubs: Subscription;\n  private _resizingColumn: number;\n  private _onColumnResize: Subject<number> = new Subject<number>();\n\n  get resizingColumn(): number {\n    return this._resizingColumn;\n  }\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv', { static: true }) _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      const row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * resizableColumns?: boolean\n   * Enables manual column resize.\n   * Defaults to 'false'\n   */\n  @Input('resizableColumns')\n  set resizableColumns(resizableColumns: boolean) {\n    this._resizableColumns = coerceBooleanProperty(resizableColumns);\n  }\n  get resizableColumns(): boolean {\n    return this._resizableColumns;\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    const sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ? TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output() sortChange: EventEmitter<ITdDataTableSortChangeEvent> = new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output() rowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output() rowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output() selectAll: EventEmitter<ITdDataTableSelectAllEvent> = new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    private _elementRef: ElementRef,\n    private _domSanitizer: DomSanitizer,\n    _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input() compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  };\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n\n    // initialize observable for column resize calculations\n    this._columnResizeSubs = this._onColumnResize\n      .asObservable()\n      .pipe(debounceTime(0))\n      .subscribe((clientX: number) => {\n        this._columnClientX = clientX;\n        this._calculateWidths();\n        this._changeDetectorRef.markForCheck();\n      });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable().subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable().subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (const template of this._templates.toArray()) {\n      this._templateMap.set(template.tdDataTableTemplate, template.templateRef);\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    // check if the scroll has been reset when element is hidden\n    if (this._scrollVerticalOffset - this._scrollableDiv.nativeElement.scrollTop > 5) {\n      // scroll back to the top if element has been reset\n      this._onVerticalScroll.next(0);\n    }\n    if (this._elementRef.nativeElement) {\n      const newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        setTimeout(() => {\n          this._hostWidth = newHostWidth;\n          this._onResize.next();\n        }, 0);\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      const newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(debounceTime(0)).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._columnResizeSubs) {\n      this._columnResizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    const element: HTMLElement = <HTMLElement>event.target;\n    if (element) {\n      const horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      const verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n  getTemplateRef(name: string): TemplateRef<any> {\n    return this._templateMap.get(name);\n  }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  _selectAll(checked: boolean): void {\n    const toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          const modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          const index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.selectAll.emit({ rows: toggledRows, selected: checked });\n    this.onChange(this.value);\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value\n      ? this.value.filter((val: any) => {\n          return this.compareWith(row, val);\n        }).length > 0\n      : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      const mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if (\n          (this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n          (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)\n        ) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if (this._firstSelectedIndex > currentSelected || this._firstSelectedIndex < currentSelected) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            const rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) || (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (\n              this._shiftPreviouslyPressed &&\n              ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex))\n            ) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              this._doSelection(this._data[i], i);\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n        // if shift wasnt pressed, then we take the element checked as the first row\n        // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      const element: HTMLElement = event.target as HTMLElement;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null && element.tagName.toLowerCase() !== 'mat-pseudo-checkbox') {\n        this.rowClick.emit({\n          row,\n          index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder =\n        this._sortOrder === TdDataTableSortingOrder.Ascending\n          ? TdDataTableSortingOrder.Descending\n          : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.sortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < this._rows.toArray().length - 1) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n      // default\n    }\n  }\n\n  /**\n   * Sets column index of the dragged column and initial clientX of column\n   */\n  _handleStartColumnDrag(index: number, event: MouseEvent): void {\n    this._columnClientX = event.clientX;\n    this._resizingColumn = index;\n  }\n\n  /**\n   * Calculates new width depending on new clientX of dragger column\n   */\n  _handleColumnDrag(event: MouseEvent | DragEvent): void {\n    // check if there was been a separator clicked for resize\n    if (this._resizingColumn !== undefined && event.clientX > 0) {\n      const xPosition: number = event.clientX;\n      // checks if the separator is being moved to try and resize the column, else dont do anything\n      if (xPosition > 0 && this._columnClientX > 0 && xPosition - this._columnClientX !== 0) {\n        // calculate the new width depending if making the column bigger or smaller\n        let proposedManualWidth: number = this._widths[this._resizingColumn].value + (xPosition - this._columnClientX);\n        // if the proposed new width is less than the projected min width of the column, use projected min width\n        if (proposedManualWidth < this._colElements.toArray()[this._resizingColumn].projectedWidth) {\n          proposedManualWidth = this._colElements.toArray()[this._resizingColumn].projectedWidth;\n        }\n        this.columns[this._resizingColumn].width = proposedManualWidth;\n        // update new x position for the resized column\n        this._onColumnResize.next(xPosition);\n      }\n    }\n  }\n\n  /**\n   * Ends dragged flags\n   */\n  _handleEndColumnDrag(): void {\n    this._columnClientX = undefined;\n    this._resizingColumn = undefined;\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      const splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    const wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      const index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.rowSelect.emit({ row, index: rowIndex, selected: !wasSelected });\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (const row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    const flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      const newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (\n          (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue) ||\n          (this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue) ||\n          !this._widths[colWidth.index].limit\n        ) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      const newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value,\n      index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        const widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = widthOpts && !!widthOpts.min;\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n          // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n        // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection && this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    const renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, i: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[i]) {\n          this._rowHeightCache[i] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[i];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      const fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      const range: number = index - 1 + TD_VIRTUAL_OFFSET * 2;\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle(\n      'translateY(' + (offset - this.totalHeight) + 'px)',\n    );\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  ViewChild,\n} from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styleUrls: ['./data-table-column.component.scss'],\n  templateUrl: './data-table-column.component.html',\n})\nexport class TdDataTableColumnComponent {\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', { read: ElementRef, static: true }) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input() name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input() sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input() active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input() numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    const sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ? TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output() sortChange: EventEmitter<ITdDataTableSortChangeEvent> = new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click')\n  handleClick(): void {\n    if (this.sortable) {\n      this.sortChange.emit({ name: this.name, order: this._sortOrder });\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n}\n","import { Component, Input, Renderer2, ElementRef, HostBinding } from '@angular/core';\n\nexport type TdDataTableCellAlign = 'start' | 'center' | 'end';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td[td-data-table-cell]',\n  styleUrls: ['./data-table-cell.component.scss'],\n  templateUrl: './data-table-cell.component.html',\n})\nexport class TdDataTableCellComponent {\n  private _align: TdDataTableCellAlign;\n\n  /**\n   * numeric?: boolean\n   * Makes cell follow the numeric data-table specs.\n   * Defaults to 'false'\n   */\n  @Input() numeric: boolean = false;\n\n  /**\n   * align?: 'start' | 'center' | 'end'\n   * Makes cell content align on demand\n   * Defaults to 'left', overrides numeric\n   */\n  @Input()\n  set align(align: TdDataTableCellAlign) {\n    this._align = align;\n  }\n  get align(): TdDataTableCellAlign {\n    return this._align;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-cell');\n  }\n}\n","import { Component, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'table[td-data-table]',\n  styleUrls: ['./data-table-table.component.scss'],\n  templateUrl: './data-table-table.component.html',\n})\nexport class TdDataTableTableComponent {\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table');\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nimport { TdDataTableComponent } from './data-table.component';\nimport { TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableCellComponent } from './data-table-cell/data-table-cell.component';\nimport { TdDataTableRowComponent, TdDataTableColumnRowComponent } from './data-table-row/data-table-row.component';\nimport { TdDataTableTableComponent } from './data-table-table/data-table-table.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nconst TD_DATA_TABLE: Type<any>[] = [\n  TdDataTableComponent,\n  TdDataTableTemplateDirective,\n\n  TdDataTableColumnComponent,\n  TdDataTableCellComponent,\n  TdDataTableRowComponent,\n  TdDataTableColumnRowComponent,\n  TdDataTableTableComponent,\n];\n\n@NgModule({\n  imports: [CommonModule, MatCheckboxModule, MatTooltipModule, MatIconModule, MatPseudoCheckboxModule],\n  declarations: [TD_DATA_TABLE],\n  exports: [TD_DATA_TABLE],\n})\nexport class CovalentDataTableModule {}\n","import { Injectable } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TdDataTableService {\n  /**\n   * params:\n   * - data: any[]\n   * - searchTerm: string\n   * - ignoreCase: boolean = false\n   * - excludedColumns: string[] = []\n   *\n   * Searches [data] parameter for [searchTerm] matches and returns a new array with them.\n   */\n  filterData(data: any[], searchTerm: string, ignoreCase: boolean = false, excludedColumns?: string[]): any[] {\n    const filter: string = searchTerm ? (ignoreCase ? searchTerm.toLowerCase() : searchTerm) : '';\n    if (filter) {\n      data = data.filter((item: any) => {\n        const res: any = Object.keys(item).find((key: string) => {\n          if (!excludedColumns || excludedColumns.indexOf(key) === -1) {\n            const preItemValue: string = '' + item[key];\n            const itemValue: string = ignoreCase ? preItemValue.toLowerCase() : preItemValue;\n            return itemValue.indexOf(filter) > -1;\n          }\n        });\n        return typeof res !== 'undefined';\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - sortBy: string\n   * - sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending\n   *\n   * Sorts [data] parameter by [sortBy] and [sortOrder] and returns the sorted data.\n   */\n  sortData(data: any[], sortBy: string, sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending): any[] {\n    if (sortBy) {\n      data = Array.from(data); // Change the array reference to trigger OnPush and not mutate original array\n      data.sort((a: any, b: any) => {\n        const compA: any = a[sortBy];\n        const compB: any = b[sortBy];\n        let direction: number = 0;\n        if (!Number.isNaN(Number.parseFloat(compA)) && !Number.isNaN(Number.parseFloat(compB))) {\n          direction = Number.parseFloat(compA) - Number.parseFloat(compB);\n        } else {\n          if (compA < compB) {\n            direction = -1;\n          } else if (compA > compB) {\n            direction = 1;\n          }\n        }\n        return direction * (sortOrder === TdDataTableSortingOrder.Descending ? -1 : 1);\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - fromRow: number\n   * - toRow: : number\n   *\n   * Returns a section of the [data] parameter starting from [fromRow] and ending in [toRow].\n   */\n  pageData(data: any[], fromRow: number, toRow: number): any[] {\n    if (fromRow >= 1) {\n      data = data.slice(fromRow - 1, toRow);\n    }\n    return data;\n  }\n}\n"]}