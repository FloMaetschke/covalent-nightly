{
  "version": 3,
  "file": "covalent-core.umd.min.js",
  "sources": [
    "ng://@covalent/core/paging/paging-bar.component.ts",
    "ng://@covalent/core/paging/paging.module.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll-row.directive.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll-container.component.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll.module.ts",
    "ng://@covalent/core/notifications/notification-count.component.ts",
    "ng://@covalent/core/notifications/notifications.module.ts",
    "ng://@covalent/core/common/animations/toggle/toggle.directive.ts",
    "ng://@covalent/core/common/animations/fade/fade.directive.ts",
    "ng://@covalent/core/common/forms/auto-trim/auto-trim.directive.ts",
    "ng://@covalent/core/common/pipes/time-ago/time-ago.pipe.ts",
    "ng://@covalent/core/common/pipes/time-difference/time-difference.pipe.ts",
    "ng://@covalent/core/common/pipes/bytes/bytes.pipe.ts",
    "ng://@covalent/core/common/pipes/digits/digits.pipe.ts",
    "ng://@covalent/core/common/pipes/truncate/truncate.pipe.ts",
    "ng://@covalent/core/common/services/router-path.service.ts",
    "ng://@covalent/core/common/services/icon.service.ts",
    "ng://@covalent/core/common/common.module.ts",
    "ng://@covalent/core/common/animations/rotate/rotate.animation.ts",
    "ng://@covalent/core/message/message.component.ts",
    "ng://@covalent/core/message/message.module.ts",
    "ng://@covalent/core/chips/chips.component.ts",
    "ng://@covalent/core/chips/chips.module.ts",
    "ng://@covalent/core/data-table/data-table-row/data-table-row.component.ts",
    "ng://@covalent/core/data-table/directives/data-table-template.directive.ts",
    "ng://@covalent/core/data-table/data-table.component.ts",
    "ng://@covalent/core/data-table/data-table-column/data-table-column.component.ts",
    "ng://@covalent/core/data-table/data-table-cell/data-table-cell.component.ts",
    "ng://@covalent/core/data-table/data-table-table/data-table-table.component.ts",
    "ng://@covalent/core/data-table/services/data-table.service.ts",
    "ng://@covalent/core/data-table/data-table.module.ts",
    "ng://@covalent/core/dialogs/dialog.component.ts",
    "ng://@covalent/core/dialogs/alert-dialog/alert-dialog.component.ts",
    "ng://@covalent/core/dialogs/confirm-dialog/confirm-dialog.component.ts",
    "ng://@covalent/core/dialogs/prompt-dialog/prompt-dialog.component.ts",
    "ng://@covalent/core/dialogs/services/dialog.service.ts",
    "ng://@covalent/core/dialogs/dialogs.module.ts",
    "ng://@covalent/core/expansion-panel/expansion-panel.component.ts",
    "ng://@covalent/core/expansion-panel/expansion-panel-group.component.ts",
    "ng://@covalent/core/expansion-panel/expansion-panel.module.ts",
    "ng://@covalent/core/file/directives/file-select.directive.ts",
    "ng://@covalent/core/file/directives/file-drop.directive.ts",
    "ng://@covalent/core/file/file-input/file-input.component.ts",
    "ng://@covalent/core/file/file-upload/file-upload.component.ts",
    "ng://@covalent/core/file/services/file.service.ts",
    "ng://@covalent/core/file/file.module.ts",
    "ng://@covalent/core/json-formatter/json-formatter.component.ts",
    "ng://@covalent/core/json-formatter/json-formatter.module.ts",
    "ng://@covalent/core/layout/layout.component.ts",
    "ng://@covalent/core/layout/layout-toggle.class.ts",
    "ng://@covalent/core/layout/layout.directives.ts",
    "ng://@covalent/core/layout/layout-nav/layout-nav.component.ts",
    "ng://@covalent/core/layout/layout-nav-list/layout-nav-list.component.ts",
    "ng://@covalent/core/layout/layout-nav-list/layout-nav-list.directives.ts",
    "ng://@covalent/core/layout/layout-card-over/layout-card-over.component.ts",
    "ng://@covalent/core/layout/layout-manage-list/layout-manage-list.component.ts",
    "ng://@covalent/core/layout/layout-manage-list/layout-manage-list.directives.ts",
    "ng://@covalent/core/layout/navigation-drawer/navigation-drawer.component.ts",
    "ng://@covalent/core/layout/layout-footer/layout-footer.component.ts",
    "ng://@covalent/core/layout/layout.module.ts",
    "ng://@covalent/core/loading/loading.component.ts",
    "ng://@covalent/core/loading/services/loading.factory.ts",
    "ng://@covalent/core/loading/services/loading.service.ts",
    "ng://@covalent/core/loading/directives/loading.directive.ts",
    "ng://@covalent/core/loading/loading.module.ts",
    "ng://@covalent/core/media/services/media.service.ts",
    "ng://@covalent/core/media/directives/media-toggle.directive.ts",
    "ng://@covalent/core/common/animations/collapse/collapse.animation.ts",
    "ng://@covalent/core/common/animations/fade/fadeInOut.animation.ts",
    "ng://@covalent/core/common/animations/bounce/bounce.animation.ts",
    "ng://@covalent/core/common/animations/flash/flash.animation.ts",
    "ng://@covalent/core/common/animations/headshake/headshake.animation.ts",
    "ng://@covalent/core/common/animations/jello/jello.animation.ts",
    "ng://@covalent/core/common/animations/pulse/pulse.animation.ts",
    "ng://@covalent/core/common/behaviors/control-value-accesor.mixin.ts",
    "ng://@covalent/core/common/behaviors/disabled.mixin.ts",
    "ng://@covalent/core/common/behaviors/disable-ripple.mixin.ts",
    "ng://@covalent/core/common/forms/validators/validators.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, EventEmitter, OnInit, Optional, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Dir } from '@angular/cdk/bidi';\n\nexport interface IPageChangeEvent {\n  page: number;\n  maxPage: number;\n  pageSize: number;\n  total: number;\n  fromRow: number;\n  toRow: number;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'td-paging-bar',\n  template: `<div class=\"td-paging-bar\" (change)=\"$event.stopPropagation()\" >\n  <ng-content></ng-content>\n  <div class=\"td-paging-bar-navigation\">\n    <button mat-icon-button class=\"td-paging-bar-first-page\" type=\"button\" *ngIf=\"firstLast\" [disabled]=\"isMinPage()\" (click)=\"firstPage()\">\n      <mat-icon>{{ isRTL ? 'skip_next' : 'skip_previous' }}</mat-icon>\n    </button>\n    <button mat-icon-button class=\"td-paging-bar-prev-page\" type=\"button\" [disabled]=\"isMinPage()\" (click)=\"prevPage()\">\n      <mat-icon>{{ isRTL ? 'navigate_next' : 'navigate_before' }}</mat-icon>\n    </button>\n    <ng-template *ngIf=\"pageLinkCount > 0\" let-link let-index=\"index\" ngFor [ngForOf]=\"pageLinks\">\n      <button class=\"td-paging-bar-link-page\" mat-icon-button type=\"button\" [color]=\"page === link ? 'accent' : ''\" (click)=\"navigateToPage(link)\">{{link}}</button>\n    </ng-template>\n    <button mat-icon-button class=\"td-paging-bar-next-page\" type=\"button\" [disabled]=\"isMaxPage()\" (click)=\"nextPage()\">\n      <mat-icon>{{ isRTL ? 'navigate_before' : 'navigate_next' }}</mat-icon>\n    </button>\n    <button mat-icon-button class=\"td-paging-bar-last-page\" type=\"button\" *ngIf=\"firstLast\" [disabled]=\"isMaxPage()\" (click)=\"lastPage()\">\n      <mat-icon>{{ isRTL ? 'skip_previous' : 'skip_next' }}</mat-icon>\n    </button>\n  </div>\n</div>`,\n  styles: [`:host {\n  display: block; }\n  :host .td-paging-bar {\n    height: 48px;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end; }\n    :host .td-paging-bar ::ng-deep > * {\n      margin: 0 10px; }\n    :host .td-paging-bar [mat-icon-button] {\n      font-size: 12px;\n      font-weight: normal; }\n`],\n})\nexport class TdPagingBarComponent implements OnInit {\n\n  private _pageSize: number = 50;\n  private _total: number = 0;\n  private _page: number = 1;\n  private _fromRow: number = 1;\n  private _toRow: number = 1;\n  private _initialized: boolean = false;\n  private _pageLinks: number[] = [];\n  private _pageLinkCount: number = 0;\n  // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\n  private _hitEnd: boolean = false;\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\n  private _hitStart: boolean = false;\n\n  /**\n   * firstLast?: boolean\n   * Shows or hides the first and last page buttons of the paging bar. Defaults to 'false'\n   */\n  @Input('firstLast') firstLast: boolean = true;\n\n  /**\n   * initialPage?: number\n   * Sets starting page for the paging bar. Defaults to '1'\n   */\n  @Input('initialPage') initialPage: number = 1;\n\n  /**\n   * pageLinkCount?: number\n   * Amount of page navigation links for the paging bar. Defaults to '0'\n   */\n  @Input('pageLinkCount')\n  set pageLinkCount(pageLinkCount: number) {\n    this._pageLinkCount = coerceNumberProperty(pageLinkCount);\n    this._calculatePageLinks();\n    this._changeDetectorRef.markForCheck();\n  }\n  get pageLinkCount(): number {\n    return this._pageLinkCount;\n  }\n\n  /**\n   * pageSize?: number\n   * Selected page size for the pagination. Defaults 50.\n   */\n  @Input('pageSize')\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._page = 1;\n    if (this._initialized) {\n      this._handleOnChange();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  /**\n   * total: number\n   * Total rows for the pagination.\n   */\n  @Input('total')\n  set total(total: number) {\n    this._total = coerceNumberProperty(total);\n    this._calculateRows();\n    this._calculatePageLinks();\n    this._changeDetectorRef.markForCheck();\n  }\n  get total(): number {\n    return this._total;\n  }\n\n  /**\n   * pageLinks: number[]\n   * Returns the pageLinks in an array\n   */\n  get pageLinks(): number[] {\n    return this._pageLinks;\n  }\n\n  /**\n   * range: string\n   * Returns the range of the rows.\n   */\n  get range(): string {\n    return `${!this._toRow ? 0 : this._fromRow}-${this._toRow}`;\n  }\n\n  /**\n   * page: number\n   * Returns the current page.\n   */\n  get page(): number {\n    return this._page;\n  }\n\n  /**\n   * page: number\n   * Returns the max page for the current pageSize and total.\n   */\n  get maxPage(): number {\n    return Math.ceil(this._total / this._pageSize);\n  }\n\n  /**\n   * change?: function\n   * Method to be executed when page size changes or any button is clicked in the paging bar.\n   * Emits an [IPageChangeEvent] implemented object.\n   */\n  @Output('change') onChange: EventEmitter<IPageChangeEvent> = new EventEmitter<IPageChangeEvent>();\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(@Optional() private _dir: Dir,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this._page = coerceNumberProperty(this.initialPage);\n    this._calculateRows();\n    this._calculatePageLinks();\n    this._initialized = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * navigateToPage?: function\n   * Navigates to a specific valid page. Returns 'true' if page is valid, else 'false'.\n   */\n  navigateToPage(page: number): boolean {\n    if (page === 1 || (page >= 1 && page <= this.maxPage)) {\n      this._page = coerceNumberProperty(Math.floor(page));\n      this._handleOnChange();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * firstPage?: function\n   * Navigates to the first page. Returns 'true' if page is valid, else 'false'.\n   */\n  firstPage(): boolean {\n    return this.navigateToPage(1);\n  }\n\n  /**\n   * prevPage?: function\n   * Navigates to the previous page. Returns 'true' if page is valid, else 'false'.\n   */\n  prevPage(): boolean {\n    return this.navigateToPage(this._page - 1);\n  }\n\n  /**\n   * nextPage?: function\n   * Navigates to the next page. Returns 'true' if page is valid, else 'false'.\n   */\n  nextPage(): boolean {\n    return this.navigateToPage(this._page + 1);\n  }\n\n  /**\n   * lastPage?: function\n   * Navigates to the last page. Returns 'true' if page is valid, else 'false'.\n   */\n  lastPage(): boolean {\n    return this.navigateToPage(this.maxPage);\n  }\n\n  isMinPage(): boolean {\n    return this._page <= 1;\n  }\n\n  isMaxPage(): boolean {\n    return this._page >= this.maxPage;\n  }\n\n  private _calculateRows(): void {\n    let top: number = (this._pageSize * this._page);\n    this._fromRow = (this._pageSize * (this._page - 1)) + 1;\n    this._toRow = this._total > top ? top : this._total;\n  }\n\n  /**\n   * _calculatePageLinks?: function\n   * Calculates the page links that should be shown to the user based on the current state of the paginator\n   */\n  private _calculatePageLinks(): void {\n    // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\n    if (this.isMaxPage()) {\n      this._hitEnd = true;\n      this._hitStart = false;\n    }\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\n    if (this.isMinPage()) {\n      this._hitEnd = false;\n      this._hitStart = true;\n    }\n    // If the pageLinkCount goes above max possible pages based on perpage setting then reset it to maxPage\n    let actualPageLinkCount: number = this.pageLinkCount;\n    if (this.pageLinkCount > this.maxPage) {\n      actualPageLinkCount = this.maxPage;\n    }\n    // reset the pageLinks array\n    this._pageLinks = [];\n    // fill in the array with the pageLinks based on the current selected page\n    let middlePageLinks: number = Math.floor(actualPageLinkCount / 2);\n    for (let x: number = 0; x < actualPageLinkCount; x++) {\n      // don't go past the maxPage in the pageLinks\n      // have to handle even and odd pageLinkCounts differently so can still lead to the next numbers\n      if ((actualPageLinkCount % 2 === 0 && (this.page + middlePageLinks > this.maxPage)) ||\n          (actualPageLinkCount % 2 !== 0 && (this.page + middlePageLinks >= this.maxPage))) {\n        this._pageLinks[x] = this.maxPage - (actualPageLinkCount - (x + 1));\n      // if the selected page is after the middle then set that page as middle and get the correct balance on left and right\n      // special handling when there are only 2 pageLinks to just drop to next if block so can lead to next numbers when moving to right\n      // when moving to the left then go into this block\n      } else if ((actualPageLinkCount > 2 || actualPageLinkCount <= 2 && this._hitEnd) && (this.page - middlePageLinks) > 0) {\n        this._pageLinks[x] = (this.page - middlePageLinks) + x;\n      // if the selected page is before the middle then set the pages based on the x index leading up to and after selected page\n      } else if ((this.page - middlePageLinks) <= 0) {\n        this._pageLinks[x] = x + 1;\n      // other wise just set the array in order starting from the selected page\n      } else {\n        this._pageLinks[x] = this.page + x;\n      }\n    }\n  }\n\n  private _handleOnChange(): void {\n    this._calculateRows();\n    this._calculatePageLinks();\n    let event: IPageChangeEvent = {\n      page: this._page,\n      maxPage: this.maxPage,\n      pageSize: this._pageSize,\n      total: this._total,\n      fromRow: this._fromRow,\n      toRow: this._toRow,\n    };\n    this._changeDetectorRef.markForCheck();\n    this.onChange.emit(event);\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TdPagingBarComponent } from './paging-bar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n  ],\n  declarations: [\n    TdPagingBarComponent,\n  ],\n  exports: [\n    TdPagingBarComponent,\n  ],\n})\nexport class CovalentPagingModule {\n\n}\n",
    "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdVirtualScrollRow]'})\nexport class TdVirtualScrollRowDirective extends TemplatePortalDirective {\n\n  constructor(templateRef: TemplateRef<any>,\n              viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n  \n}\n",
    "import { Component, Directive, Input, EventEmitter, ContentChild, AfterViewInit, ViewChild,\n         ChangeDetectionStrategy, ChangeDetectorRef, QueryList, ViewChildren, ElementRef, HostListener,\n         Renderer2, AfterViewChecked, OnDestroy, TrackByFunction } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\n\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n@Component({\n  selector: 'td-virtual-scroll-container',\n  styles: [`:host {\n  display: block;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  position: relative; }\n`],\n  template: `<div [style.height.px]=\"totalHeight\"></div>\n<div [style.transform]=\"offsetTransform\"\n      [style.position]=\"'absolute'\"\n      [style.width.%]=\"100\">\n  <ng-template let-row\n                let-index=\"index\"\n                ngFor\n                [ngForOf]=\"virtualData\"\n                [ngForTrackBy]=\"trackBy\">\n    <div #rowElement\n         [style.width.%]=\"100\">\n      <ng-template *ngIf=\"_rowTemplate\"\n                  [ngTemplateOutlet]=\"_rowTemplate.templateRef\"\n                  [ngTemplateOutletContext]=\"{row: row,\n                                      index: (fromRow + index),\n                                      first: (fromRow + index) === 0,\n                                      last: (fromRow + index) === (data.length - 1),\n                                      odd: ((fromRow + index + 1) % 2) === 1,\n                                      even: ((fromRow + index + 1) % 2) === 0}\">\n      </ng-template>\n    </div>\n  </ng-template>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdVirtualScrollContainerComponent implements AfterViewInit, AfterViewChecked, OnDestroy {\n\n  private _rowChangeSubs: Subscription;\n  private _initialized: boolean = false;\n\n  private _totalHeight: number = 0;\n  private _hostHeight: number = 0;\n  private _scrollVerticalOffset: number = 0;\n  private _offsetTransform: SafeStyle;\n\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  private _data: any[];\n  private _virtualData: any[];\n\n  /**\n   * data: any[]\n   * List of items to virtually iterate on.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    if (this._initialized) {\n      this._calculateVirtualRows();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  @ViewChildren('rowElement') _rows: QueryList<ElementRef>;\n\n  @ContentChild(TdVirtualScrollRowDirective) _rowTemplate: TdVirtualScrollRowDirective;\n\n  get rowHeight(): number {\n    if (this._rows && this._rows.toArray()[0]) {\n      return this._rows.toArray()[0].nativeElement.getBoundingClientRect().height;\n    }\n    return 0;\n  }\n\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this._rowChangeSubs = this._rows.changes.subscribe(() => {\n      this._calculateVirtualRows();\n    });\n    this._initialized = true;\n    this._calculateVirtualRows();\n  }\n\n  ngAfterViewChecked(): void {\n    let newHostHeight: number = this._elementRef.nativeElement.getBoundingClientRect().height;\n    if (this._hostHeight !== newHostHeight) {\n      this._hostHeight = newHostHeight;\n      if (this._initialized) {\n        this._calculateVirtualRows();\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._rowChangeSubs) {\n      this._rowChangeSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * trackBy?: TrackByFunction\n   * This accepts the same trackBy function [ngFor] does.\n   * https://angular.io/api/core/TrackByFunction\n   */\n  @Input('trackBy') trackBy: TrackByFunction<any> =  (index: number, item: any) => {\n    return item;\n  }\n\n  @HostListener('scroll', ['$event'])\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._scrollVerticalOffset = verticalScroll;\n        if (this._initialized) {\n          this._calculateVirtualRows();\n        }\n      }\n    }\n  }\n\n  /**\n   * Method to refresh and recalculate the virtual rows\n   * e.g. after changing the [data] content\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Method to scroll to a specific row of the list.\n   */\n  scrollTo(row: number): void {\n    this._elementRef.nativeElement.scrollTop = row * this.rowHeight;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the start of the list.\n   */\n  scrollToStart(): void {\n    this.scrollTo(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the end of the list.\n   */\n  scrollToEnd(): void {\n    this.scrollTo(this.totalHeight / this.rowHeight);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _calculateVirtualRows(): void {\n    if (this._data) {\n      this._totalHeight = this._data.length * this.rowHeight;\n      let fromRow: number = Math.floor((this._scrollVerticalOffset / this.rowHeight)) - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n      let range: number = Math.floor((this._hostHeight / this.rowHeight)) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    if (this._scrollVerticalOffset > (TD_VIRTUAL_OFFSET * this.rowHeight)) {\n      offset = this.fromRow * this.rowHeight;\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n",
    "import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\nimport { TdVirtualScrollContainerComponent } from './virtual-scroll-container.component';\n\nconst TD_VIRTUAL_SCROLL: Type<any>[] = [\n  TdVirtualScrollRowDirective,\n  TdVirtualScrollContainerComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_VIRTUAL_SCROLL,\n  ],\n  exports: [\n    TD_VIRTUAL_SCROLL,\n  ],\n})\nexport class CovalentVirtualScrollModule {\n\n}\n",
    "import { Component, Input, HostBinding, ChangeDetectionStrategy,\n         ViewChild, ElementRef, AfterContentInit } from '@angular/core';\n\nexport enum TdNotificationCountPositionY {\n  Top = <any>'top',\n  Bottom = <any>'bottom',\n  Center = <any>'center',\n}\n\nexport enum TdNotificationCountPositionX {\n  Before = <any>'before',\n  After = <any>'after',\n  Center = <any>'center',\n}\n\n@Component({\n  selector: 'td-notification-count',\n  styles: [`:host {\n  position: relative;\n  display: block;\n  text-align: center;\n  min-width: 40px;\n  height: 40px; }\n  :host.td-notification-hidden {\n    min-width: 0; }\n\n.td-notification-count {\n  line-height: 21px;\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  font-size: 10px;\n  font-weight: 600;\n  border-radius: 50%;\n  z-index: 1; }\n  .td-notification-count.td-notification-center-x {\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0; }\n  .td-notification-count.td-notification-center-y {\n    margin-top: auto;\n    margin-bottom: auto;\n    top: 0;\n    bottom: 0; }\n  .td-notification-count.td-notification-top {\n    top: 0; }\n  .td-notification-count.td-notification-bottom {\n    bottom: 0; }\n  .td-notification-count.td-notification-before {\n    left: 0; }\n  .td-notification-count.td-notification-after {\n    right: 0; }\n  .td-notification-count.td-notification-no-count {\n    width: 8px;\n    height: 8px; }\n    .td-notification-count.td-notification-no-count.td-notification-top {\n      top: 8px; }\n    .td-notification-count.td-notification-no-count.td-notification-bottom {\n      bottom: 8px; }\n    .td-notification-count.td-notification-no-count.td-notification-before {\n      left: 8px; }\n    .td-notification-count.td-notification-no-count.td-notification-after {\n      right: 8px; }\n  ::ng-deep [dir='rtl'] .td-notification-count.td-notification-before {\n    right: 0;\n    left: auto; }\n  ::ng-deep [dir='rtl'] .td-notification-count.td-notification-after {\n    left: 0;\n    right: auto; }\n  ::ng-deep [dir='rtl'] .td-notification-count.td-notification-no-count.td-notification-before {\n    right: 8px;\n    left: auto; }\n  ::ng-deep [dir='rtl'] .td-notification-count.td-notification-no-count.td-notification-after {\n    left: 8px;\n    right: auto; }\n\n.td-notification-content, .td-notification-content ::ng-deep > * {\n  line-height: 40px; }\n`],\n  template: `<div #content class=\"td-notification-content\">\n  <ng-content></ng-content>\n</div>\n<div *ngIf=\"show\"\n     class=\"td-notification-count mat-{{color}}\"\n     [class.td-notification-top]=\"positionY === 'top'\"\n     [class.td-notification-bottom]=\"positionY === 'bottom'\"\n     [class.td-notification-before]=\"positionX === 'before'\"\n     [class.td-notification-after]=\"positionX === 'after'\"\n     [class.td-notification-center-y]=\"positionY === 'center'\"\n     [class.td-notification-center-x]=\"positionX === 'center'\"\n     [class.td-notification-no-count]=\"noCount\">\n  {{noCount ? '' : notificationsDisplay}}\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNotificationCountComponent implements AfterContentInit {\n\n  private _notifications: number | boolean = 0;\n  private _positionY: TdNotificationCountPositionY;\n  private _positionX: TdNotificationCountPositionX;\n\n  /**\n   * Div content wrapper of `ng-content`.\n   */\n  @ViewChild('content') content: ElementRef;\n\n  /**\n   * color?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the notification tip. Defaults to \"warn\"\n   */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'warn';\n\n  /**\n   * positionX?: TdNotificationCountPositionX or \"before\" | \"after\" | \"center\"\n   * Sets the X position of the notification tip.\n   * Defaults to \"after\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionX(positionX: TdNotificationCountPositionX) {\n    this._positionX = positionX;\n  }\n  get positionX(): TdNotificationCountPositionX {\n    return this._positionX;\n  }\n\n  /**\n   * positionY?: TdNotificationCountPositionY or \"top\" | \"bottom\" | \"center\"\n   * Sets the Y position of the notification tip.\n   * Defaults to \"top\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionY(positionY: TdNotificationCountPositionY) {\n    this._positionY = positionY;\n  }\n  get positionY(): TdNotificationCountPositionY {\n    return this._positionY;\n  }\n\n  /**\n   * notifications?: number | boolean\n   * Number for the notification count. Shows component only if the input is a positive number or 'true'\n   */\n  @Input()\n  set notifications(notifications: number | boolean) {\n    this._notifications = notifications;\n  }\n\n  @HostBinding('class.td-notification-hidden')\n  get hideHost(): boolean {\n    return !this.show && !this._hasContent();\n  }\n\n  /**\n   * Sets the component in its 'noCount' state if [notifications] is a boolean 'true'.\n   * Makes the notification tip show without a count.\n   */\n  get noCount(): string | boolean {\n    return this._notifications === true;\n  }\n\n  /**\n   * Notification display string when a count is available.\n   * Anything over 99 gets set as 99+\n   */\n  get notificationsDisplay(): string {\n    if (this._notifications > 99) {\n      return '99+';\n    }\n    return this._notifications.toString();\n  }\n\n  /**\n   * Shows notification tip only when [notifications] is true or a positive integer.\n   */\n  get show(): boolean {\n    return this._notifications === true || (!isNaN(<any>this._notifications) && this._notifications > 0);\n  }\n\n  /**\n   * Check if [positionX] and [positionY] have been set as inputs, else use defaults depending on component content.\n   */\n  ngAfterContentInit(): void {\n    if (!this._positionX) {\n      this.positionX = this._hasContent() ? TdNotificationCountPositionX.After : TdNotificationCountPositionX.Center;\n    }\n    if (!this._positionY) {\n      this.positionY = this._hasContent() ? TdNotificationCountPositionY.Top : TdNotificationCountPositionY.Center;\n    }\n  }\n\n  /**\n   * Method to check if element has any kind of content (elements or text)\n   */\n  private _hasContent(): boolean {\n    if (this.content) {\n      let contentElement: HTMLElement = this.content.nativeElement;\n      return contentElement && (contentElement.children.length > 0 || !!contentElement.textContent.trim());\n    }\n    return false;\n  }\n\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdNotificationCountComponent } from './notification-count.component';\n\nconst TD_NOTIFICATIONS: Type<any>[] = [\n  TdNotificationCountComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_NOTIFICATIONS,\n  ],\n  exports: [\n    TD_NOTIFICATIONS,\n  ],\n})\nexport class CovalentNotificationsModule {\n\n}\n",
    "import { Directive, ElementRef, Input, HostBinding, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { animate, AnimationBuilder, AnimationPlayer, AUTO_STYLE, style, animation } from '@angular/animations';\n\n@Directive({\n  selector: '[tdToggle]',\n})\nexport class TdToggleDirective {\n\n  private _state: boolean;\n  private _defaultOverflow: string;\n  private _defaultDisplay: string;\n  private _animationShowPlayer: AnimationPlayer;\n  private _animationHidePlayer: AnimationPlayer;\n\n  /**\n   * duration?: number\n   * Sets duration of toggle animation in milliseconds.\n   * Defaults to 150 ms.\n   */\n  @Input() duration: number = 150;\n\n  /**\n   * tdToggle: boolean\n   * Toggles element, hides if its 'true', shows if its 'false'.\n   */\n  @Input('tdToggle')\n  set state(state: boolean) {\n    this._state = state;\n    if (state) {\n      if (this._animationShowPlayer) {\n        this._animationShowPlayer.destroy();\n        this._animationShowPlayer = undefined;\n      }\n      this.hide();\n    } else {\n      if (this._animationHidePlayer) {\n        this._animationHidePlayer.destroy();\n        this._animationHidePlayer = undefined;\n      }\n      this.show();\n    }\n  }\n\n  /**\n   * Binds native 'aria-expanded' attribute.\n   */\n  @HostBinding('attr.aria-expanded')\n  get ariaExpandedBinding(): boolean {\n    return !this._state;\n  }\n\n  /**\n   * Binds native 'aria-hidden' attribute.\n   */\n  @HostBinding('attr.aria-hidden')\n  get ariaHiddenBinding(): boolean {\n    return this._state;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _element: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _animationBuilder: AnimationBuilder) {\n    this._defaultDisplay = this._element.nativeElement.style.display;\n    this._defaultOverflow = this._element.nativeElement.style.overflow;\n  }\n\n  /**\n   * Hides element: sets \"display:[default]\" so animation is shown,\n   * starts animation and adds \"display:'none'\" style at the end.\n   */\n  hide(): void {\n    this._animationHidePlayer = this._animationBuilder.build(animation([\n      style({\n        height: AUTO_STYLE,\n        display: AUTO_STYLE,\n      }),\n      animate(this.duration + 'ms ease-in', style({height: '0'})),\n    ])).create(this._element.nativeElement);\n    this._renderer.setStyle(this._element.nativeElement, 'overflow', 'hidden');\n    this._changeDetectorRef.markForCheck();\n    this._animationHidePlayer.onDone(() => {\n      this._onHideDone();\n    });\n    this._animationHidePlayer.play();\n  }\n\n  /**\n   * Shows element: sets \"display:[default]\" so animation is shown,\n   * starts animation and adds \"overflow:[default]\" style again at the end.\n   */\n  show(): void {\n    this._renderer.setStyle(this._element.nativeElement, 'display', this._defaultDisplay);\n    this._changeDetectorRef.markForCheck();\n    this._animationShowPlayer = this._animationBuilder.build(animation([\n      style({\n        height: '0',\n        display: 'none',\n      }),\n      animate(this.duration + 'ms ease-out', style({height: AUTO_STYLE})),\n    ])).create(this._element.nativeElement);\n    this._renderer.setStyle(this._element.nativeElement, 'overflow', 'hidden');\n    this._animationShowPlayer.onDone(() => {\n      this._onShowDone();\n    });\n    this._animationShowPlayer.play();\n  }\n\n  private _onHideDone(): void {\n    if (this._animationHidePlayer) {\n      this._animationHidePlayer.destroy();\n      this._animationHidePlayer = undefined;\n      this._renderer.setStyle(this._element.nativeElement, 'overflow', this._defaultOverflow);\n      this._renderer.setStyle(this._element.nativeElement, 'display', 'none');\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  private _onShowDone(): void {\n    if (this._animationShowPlayer) {\n      this._animationShowPlayer.destroy();\n      this._animationShowPlayer = undefined;\n      this._renderer.setStyle(this._element.nativeElement, 'overflow', this._defaultOverflow);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n",
    "import { Directive, ElementRef, Input, Output, EventEmitter, HostBinding, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { animate, AnimationBuilder, AnimationPlayer, AUTO_STYLE, style, animation } from '@angular/animations';\n\n@Directive({\n  selector: '[tdFade]',\n})\nexport class TdFadeDirective {\n\n  private _state: boolean;\n  private _defaultDisplay: string;\n  private _animationFadeInPlayer: AnimationPlayer;\n  private _animationFadeOutPlayer: AnimationPlayer;\n\n  /**\n   * duration?: number\n   * Sets duration of fade animation in milliseconds.\n   * Defaults to 150 ms.\n   */\n  @Input() duration: number = 150;\n\n  /**\n   * tdFade: boolean\n   * Fades element, FadesOut if its 'true', FadesIn if its 'false'.\n   */\n  @Input('tdFade')\n  set state(state: boolean) {\n    this._state = state;\n    if (state) {\n      if (this._animationFadeOutPlayer) {\n        this._animationFadeOutPlayer.destroy();\n        this._animationFadeOutPlayer = undefined;\n      }\n      this.hide();\n    } else {\n      if (this._animationFadeInPlayer) {\n        this._animationFadeInPlayer.destroy();\n        this._animationFadeInPlayer = undefined;\n      }\n      this.show();\n    }\n  }\n\n  /**\n   * fadeIn?: function\n   * Method to be executed when fadeIn animation ends.\n   */\n  @Output('fadeIn') onFadeIn: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * fadeOut?: function\n   * Method to be executed when fadeOut animation ends.\n   */\n  @Output('fadeOut') onFadeOut: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Binds native 'aria-expanded' attribute.\n   */\n  @HostBinding('attr.aria-expanded')\n  get ariaExpandedBinding(): boolean {\n    return !this._state;\n  }\n\n  /**\n   * Binds native 'aria-hidden' attribute.\n   */\n  @HostBinding('attr.aria-hidden')\n  get ariaHiddenBinding(): boolean {\n    return this._state;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _element: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _animationBuilder: AnimationBuilder) {\n    this._defaultDisplay = this._element.nativeElement.style.display;\n  }\n\n  /**\n   * Hides element: starts animation and adds \"display:'none'\" style at the end.\n   */\n  hide(): void {\n    this._animationFadeInPlayer = this._animationBuilder.build(animation([\n      style({\n        opacity: AUTO_STYLE,\n        display: AUTO_STYLE,\n      }),\n      animate(this.duration + 'ms ease-out', style({opacity: '0'})),\n    ])).create(this._element.nativeElement);\n    this._animationFadeInPlayer.onDone(() => {\n      this._onFadeInDone();\n    });\n    this._animationFadeInPlayer.play();\n  }\n\n  /**\n   * Shows element: sets \"display:[default]\" so animation is shown.\n   */\n  show(): void {\n    this._renderer.setStyle(this._element.nativeElement, 'display', this._defaultDisplay);\n    this._changeDetectorRef.markForCheck();\n    this._animationFadeOutPlayer = this._animationBuilder.build(animation([\n      style({\n        opacity: '0',\n        display: 'none',\n      }),\n      animate(this.duration + 'ms ease-in', style({opacity: AUTO_STYLE})),\n    ])).create(this._element.nativeElement);\n    this._animationFadeOutPlayer.onDone(() => {\n      this._onFadeOutDone();\n    });\n    this._animationFadeOutPlayer.play();\n  }\n\n  private _onFadeInDone(): void {\n    if (this._animationFadeInPlayer) {\n      this._animationFadeInPlayer.destroy();\n      this._animationFadeInPlayer = undefined;\n      this._renderer.setStyle(this._element.nativeElement, 'display', 'none');\n      this._changeDetectorRef.markForCheck();\n      this.onFadeIn.emit();\n    }\n  }\n\n  private _onFadeOutDone(): void {\n    if (this._animationFadeOutPlayer) {\n      this._animationFadeOutPlayer.destroy();\n      this._animationFadeOutPlayer = undefined;\n      this._changeDetectorRef.markForCheck();\n      this.onFadeOut.emit();\n    }\n  }\n}\n",
    "import { Directive } from '@angular/core';\nimport { HostListener, Host, Optional } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: '[tdAutoTrim]',\n})\nexport class TdAutoTrimDirective {\n\n  constructor(@Optional() @Host() private _model: NgModel) {}\n\n  /**\n   * Listens to host's (blur) event and trims value.\n   */\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event): void {\n    if (this._model && this._model.value && typeof(this._model.value) === 'string') {\n      this._model.update.emit(this._model.value.trim());\n    }\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeAgo',\n})\nexport class TdTimeAgoPipe implements PipeTransform {\n  transform(time: any, reference: any): string {\n    // Convert time to date object if not already\n    time = new Date(time);\n    let ref: Date = new Date(reference);\n\n    // If not a valid timestamp, return 'Invalid Date'\n    if (!time.getTime()) {\n      return 'Invalid Date';\n    }\n\n    // For unit testing, we need to be able to declare a static start time\n    // for calculations, or else speed of tests can bork.\n    let startTime: number = isNaN(ref.getTime()) ? Date.now() : ref.getTime();\n    let diff: number = Math.floor((startTime - time.getTime()) / 1000);\n\n    if (diff < 2) {\n      return '1 second ago';\n    }\n    if (diff < 60) {\n      return Math.floor(diff) + ' seconds ago';\n    }\n    // Minutes\n    diff = diff / 60;\n    if (diff < 2) {\n      return '1 minute ago';\n    }\n    if (diff < 60) {\n      return Math.floor(diff) + ' minutes ago';\n    }\n    // Hours\n    diff = diff / 60;\n    if (diff < 2) {\n      return '1 hour ago';\n    }\n    if (diff < 24) {\n      return Math.floor(diff) + ' hours ago';\n    }\n    // Days\n    diff = diff / 24;\n    if (diff < 2) {\n      return '1 day ago';\n    }\n    if (diff < 30) {\n      return Math.floor(diff) + ' days ago';\n    }\n    // Months\n    diff = diff / 30;\n    if (diff < 2) {\n      return '1 month ago';\n    }\n    if (diff < 12) {\n      return Math.floor(diff) + ' months ago';\n    }\n    // Years\n    diff = diff / 12;\n    if (diff < 2) {\n      return '1 year ago';\n    } else {\n      return Math.floor(diff) + ' years ago';\n    }\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeDifference',\n})\n\nexport class TdTimeDifferencePipe implements PipeTransform {\n  transform(start: any, end: any): string {\n    let startTime: Date = new Date(start);\n    let endTime: Date;\n\n    if (end !== undefined) {\n      endTime = new Date(end);\n    } else {\n      endTime = new Date();\n    }\n\n    if (!startTime.getTime() || !endTime.getTime()) {\n      return 'Invalid Date';\n    }\n\n    let diff: number = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n\n    let days: number = Math.floor(diff / (60 * 60 * 24));\n    diff = diff - (days * (60 * 60 * 24));\n\n    let hours: number = Math.floor(diff / (60 * 60));\n    diff = diff - (hours * (60 * 60));\n\n    let minutes: number = Math.floor(diff / (60));\n    diff -= minutes * (60);\n\n    let seconds: number = diff;\n\n    let pad: string = '00';\n\n    let daysFormatted: string = '';\n\n    if (days > 0 && days < 2) {\n      daysFormatted = ' day - ';\n    } else if (days > 1) {\n      daysFormatted = ' days - ' ;\n    }\n\n    return (days > 0 ? days + daysFormatted : daysFormatted) +\n     pad.substring(0, pad.length - (hours + '').length) + hours + ':' +\n     pad.substring(0, pad.length - (minutes + '').length) + minutes + ':' +\n     pad.substring(0, pad.length - (seconds + '').length) + seconds;\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'bytes',\n})\n\nexport class TdBytesPipe implements PipeTransform {\n  /* `bytes` needs to be `any` or TypeScript complains\n  Tried both `number` and `number | string` */\n  transform(bytes: any, precision: number = 2): string {\n    if (bytes === 0) {\n      return '0 B';\n    } else if (isNaN(parseInt(bytes, 10))) {\n      /* If not a valid number, return 'Invalid Number' */\n      return 'Invalid Number';\n    }\n    let k: number = 1024;\n    let sizes: string[] = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i: number = Math.floor(Math.log(bytes) / Math.log(k));\n    // if less than 1\n    if (i < 0) {\n      return 'Invalid Number';\n    }\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(precision)) + ' ' + sizes[i];\n  }\n}\n",
    "import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\n\n@Pipe({\n  name: 'digits',\n})\n\nexport class TdDigitsPipe implements PipeTransform {\n\n  private _decimalPipe: DecimalPipe;\n\n  constructor(@Inject(LOCALE_ID) private _locale: string = 'en') {\n    this._decimalPipe = new DecimalPipe(this._locale);\n  }\n\n  /* `digits` needs to be type `digits: any` or TypeScript complains */\n  transform(digits: any, precision: number = 1): string {\n    if (digits === 0) {\n      return '0';\n    } else if (isNaN(parseInt(digits, 10))) {\n      /* If not a valid number, return the value */\n      return digits;\n    } else if (digits < 1) {\n      return this._decimalPipe.transform(digits.toFixed(precision));\n    }\n    let k: number = 1000;\n    let sizes: string[] = ['', 'K', 'M', 'B', 'T', 'Q'];\n    let i: number = Math.floor(Math.log(digits) / Math.log(k));\n    let size: string = sizes[i];\n    return this._decimalPipe.transform(parseFloat((digits / Math.pow(k, i)).toFixed(precision))) + (size ? ' ' + size : '');\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncate',\n})\n\nexport class TdTruncatePipe implements PipeTransform {\n  transform(text: any, length: number): string {\n    if (typeof text !== 'string') {\n      return '';\n    }\n\n    // Truncate\n    let truncated: string = text.substr(0, length);\n\n    if (text.length > length) {\n      if (truncated.lastIndexOf(' ') > 0) {\n        truncated = truncated.trim();\n      }\n\n      truncated += '…';\n    }\n\n    return truncated;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Router, RoutesRecognized } from '@angular/router';\n\nimport { filter } from 'rxjs/operators/filter';\nimport { pairwise } from 'rxjs/operators/pairwise';\n\n@Injectable()\nexport class RouterPathService {\nprivate static _previousRoute: string = '/';\n  constructor(private _router: Router) {\n    this._router.events.pipe(\n      filter((e: any) => e instanceof RoutesRecognized),\n      pairwise(),\n    ).subscribe((e: any[]) => {\n      RouterPathService._previousRoute = e[0].urlAfterRedirects;\n    });\n  }\n\n  /*\n  * Utility function to get the route the user previously went to\n  * good for use in a \"back button\"\n  */\n  getPreviousRoute(): string {\n    return RouterPathService._previousRoute;\n  }\n}\n",
    "/*\n * Copyright (C) 2016-2017 by Teradata Corporation. All rights reserved.\n * TERADATA CORPORATION CONFIDENTIAL AND TRADE SECRET\n */\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IconService {\n\n  private _icons: string[] = [\n    'access_alarm',\n    'access_alarms',\n    'access_time',\n    'accessibility',\n    'account_balance',\n    'account_balance_wallet',\n    'account_box',\n    'account_circle',\n    'add',\n    'add_alarm',\n    'add_box',\n    'add_circle',\n    'add_circle_outline',\n    'add_shopping_cart',\n    'add_to_photos',\n    'adjust',\n    'alarm',\n    'alarm_add',\n    'alarm_off',\n    'alarm_on',\n    'album',\n    'android',\n    'announcement',\n    'apps',\n    'archive',\n    'arrow_back',\n    'arrow_drop_down',\n    'arrow_drop_down_circle',\n    'arrow_drop_up',\n    'arrow_forward',\n    'aspect_ratio',\n    'assessment',\n    'assignment',\n    'assignment_ind',\n    'assignment_late',\n    'assignment_return',\n    'assignment_returned',\n    'assignment_turned_in',\n    'assistant_photo',\n    'attach_file',\n    'attach_money',\n    'attachment',\n    'audiotrack',\n    'autorenew',\n    'av_timer',\n    'backspace',\n    'backup',\n    'battery_alert',\n    'battery_charging_full',\n    'battery_full',\n    'battery_std',\n    'battery_unknown',\n    'beenhere',\n    'block',\n    'bluetooth',\n    'bluetooth_audio',\n    'bluetooth_connected',\n    'bluetooth_disabled',\n    'bluetooth_searching',\n    'blur_circular',\n    'blur_linear',\n    'blur_off',\n    'blur_on',\n    'book',\n    'bookmark',\n    'bookmark_border',\n    'border_all',\n    'border_bottom',\n    'border_clear',\n    'border_color',\n    'border_horizontal',\n    'border_inner',\n    'border_left',\n    'border_outer',\n    'border_right',\n    'border_style',\n    'border_top',\n    'border_vertical',\n    'brightness_1',\n    'brightness_2',\n    'brightness_3',\n    'brightness_4',\n    'brightness_5',\n    'brightness_6',\n    'brightness_7',\n    'brightness_auto',\n    'brightness_high',\n    'brightness_low',\n    'brightness_medium',\n    'broken_image',\n    'brush',\n    'bug_report',\n    'build',\n    'business',\n    'cached',\n    'cake',\n    'call',\n    'call_end',\n    'call_made',\n    'call_merge',\n    'call_missed',\n    'call_received',\n    'call_split',\n    'camera',\n    'camera_alt',\n    'camera_front',\n    'camera_rear',\n    'camera_roll',\n    'cancel',\n    'cast',\n    'cast_connected',\n    'center_focus_strong',\n    'center_focus_weak',\n    'chat',\n    'check',\n    'check_box',\n    'check_box_outline_blank',\n    'check_circle',\n    'chevron_left',\n    'chevron_right',\n    'class',\n    'clear',\n    'clear_all',\n    'close',\n    'closed_caption',\n    'cloud',\n    'cloud_circle',\n    'cloud_done',\n    'cloud_download',\n    'cloud_off',\n    'cloud_queue',\n    'cloud_upload',\n    'collections',\n    'collections_bookmark',\n    'color_lens',\n    'colorize',\n    'comment',\n    'compare',\n    'computer',\n    'confirmation_number',\n    'contact_phone',\n    'contacts',\n    'content_copy',\n    'content_cut',\n    'content_paste',\n    'control_point',\n    'control_point_duplicate',\n    'create',\n    'credit_card',\n    'crop',\n    'crop_16_9',\n    'crop_3_2',\n    'crop_5_4',\n    'crop_7_5',\n    'crop_din',\n    'crop_free',\n    'crop_landscape',\n    'crop_original',\n    'crop_portrait',\n    'crop_square',\n    'dashboard',\n    'data_usage',\n    'dehaze',\n    'delete',\n    'description',\n    'desktop_mac',\n    'desktop_windows',\n    'details',\n    'developer_board',\n    'developer_mode',\n    'device_hub',\n    'devices',\n    'dialer_sip',\n    'dialpad',\n    'directions',\n    'directions_bike',\n    'directions_boat',\n    'directions_bus',\n    'directions_car',\n    'directions_railway',\n    'directions_run',\n    'directions_subway',\n    'directions_transit',\n    'directions_walk',\n    'disc_full',\n    'dns',\n    'do_not_disturb',\n    'do_not_disturb_alt',\n    'dock',\n    'domain',\n    'done',\n    'done_all',\n    'drafts',\n    'drive_eta',\n    'dvr',\n    'edit',\n    'eject',\n    'email',\n    'equalizer',\n    'error',\n    'error_outline',\n    'event',\n    'event_available',\n    'event_busy',\n    'event_note',\n    'event_seat',\n    'exit_to_app',\n    'expand_less',\n    'expand_more',\n    'explicit',\n    'explore',\n    'exposure',\n    'exposure_neg_1',\n    'exposure_neg_2',\n    'exposure_plus_1',\n    'exposure_plus_2',\n    'exposure_zero',\n    'extension',\n    'face',\n    'fast_forward',\n    'fast_rewind',\n    'favorite',\n    'favorite_border',\n    'feedback',\n    'file_download',\n    'file_upload',\n    'filter',\n    'filter_1',\n    'filter_2',\n    'filter_3',\n    'filter_4',\n    'filter_5',\n    'filter_6',\n    'filter_7',\n    'filter_8',\n    'filter_9',\n    'filter_9_plus',\n    'filter_b_and_w',\n    'filter_center_focus',\n    'filter_drama',\n    'filter_frames',\n    'filter_hdr',\n    'filter_list',\n    'filter_none',\n    'filter_tilt_shift',\n    'filter_vintage',\n    'find_in_page',\n    'find_replace',\n    'flag',\n    'flare',\n    'flash_auto',\n    'flash_off',\n    'flash_on',\n    'flight',\n    'flight_land',\n    'flight_takeoff',\n    'flip',\n    'flip_to_back',\n    'flip_to_front',\n    'folder',\n    'folder_open',\n    'folder_shared',\n    'folder_special',\n    'font_download',\n    'format_align_center',\n    'format_align_justify',\n    'format_align_left',\n    'format_align_right',\n    'format_bold',\n    'format_clear',\n    'format_color_fill',\n    'format_color_reset',\n    'format_color_text',\n    'format_indent_decrease',\n    'format_indent_increase',\n    'format_italic',\n    'format_line_spacing',\n    'format_list_bulleted',\n    'format_list_numbered',\n    'format_paint',\n    'format_quote',\n    'format_size',\n    'format_strikethrough',\n    'format_textdirection_l_to_r',\n    'format_textdirection_r_to_l',\n    'format_underlined',\n    'forum',\n    'forward',\n    'forward_10',\n    'forward_30',\n    'forward_5',\n    'fullscreen',\n    'fullscreen_exit',\n    'functions',\n    'gamepad',\n    'games',\n    'gesture',\n    'get_app',\n    'gif',\n    'gps_fixed',\n    'gps_not_fixed',\n    'gps_off',\n    'grade',\n    'gradient',\n    'grain',\n    'graphic_eq',\n    'grid_off',\n    'grid_on',\n    'group',\n    'group_add',\n    'group_work',\n    'hd',\n    'hdr_off',\n    'hdr_on',\n    'hdr_strong',\n    'hdr_weak',\n    'headset',\n    'headset_mic',\n    'healing',\n    'hearing',\n    'help',\n    'help_outline',\n    'high_quality',\n    'highlight_off',\n    'history',\n    'home',\n    'hotel',\n    'hourglass_empty',\n    'hourglass_full',\n    'http',\n    'https',\n    'image',\n    'image_aspect_ratio',\n    'import_export',\n    'inbox',\n    'indeterminate_check_box',\n    'info',\n    'info_outline',\n    'input',\n    'insert_chart',\n    'insert_comment',\n    'insert_drive_file',\n    'insert_emoticon',\n    'insert_invitation',\n    'insert_link',\n    'insert_photo',\n    'invert_colors',\n    'invert_colors_off',\n    'iso',\n    'keyboard',\n    'keyboard_arrow_down',\n    'keyboard_arrow_left',\n    'keyboard_arrow_right',\n    'keyboard_arrow_up',\n    'keyboard_backspace',\n    'keyboard_capslock',\n    'keyboard_hide',\n    'keyboard_return',\n    'keyboard_tab',\n    'keyboard_voice',\n    'label',\n    'label_outline',\n    'landscape',\n    'language',\n    'laptop',\n    'laptop_chromebook',\n    'laptop_mac',\n    'laptop_windows',\n    'launch',\n    'layers',\n    'layers_clear',\n    'leak_add',\n    'leak_remove',\n    'lens',\n    'library_add',\n    'library_books',\n    'library_music',\n    'link',\n    'list',\n    'live_help',\n    'live_tv',\n    'local_activity',\n    'local_airport',\n    'local_atm',\n    'local_bar',\n    'local_cafe',\n    'local_car_wash',\n    'local_convenience_store',\n    'local_dining',\n    'local_drink',\n    'local_florist',\n    'local_gas_station',\n    'local_grocery_store',\n    'local_hospital',\n    'local_hotel',\n    'local_laundry_service',\n    'local_library',\n    'local_mall',\n    'local_movies',\n    'local_offer',\n    'local_parking',\n    'local_pharmacy',\n    'local_phone',\n    'local_pizza',\n    'local_play',\n    'local_post_office',\n    'local_printshop',\n    'local_see',\n    'local_shipping',\n    'local_taxi',\n    'location_city',\n    'location_disabled',\n    'location_off',\n    'location_on',\n    'location_searching',\n    'lock',\n    'lock_open',\n    'lock_outline',\n    'looks',\n    'looks_3',\n    'looks_4',\n    'looks_5',\n    'looks_6',\n    'looks_one',\n    'looks_two',\n    'loop',\n    'loupe',\n    'loyalty',\n    'mail',\n    'map',\n    'markunread',\n    'markunread_mailbox',\n    'memory',\n    'menu',\n    'merge_type',\n    'message',\n    'mic',\n    'mic_none',\n    'mic_off',\n    'mms',\n    'mode_comment',\n    'mode_edit',\n    'money_off',\n    'monochrome_photos',\n    'mood',\n    'mood_bad',\n    'more',\n    'more_horiz',\n    'more_vert',\n    'mouse',\n    'movie',\n    'movie_creation',\n    'music_note',\n    'my_library_add',\n    'my_library_books',\n    'my_library_music',\n    'my_location',\n    'nature',\n    'nature_people',\n    'navigate_before',\n    'navigate_next',\n    'navigation',\n    'network_cell',\n    'network_locked',\n    'network_wifi',\n    'new_releases',\n    'nfc',\n    'no_sim',\n    'not_interested',\n    'note_add',\n    'notifications',\n    'notifications_active',\n    'notifications_none',\n    'notifications_off',\n    'notifications_paused',\n    'offline_pin',\n    'ondemand_video',\n    'open_in_browser',\n    'open_in_new',\n    'open_with',\n    'pages',\n    'pageview',\n    'palette',\n    'panorama',\n    'panorama_fish_eye',\n    'panorama_horizontal',\n    'panorama_vertical',\n    'panorama_wide_angle',\n    'party_mode',\n    'pause',\n    'pause_circle_filled',\n    'pause_circle_outline',\n    'payment',\n    'people',\n    'people_outline',\n    'perm_camera_mic',\n    'perm_contact_calendar',\n    'perm_data_setting',\n    'perm_device_information',\n    'perm_identity',\n    'perm_media',\n    'perm_phone_msg',\n    'perm_scan_wifi',\n    'person',\n    'person_add',\n    'person_outline',\n    'person_pin',\n    'personal_video',\n    'phone',\n    'phone_android',\n    'phone_bluetooth_speaker',\n    'phone_forwarded',\n    'phone_in_talk',\n    'phone_iphone',\n    'phone_locked',\n    'phone_missed',\n    'phone_paused',\n    'phonelink',\n    'phonelink_erase',\n    'phonelink_lock',\n    'phonelink_off',\n    'phonelink_ring',\n    'phonelink_setup',\n    'photo',\n    'photo_album',\n    'photo_camera',\n    'photo_library',\n    'photo_size_select_actual',\n    'photo_size_select_large',\n    'photo_size_select_small',\n    'picture_as_pdf',\n    'picture_in_picture',\n    'pin_drop',\n    'place',\n    'play_arrow',\n    'play_circle_filled',\n    'play_circle_outline',\n    'play_for_work',\n    'play_shopping_bag',\n    'playlist_add',\n    'plus_one',\n    'poll',\n    'polymer',\n    'portable_wifi_off',\n    'portrait',\n    'power',\n    'power_input',\n    'power_settings_new',\n    'present_to_all',\n    'print',\n    'public',\n    'publish',\n    'query_builder',\n    'question_answer',\n    'queue',\n    'queue_music',\n    'radio',\n    'radio_button_checked',\n    'radio_button_unchecked',\n    'rate_review',\n    'receipt',\n    'recent_actors',\n    'redeem',\n    'redo',\n    'refresh',\n    'remove',\n    'remove_circle',\n    'remove_circle_outline',\n    'remove_red_eye',\n    'reorder',\n    'repeat',\n    'repeat_one',\n    'replay',\n    'replay_10',\n    'replay_30',\n    'replay_5',\n    'reply',\n    'reply_all',\n    'report',\n    'report_problem',\n    'restaurant_menu',\n    'restore',\n    'ring_volume',\n    'room',\n    'rotate_90_degrees_ccw',\n    'rotate_left',\n    'rotate_right',\n    'router',\n    'satellite',\n    'save',\n    'scanner',\n    'schedule',\n    'school',\n    'screen_lock_landscape',\n    'screen_lock_portrait',\n    'screen_lock_rotation',\n    'screen_rotation',\n    'sd_card',\n    'sd_storage',\n    'search',\n    'security',\n    'select_all',\n    'send',\n    'settings',\n    'settings_applications',\n    'settings_backup_restore',\n    'settings_bluetooth',\n    'settings_brightness',\n    'settings_cell',\n    'settings_ethernet',\n    'settings_input_antenna',\n    'settings_input_component',\n    'settings_input_composite',\n    'settings_input_hdmi',\n    'settings_input_svideo',\n    'settings_overscan',\n    'settings_phone',\n    'settings_power',\n    'settings_remote',\n    'settings_system_daydream',\n    'settings_voice',\n    'share',\n    'shop',\n    'shop_two',\n    'shopping_basket',\n    'shopping_cart',\n    'shuffle',\n    'signal_cellular_4_bar',\n    'signal_cellular_connected_no_internet_4_bar',\n    'signal_cellular_no_sim',\n    'signal_cellular_null',\n    'signal_cellular_off',\n    'signal_wifi_4_bar',\n    'signal_wifi_4_bar_lock',\n    'signal_wifi_off',\n    'sim_card',\n    'sim_card_alert',\n    'skip_next',\n    'skip_previous',\n    'slideshow',\n    'smartphone',\n    'sms',\n    'sms_failed',\n    'snooze',\n    'sort',\n    'sort_by_alpha',\n    'space_bar',\n    'speaker',\n    'speaker_group',\n    'speaker_notes',\n    'speaker_phone',\n    'spellcheck',\n    'star',\n    'star_border',\n    'star_half',\n    'stars',\n    'stay_current_landscape',\n    'stay_current_portrait',\n    'stay_primary_landscape',\n    'stay_primary_portrait',\n    'stop',\n    'storage',\n    'store',\n    'store_mall_directory',\n    'straighten',\n    'strikethrough_s',\n    'style',\n    'subject',\n    'subtitles',\n    'supervisor_account',\n    'surround_sound',\n    'swap_calls',\n    'swap_horiz',\n    'swap_vert',\n    'swap_vertical_circle',\n    'switch_camera',\n    'switch_video',\n    'sync',\n    'sync_disabled',\n    'sync_problem',\n    'system_update',\n    'system_update_alt',\n    'tab',\n    'tab_unselected',\n    'tablet',\n    'tablet_android',\n    'tablet_mac',\n    'tag_faces',\n    'tap_and_play',\n    'terrain',\n    'text_format',\n    'textsms',\n    'texture',\n    'theaters',\n    'thumb_down',\n    'thumb_up',\n    'thumbs_up_down',\n    'time_to_leave',\n    'timelapse',\n    'timer',\n    'timer_10',\n    'timer_3',\n    'timer_off',\n    'toc',\n    'today',\n    'toll',\n    'tonality',\n    'toys',\n    'track_changes',\n    'traffic',\n    'transform',\n    'translate',\n    'trending_down',\n    'trending_flat',\n    'trending_up',\n    'tune',\n    'turned_in',\n    'turned_in_not',\n    'tv',\n    'undo',\n    'unfold_less',\n    'unfold_more',\n    'usb',\n    'verified_user',\n    'vertical_align_bottom',\n    'vertical_align_center',\n    'vertical_align_top',\n    'vibration',\n    'video_library',\n    'videocam',\n    'videocam_off',\n    'view_agenda',\n    'view_array',\n    'view_carousel',\n    'view_column',\n    'view_comfy',\n    'view_compact',\n    'view_day',\n    'view_headline',\n    'view_list',\n    'view_module',\n    'view_quilt',\n    'view_stream',\n    'view_week',\n    'vignette',\n    'visibility',\n    'visibility_off',\n    'voice_chat',\n    'voicemail',\n    'volume_down',\n    'volume_mute',\n    'volume_off',\n    'volume_up',\n    'vpn_key',\n    'vpn_lock',\n    'wallpaper',\n    'warning',\n    'watch',\n    'wb_auto',\n    'wb_cloudy',\n    'wb_incandescent',\n    'wb_iridescent',\n    'wb_sunny',\n    'wc',\n    'web',\n    'whatshot',\n    'widgets',\n    'wifi',\n    'wifi_lock',\n    'wifi_tethering',\n    'work',\n    'wrap_text',\n    'youtube_searched_for',\n    'zoom_in',\n    'zoom_out',\n  ];\n\n  get icons(): string[] {\n    return this._icons;\n  }\n\n  filter(query: string): string[] {\n    return this.icons.filter((el: string) => {\n      return el.toLowerCase().indexOf(query ? query.toLowerCase() : '') > -1;\n    });\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * ANIMATIONS\n */\n\n// Directives\nimport { TdToggleDirective } from './animations/toggle/toggle.directive';\nimport { TdFadeDirective } from './animations/fade/fade.directive';\n\nconst TD_ANIMATIONS: Type<any>[] = [\n  TdToggleDirective,\n  TdFadeDirective,\n];\n\n/**\n * FORMS\n */\n\n// Form Directives\nimport { TdAutoTrimDirective } from './forms/auto-trim/auto-trim.directive';\n\nconst TD_FORMS: Type<any>[] = [\n  TdAutoTrimDirective,\n];\n\n// Validators\nconst TD_VALIDATORS: Type<any>[] = [\n];\n\n/**\n * PIPES\n */\nimport { TdTimeAgoPipe } from './pipes/time-ago/time-ago.pipe';\nimport { TdTimeDifferencePipe } from './pipes/time-difference/time-difference.pipe';\nimport { TdBytesPipe } from './pipes/bytes/bytes.pipe';\nimport { TdDigitsPipe } from './pipes/digits/digits.pipe';\nimport { TdTruncatePipe } from './pipes/truncate/truncate.pipe';\n\nconst TD_PIPES: Type<any>[] = [\n  TdTimeAgoPipe,\n  TdTimeDifferencePipe,\n  TdBytesPipe,\n  TdDigitsPipe,\n  TdTruncatePipe,\n];\n\n/**\n * Services\n */\n\nimport { RouterPathService } from './services/router-path.service';\nimport { IconService } from './services/icon.service';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n  ],\n  declarations: [\n    TD_FORMS,\n    TD_PIPES,\n    TD_ANIMATIONS,\n    TD_VALIDATORS,\n  ],\n  exports: [\n    FormsModule,\n    CommonModule,\n    TD_FORMS,\n    TD_PIPES,\n    TD_ANIMATIONS,\n    TD_VALIDATORS,\n  ],\n  providers: [\n    RouterPathService,\n    IconService,\n  ],\n})\nexport class CovalentCommonModule {\n\n}\n",
    "import { trigger, state, style, transition, animate, AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\nexport interface IRotateAnimation extends IAnimationOptions {\n  degrees?: number;\n  ease?: string;\n}\n\n/**\n * Function TdRotateAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation. Defaults to tdRotate.\n * * duration: Duration the animation will run in milliseconds. Defaults to 250 ms.\n * * delay: Delay before the animation will run in milliseconds. Defaults to 0 ms.\n * * degrees: Degrees of rotation that the dom object will animation. A negative value will cause the animation to initially rotate counter-clockwise.\n * * ease: Animation accelerates and decelerates when rotation. Defaults to ease-in.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based rotation animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdRotateAnimation(rotateOptions: IRotateAnimation = {}): AnimationTriggerMetadata {\n  return trigger(rotateOptions.anchor || 'tdRotate', [\n    state('0', style({\n      transform: 'rotate(0deg)',\n    })),\n    state('1',  style({\n      transform: 'rotate(' + (rotateOptions.degrees || 180) + 'deg)',\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((rotateOptions.duration || 250) + 'ms ' +\n          (rotateOptions.delay || 0) + 'ms ' +\n          (rotateOptions.ease || 'ease-in')),\n      ]),\n    ]),\n  ]);\n}\n",
    "import { Component, Directive, Input, Renderer2, ElementRef, AfterViewInit, ViewContainerRef, TemplateRef, ViewChild,\n         HostBinding, HostListener, ChangeDetectorRef } from '@angular/core';\n\nimport { TdCollapseAnimation, TdFadeInOutAnimation } from '@covalent/core/common';\n\n@Directive({\n  selector: '[tdMessageContainer]',\n})\nexport class TdMessageContainerDirective {\n  constructor(public viewContainer: ViewContainerRef) { }\n}\n\n@Component({\n  selector: 'td-message',\n  template: `<div tdMessageContainer></div>\n<ng-template>\n  <div class=\"td-message-wrapper\">\n    <mat-icon class=\"td-message-icon\">{{icon}}</mat-icon>\n    <div class=\"td-message-labels\">\n      <div *ngIf=\"label\" class=\"td-message-label\">{{label}}</div>\n      <div *ngIf=\"sublabel\" class=\"td-message-sublabel\">{{sublabel}}</div>\n    </div>\n    <ng-content select=\"[td-message-actions]\"></ng-content>\n  </div>\n</ng-template>`,\n  styles: [`:host {\n  display: block; }\n  :host .td-message-wrapper {\n    padding: 8px 16px;\n    min-height: 52px;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    :host .td-message-wrapper .td-message-labels {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n\n.td-message-icon {\n  margin-right: 16px; }\n  ::ng-deep [dir='rtl'] .td-message-icon {\n    margin-left: 16px;\n    margin-right: 0; }\n`],\n  animations: [\n    TdCollapseAnimation({ duration: 100 }),\n  ],\n})\nexport class TdMessageComponent implements AfterViewInit {\n\n  private _color: string;\n  private _opened: boolean = true;\n  private _hidden: boolean = false;\n  private _animating: boolean = false;\n  private _initialized: boolean = false;\n\n  @ViewChild(TdMessageContainerDirective) _childElement: TdMessageContainerDirective;\n  @ViewChild(TemplateRef) _template: TemplateRef<any>;\n\n  /**\n   * Binding host to tdCollapse animation\n   */\n  @HostBinding('@tdCollapse')\n  get collapsedAnimation(): boolean {\n    return !this._opened;\n  }\n\n  /**\n   * Binding host to display style when hidden\n   */\n  @HostBinding('style.display')\n  get hidden(): string {\n    return this._hidden ? 'none' : undefined;\n  }\n\n  /**\n   * label: string\n   *\n   * Sets the label of the message.\n   */\n  @Input('label') label: string;\n\n  /**\n   * sublabel?: string\n   *\n   * Sets the sublabel of the message.\n   */\n  @Input('sublabel') sublabel: string;\n\n  /**\n   * icon?: string\n   *\n   * The icon to be displayed before the title.\n   * Defaults to `info_outline` icon\n   */\n  @Input('icon') icon: string = 'info_outline';\n\n  /**\n   * color?: primary | accent | warn\n   *\n   * Sets the color of the message.\n   * Can also use any material color: purple | light-blue, etc.\n   */\n  @Input('color')\n  set color(color: string) {\n    this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    this._renderer.removeClass(this._elementRef.nativeElement, 'bgc-' + this._color + '-100');\n    this._renderer.removeClass(this._elementRef.nativeElement, 'tc-' + this._color + '-700');\n    if (color === 'primary' || color === 'accent' || color === 'warn') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + color);\n    } else {\n      this._renderer.addClass(this._elementRef.nativeElement, 'bgc-' + color + '-100');\n      this._renderer.addClass(this._elementRef.nativeElement, 'tc-' + color + '-700');\n    }\n    this._color = color;\n    this._changeDetectorRef.markForCheck();\n  }\n  get color(): string {\n    return this._color;\n  }\n\n  /**\n   * opened?: boolean\n   *\n   * Shows or hiddes the message depending on its value.\n   * Defaults to 'true'.\n   */\n  @Input('opened')\n  set opened(opened: boolean) {\n    if (this._initialized) {\n      if (opened) {\n        this.open();\n      } else {\n        this.close();\n      }\n    } else {\n      this._opened = opened;\n    }\n  }\n  get opened(): boolean {\n    return this._opened;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-message');\n  }\n\n  /**\n   * Detach element when close animation is finished to set animating state to false\n   * hidden state to true and detach element from DOM\n   */\n  @HostListener('@tdCollapse.done')\n  animationDoneListener(): void {\n    if (!this._opened) {\n      this._hidden = true;\n      this._detach();\n    }\n    this._animating = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the component and attaches the content.\n   */\n  ngAfterViewInit(): void {\n    Promise.resolve(undefined).then(() => {\n      if (this._opened) {\n        this._attach();\n      }\n      this._initialized = true;\n    });\n  }\n\n  /**\n   * Renders the message on screen\n   * Validates if there is an animation currently and if its already opened\n   */\n  open(): void {\n    if (!this._opened && !this._animating) {\n      this._opened = true;\n      this._attach();\n      this._startAnimationState();\n    }\n  }\n\n  /**\n   * Removes the message content from screen.\n   * Validates if there is an animation currently and if its already closed\n   */\n  close(): void {\n    if (this._opened && !this._animating) {\n      this._opened = false;\n      this._startAnimationState();\n    }\n  }\n\n  /**\n   * Toggles between open and close depending on state.\n   */\n  toggle(): void {\n    if (this._opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Method to set the state before starting an animation\n   */\n  private _startAnimationState(): void {\n    this._animating = true;\n    this._hidden = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to attach template to DOM\n   */\n  private _attach(): void {\n    this._childElement.viewContainer.createEmbeddedView(this._template);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to detach template from DOM\n   */\n  private _detach(): void {\n    this._childElement.viewContainer.clear();\n    this._changeDetectorRef.markForCheck();\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdMessageComponent, TdMessageContainerDirective } from './message.component';\n\nconst TD_MESSAGE: Type<any>[] = [\n  TdMessageComponent,\n  TdMessageContainerDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n  ],\n  declarations: [\n    TD_MESSAGE,\n  ],\n  exports: [\n    TD_MESSAGE,\n  ],\n})\nexport class CovalentMessageModule {\n\n}\n",
    "import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener,\n  ElementRef, Optional, Inject, Directive, TemplateRef, ViewContainerRef, ContentChild, ChangeDetectionStrategy,\n  ChangeDetectorRef, AfterViewInit, OnDestroy, HostBinding, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\n\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE, ENTER, SPACE, TAB, HOME } from '@angular/cdk/keycodes';\nimport { MatChip } from '@angular/material/chips';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption } from '@angular/material/core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { timer } from 'rxjs/observable/timer';\nimport { merge } from 'rxjs/observable/merge';\nimport { toPromise } from 'rxjs/operator/toPromise';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter } from 'rxjs/operators/filter';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-chip]ng-template',\n})\nexport class TdChipDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-autocomplete-option]ng-template',\n})\nexport class TdAutocompleteOptionDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdChipsBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdChipsMixinBase = mixinControlValueAccessor(mixinDisabled(TdChipsBase), []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdChipsComponent),\n    multi: true,\n  }],\n  selector: 'td-chips',\n  inputs: ['disabled', 'value'],\n  styles: [`:host {\n  display: block;\n  padding: 0 5px;\n  min-height: 48px; }\n  :host .td-chips-wrapper {\n    min-height: 42px;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start; }\n    :host .td-chips-wrapper.td-chips-stacked .mat-basic-chip,\n    :host .td-chips-wrapper.td-chips-stacked .td-chips-form-field {\n      width: 100%; }\n    :host .td-chips-wrapper.td-chips-input-before-position .td-chips-form-field {\n      -webkit-box-ordinal-group: 0;\n          -ms-flex-order: -1;\n              order: -1; }\n  :host .td-chip, :host .td-chip > .td-chip-content {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    max-width: 100%;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    :host .td-chip.td-chip-stacked, :host .td-chip > .td-chip-content.td-chip-stacked {\n      -webkit-box-pack: justify;\n          -ms-flex-pack: justify;\n              justify-content: space-between; }\n  :host ::ng-deep {\n    /* TODO see if we can make styles more abstract to future proof for contact chips */ }\n    :host ::ng-deep .mat-form-field-wrapper {\n      padding-bottom: 2px; }\n    :host ::ng-deep .mat-basic-chip {\n      display: inline-block;\n      cursor: default;\n      border-radius: 16px;\n      margin: 8px 8px 0 0;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      max-width: 100%;\n      position: relative; }\n      html[dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      [dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip .td-chip {\n        min-height: 32px;\n        line-height: 32px;\n        font-size: 13px;\n        padding: 0 0 0 12px; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=rtl] {\n          direction: rtl;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=ltr] {\n          direction: ltr;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n          display: inline-block;\n          -webkit-box-ordinal-group: -19;\n              -ms-flex-order: -20;\n                  order: -20;\n          -webkit-box-pack: center;\n              -ms-flex-pack: center;\n                  justify-content: center;\n          -webkit-box-align: center;\n              -ms-flex-align: center;\n                  align-items: center;\n          text-align: center;\n          height: 32px;\n          width: 32px;\n          margin: 0 8px 0 -12px;\n          border-radius: 50%; }\n          html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=rtl] {\n            direction: rtl;\n            unicode-bidi: bidi-override; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=ltr] {\n            direction: ltr;\n            unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n        padding: 0 12px 0 0; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=rtl] {\n          direction: rtl;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=ltr] {\n          direction: ltr;\n          unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal {\n        margin: 0 4px;\n        font-size: 21px;\n        line-height: 22px; }\n        :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal:hover {\n          cursor: pointer; }\n    :host ::ng-deep .td-chips-stacked .mat-basic-chip {\n      margin: 4px 0; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:first-of-type {\n        margin: 8px 0 4px; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:last-of-type {\n        margin: 4px 0 8px; }\n  :host .mat-form-field-underline {\n    position: relative;\n    height: 1px;\n    width: 100%;\n    bottom: 0; }\n    :host .mat-form-field-underline.mat-disabled {\n      background-position: 0;\n      bottom: -4px;\n      background-color: transparent; }\n    :host .mat-form-field-underline .mat-form-field-ripple {\n      position: absolute;\n      height: 2px;\n      top: 0;\n      width: 100%;\n      -webkit-transform-origin: 50%;\n              transform-origin: 50%;\n      -webkit-transform: scaleX(0.5);\n              transform: scaleX(0.5);\n      visibility: hidden;\n      -webkit-transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n      transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2); }\n      :host .mat-form-field-underline .mat-form-field-ripple.mat-focused {\n        visibility: visible;\n        -webkit-transform: scaleX(1);\n                transform: scaleX(1);\n        -webkit-transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition: transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n        transition: transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear; }\n  :host ::ng-deep mat-form-field .mat-form-field-underline {\n    display: none; }\n`],\n  template: `<div class=\"td-chips-wrapper\"\n     [class.td-chips-stacked]=\"stacked\"\n     [class.td-chips-input-before-position]=\"inputPosition === 'before'\">\n  <ng-template let-chip let-first=\"first\" let-index=\"index\" ngFor [ngForOf]=\"value\">\n    <mat-basic-chip [class.td-chip-disabled]=\"disabled\"\n                   [class.td-chip-after-pad]=\"!canRemoveChip\"\n                   [color]=\"color\"\n                   [disabled]=\"true\"\n                   (keydown)=\"_chipKeydown($event, index)\"\n                   (blur)=\"_handleChipBlur($event, chip)\"\n                   (focus)=\"_handleChipFocus($event, chip)\">\n      <div class=\"td-chip\" [class.td-chip-stacked]=\"stacked\">\n        <span class=\"td-chip-content\">\n          <span *ngIf=\"!_chipTemplate?.templateRef\">{{chip}}</span>\n          <ng-template\n            *ngIf=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutlet]=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ chip: chip }\">\n          </ng-template>\n        </span>\n        <mat-icon *ngIf=\"canRemoveChip\" class=\"td-chip-removal\" (click)=\"_internalClick = removeChip(index)\">\n          cancel\n        </mat-icon>\n      </div>\n    </mat-basic-chip>\n  </ng-template>\n  <mat-form-field floatPlaceholder=\"never\"\n                  class=\"td-chips-form-field\"\n                  [style.width.px]=\"canAddChip ? null : 0\"\n                  [style.height.px]=\"canAddChip ? null : 0\"\n                  [color]=\"color\">\n    <input matInput\n            #input\n            [tabIndex]=\"-1\"\n            [matAutocomplete]=\"autocomplete\"\n            [formControl]=\"inputControl\"\n            [placeholder]=\"canAddChip? placeholder : ''\"\n            (keydown)=\"_inputKeydown($event)\"\n            (keyup.enter)=\"_handleAddChip()\"\n            (focus)=\"_handleFocus()\">\n  </mat-form-field>\n  <mat-autocomplete #autocomplete=\"matAutocomplete\"\n                   [displayWith]=\"_removeInputDisplay\"\n                   (optionSelected)=\"addChip($event.option.value)\">\n    <ng-template let-item let-first=\"first\" ngFor [ngForOf]=\"items\">\n      <mat-option (click)=\"_setInternalClick()\" [value]=\"item\">\n        <span *ngIf=\"!_autocompleteOptionTemplate?.templateRef\">{{item}}</span>\n        <ng-template\n          *ngIf=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutlet]=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutletContext]=\"{ option: item }\">\n        </ng-template>\n      </mat-option>\n    </ng-template>\n  </mat-autocomplete>\n</div>\n<div *ngIf=\"chipAddition\" class=\"mat-form-field-underline\"\n      [class.mat-disabled]=\"disabled\">\n  <span class=\"mat-form-field-ripple\"\n        [class.mat-focused]=\"focused\"></span>\n</div>\n<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdChipsComponent extends _TdChipsMixinBase implements IControlValueAccessor, DoCheck, OnInit, AfterViewInit, OnDestroy, ICanDisable {\n\n  private _outsideClickSubs: Subscription;\n\n  private _isMousedown: boolean = false;\n\n  private _items: any[];\n  private _length: number = 0;\n  private _stacked: boolean = false;\n  private _requireMatch: boolean = false;\n  private _color: 'primary' | 'accent' | 'warn' = 'primary';\n  private _inputPosition: 'before' | 'after' = 'after';\n  private _chipAddition: boolean = true;\n  private _chipRemoval: boolean = true;\n  private _focused: boolean = false;\n  private _tabIndex: number = 0;\n\n  _internalClick: boolean = false;\n\n  @ViewChild('input') _nativeInput: ElementRef;\n  @ViewChild(MatInput) _inputChild: MatInput;\n  @ViewChild(MatAutocompleteTrigger) _autocompleteTrigger: MatAutocompleteTrigger;\n  @ViewChildren(MatChip) _chipsChildren: QueryList<MatChip>;\n\n  @ContentChild(TdChipDirective) _chipTemplate: TdChipDirective;\n  @ContentChild(TdAutocompleteOptionDirective) _autocompleteOptionTemplate: TdAutocompleteOptionDirective;\n\n  @ViewChildren(MatOption) _options: QueryList<MatOption>;\n\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  get focused(): boolean {\n    return this._focused;\n  }\n\n  /**\n   * FormControl for the matInput element.\n   */\n  inputControl: FormControl = new FormControl();\n\n  /**\n   * items?: any[]\n   * Renders the `mat-autocomplete` with the provided list to display as options.\n   */\n  @Input('items')\n  set items(items: any[]) {\n    this._items = items;\n    this._setFirstOptionActive();\n    this._changeDetectorRef.markForCheck();\n  }\n  get items(): any[] {\n    return this._items;\n  }\n\n  /**\n   * stacked?: boolean\n   * Set stacked or horizontal chips depending on value.\n   * Defaults to false.\n   */\n  @Input('stacked')\n  set stacked(stacked: boolean) {\n    this._stacked = coerceBooleanProperty(stacked);\n  }\n  get stacked(): boolean {\n    return this._stacked;\n  }\n\n  /**\n   * inputPosition?: 'before' | 'after'\n   * Set input position before or after the chips.\n   * Defaults to 'after'.\n   */\n  @Input('inputPosition')\n  set inputPosition(inputPosition: 'before' | 'after') {\n    this._inputPosition = inputPosition;\n  }\n  get inputPosition(): 'before' | 'after' {\n    return this._inputPosition;\n  }\n\n  /**\n   * requireMatch?: boolean\n   * Blocks custom inputs and only allows selections from the autocomplete list.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: boolean) {\n    this._requireMatch = coerceBooleanProperty(requireMatch);\n  }\n  get requireMatch(): boolean {\n    return this._requireMatch;\n  }\n\n  /**\n   * chipAddition?: boolean\n   * Disables the ability to add chips. When setting disabled as true, this will be overriden.\n   * Defaults to true.\n   */\n  @Input('chipAddition')\n  set chipAddition(chipAddition: boolean) {\n    this._chipAddition = chipAddition;\n    this._toggleInput();\n  }\n  get chipAddition(): boolean {\n    return this._chipAddition;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   * States if a chip can be added and if the input is available\n   */\n  get canAddChip(): boolean {\n    return this.chipAddition && !this.disabled;\n  }\n\n  /**\n   * chipRemoval?: boolean\n   * Disables the ability to remove chips. If it doesn't exist chip remmoval defaults to true.\n   * When setting disabled as true, this will be overriden to false.\n   */\n  @Input('chipRemoval')\n  set chipRemoval(chipRemoval: boolean) {\n    this._chipRemoval = chipRemoval;\n  }\n  get chipRemoval(): boolean {\n    return this._chipRemoval;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipRemoval is set to 'true'\n   * States if a chip can be removed\n   */\n  get canRemoveChip(): boolean {\n    return this.chipRemoval && !this.disabled;\n  }\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 200.\n   */\n  @Input('debounce') debounce: number = 200;\n\n  /**\n   * color?: 'primary' | 'accent' | 'warn'\n   * Sets the color for the input and focus/selected state of the chips.\n   * Defaults to 'primary'\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  /**\n   * add?: function\n   * Method to be executed when a chip is added.\n   * Sends chip value as event.\n   */\n  @Output('add') onAdd: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * remove?: function\n   * Method to be executed when a chip is removed.\n   * Sends chip value as event.\n   */\n  @Output('remove') onRemove: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * inputChange?: function\n   * Method to be executed when the value in the autocomplete input changes.\n   * Sends string value as event.\n   */\n  @Output('inputChange') onInputChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * chipFocus?: function\n   * Method to be executed when a chip is focused.\n   * Sends chip value as event.\n   */\n  @Output('chipFocus') onChipFocus: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * blur?: function\n   * Method to be executed when a chip is blurred.\n   * Sends chip value as event.\n   */\n  @Output('chipBlur') onChipBlur: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Hostbinding to set the a11y of the TdChipsComponent depending on its state\n   */\n  @HostBinding('attr.tabindex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n  }\n\n  /**\n   * Listens to host focus event to act on it\n   */\n  @HostListener('focus', ['$event'])\n  focusListener(event: FocusEvent): void {\n    // should only focus if its not via mousedown to prevent clashing with autocomplete\n    if (!this._isMousedown) {\n      this.focus();\n    }\n    event.preventDefault();\n  }\n\n  /**\n   * Listens to host mousedown event to act on it\n   */\n  @HostListener('mousedown', ['$event'])\n  mousedownListener(event: FocusEvent): void {\n     // sets a flag to know if there was a mousedown and then it returns it back to false\n    this._isMousedown = true;\n    toPromise.call(timer()).then(() => {\n      this._isMousedown = false;\n    });\n  }\n\n  /**\n   * If clicking on :host or `td-chips-wrapper`, then we stop the click propagation so the autocomplete\n   * doesnt close automatically.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    const clickTarget: HTMLElement = <HTMLElement>event.target;\n    if (clickTarget === this._elementRef.nativeElement ||\n        clickTarget.className.indexOf('td-chips-wrapper') > -1) {\n      this.focus();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Listens to host keydown event to act on it depending on the keypress\n   */\n  @HostListener('keydown', ['$event'])\n  keydownListener(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case TAB:\n        // if tabing out, then unfocus the component\n        toPromise.call(timer()).then(() => {\n          this.removeFocusedState();\n        });\n        break;\n      case ESCAPE:\n        if (this._inputChild.focused) {\n          this._nativeInput.nativeElement.blur();\n          this.removeFocusedState();\n          this._closeAutocomplete();\n        } else {\n          this.focus();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  ngOnInit(): void {\n    this.inputControl.valueChanges.pipe(\n      debounceTime(this.debounce),\n    ).subscribe((value: string) => {\n      this.onInputChange.emit(value ? value : '');\n    });\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterViewInit(): void {\n    this._watchOutsideClick();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this.value && this.value.length !== this._length) {\n      this._length = this.value.length;\n      this.onChange(this.value);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._outsideClickSubs) {\n      this._outsideClickSubs.unsubscribe();\n      this._outsideClickSubs = undefined;\n    }\n  }\n\n  _setInternalClick(): void {\n    this._internalClick = true;\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    this._toggleInput();\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * It check if [requireMatch] is enabled, and tries to add the first active option\n   * else if just adds the value thats on the input\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  _handleAddChip(): boolean {\n    let value: any;\n    if (this.requireMatch) {\n      let selectedOptions: MatOption[] = this._options.toArray().filter((option: MatOption) => {\n        return option.active;\n      });\n      if (selectedOptions.length > 0) {\n        value = selectedOptions[0].value;\n        selectedOptions[0].setInactiveStyles();\n      }\n      if (!value) {\n        return false;\n      }\n    } else {\n      // if there is a selection, then use that\n      // else use the input value as chip\n      if (this._autocompleteTrigger.activeOption) {\n        value = this._autocompleteTrigger.activeOption.value;\n        this._autocompleteTrigger.activeOption.setInactiveStyles();\n      } else {\n        value = this._inputChild.value;\n        if (value.trim() === '') {\n          return false;\n        }\n      }\n    }\n    return this.addChip(value);\n  }\n\n  /**\n   * Method thats exectuted when trying to add a value as chip\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addChip(value: any): boolean {\n    /**\n     * add a debounce ms delay when reopening the autocomplete to give it time\n     * to rerender the next list and at the correct spot\n     */\n    this._closeAutocomplete();\n    toPromise.call(timer(this.debounce)).then(() => {\n      this.setFocusedState();\n      this._setFirstOptionActive();\n      this._openAutocomplete();\n    });\n\n    this.inputControl.setValue('');\n    // check if value is already part of the model\n    if (this.value.indexOf(value) > -1) {\n      return false;\n    }\n\n    this.value.push(value);\n    this.onAdd.emit(value);\n    this.onChange(this.value);\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeChip(index: number): boolean {\n    let removedValues: any[] = this.value.splice(index, 1);\n    if (removedValues.length === 0) {\n      return false;\n    }\n\n    /**\n     * Checks if deleting last single chip, to focus input afterwards\n     * Else check if its not the last chip of the list to focus the next one.\n     */\n    if (index === (this._totalChips - 1) && index === 0) {\n      this._inputChild.focus();\n    } else if (index < (this._totalChips - 1)) {\n      this._focusChip(index + 1);\n    } else if (index > 0) {\n      this._focusChip(index - 1);\n    }\n\n    this.onRemove.emit(removedValues[0]);\n    this.onChange(this.value);\n    this.inputControl.setValue('');\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Sets blur of chip and sends out event\n   */\n  _handleChipBlur(event: FocusEvent, value: any): void {\n    this.onChipBlur.emit(value);\n  }\n\n  /**\n   * Sets focus of chip and sends out event\n   */\n  _handleChipFocus(event: FocusEvent, value: any): void {\n    this.setFocusedState();\n    this.onChipFocus.emit(value);\n  }\n\n  _handleFocus(): boolean {\n    this.setFocusedState();\n    this._setFirstOptionActive();\n    return true;\n  }\n\n  /**\n   * Sets focus state of the component\n   */\n  setFocusedState(): void {\n    if (!this.disabled) {\n      this._focused = true;\n      this._tabIndex = -1;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Removes focus state of the component\n   */\n  removeFocusedState(): void {\n    this._focused = false;\n    this._tabIndex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Programmatically focus the input or first chip. Since its the component entry point\n   * depending if a user can add or remove chips\n   */\n  focus(): void {\n    if (this.canAddChip) {\n      this._inputChild.focus();\n    } else if (!this.disabled) {\n      this._focusFirstChip();\n    }\n  }\n\n  /**\n   * Passes relevant input key presses.\n   */\n  _inputKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case UP_ARROW:\n        /**\n         * Since the first item is highlighted on [requireMatch], we need to inactivate it\n         * when pressing the up key\n         */\n        if (this.requireMatch) {\n          let length: number = this._options.length;\n          if (length > 0 && this._options.toArray()[0].active) {\n            this._options.toArray()[0].setInactiveStyles();\n            // prevent default window scrolling\n            event.preventDefault();\n          }\n        }\n        break;\n      case LEFT_ARROW:\n      case DELETE:\n      case BACKSPACE:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\n        if (!this._inputChild.value) {\n          this._focusLastChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      case RIGHT_ARROW:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\n        if (!this._inputChild.value) {\n          this._focusFirstChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Passes relevant chip key presses.\n   */\n  _chipKeydown(event: KeyboardEvent, index: number): void {\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if we can delete a chip */\n        if (this.canRemoveChip) {\n         this.removeChip(index);\n        }\n        break;\n      case UP_ARROW:\n      case LEFT_ARROW:\n        /**\n         * Check to see if left/down arrow was pressed while focusing the first chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === 0) {\n          // only try to target input if pressing left\n          if (this.canAddChip && event.keyCode === LEFT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusLastChip();\n          }\n        } else if (index > 0) {\n          this._focusChip(index - 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      case DOWN_ARROW:\n      case RIGHT_ARROW:\n        /**\n         * Check to see if right/up arrow was pressed while focusing the last chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === (this._totalChips - 1)) {\n          // only try to target input if pressing right\n          if (this.canAddChip && event.keyCode === RIGHT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusFirstChip();\n          }\n        } else if (index < (this._totalChips - 1)) {\n          this._focusChip(index + 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to remove from display the value added from the autocomplete since it goes directly as chip.\n   */\n  _removeInputDisplay(): string {\n    return '';\n  }\n\n  /**\n   * Method to open the autocomplete manually if its not already opened\n   */\n  _openAutocomplete(): void {\n    if (!this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.openPanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method to close the autocomplete manually if its not already closed\n   */\n  _closeAutocomplete(): void {\n    if (this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.closePanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Get total of chips\n   */\n  get _totalChips(): number {\n    let chips: MatChip[] = this._chipsChildren.toArray();\n    return chips.length;\n  }\n\n  /**\n   * Method to focus a desired chip by index\n   */\n  private _focusChip(index: number): void {\n    /** check to see if index exists in the array before focusing */\n    if (index > -1 && this._totalChips > index) {\n      this._chipsChildren.toArray()[index].focus();\n    }\n  }\n\n  /** Method to focus first chip */\n  private _focusFirstChip(): void {\n    this._focusChip(0);\n  }\n\n  /** Method to focus last chip */\n  private _focusLastChip(): void {\n    this._focusChip(this._totalChips - 1);\n  }\n\n  /**\n   * Method to toggle the disable state of input\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   */\n  private _toggleInput(): void {\n    if (this.canAddChip) {\n      this.inputControl.enable();\n    } else {\n      this.inputControl.disable();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets first option as active to let the user know which one will be added when pressing enter\n   * Only if [requireMatch] has been set\n   */\n  private _setFirstOptionActive(): void {\n    if (this.requireMatch) {\n      // need to use a timer here to wait until the autocomplete has been opened (end of queue)\n      toPromise.call(timer()).then(() => {\n        if (this.focused && this._options && this._options.length > 0) {\n          // clean up of previously active options\n          this._options.toArray().forEach((option: MatOption) => {\n            option.setInactiveStyles();\n          });\n          // set the first one as active\n          this._options.toArray()[0].setActiveStyles();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }\n\n  /**\n   * Watches clicks outside of the component to remove the focus\n   * The autocomplete panel is considered inside the component so we\n   * need to use a flag to find out when its clicked.\n   */\n  private _watchOutsideClick(): void {\n    if (this._document) {\n      merge(\n        fromEvent(this._document, 'click'),\n        fromEvent(this._document, 'touchend'),\n      ).pipe(\n        filter(\n          (event: MouseEvent) => {\n            const clickTarget: HTMLElement = <HTMLElement>event.target;\n            setTimeout(() => {\n              this._internalClick = false;\n            });\n            return this.focused &&\n                  (clickTarget !== this._elementRef.nativeElement) &&\n                  !this._elementRef.nativeElement.contains(clickTarget) && !this._internalClick;\n          },\n        ),\n      ).subscribe(() => {\n        if (this.focused) {\n          this._autocompleteTrigger.closePanel();\n          this.removeFocusedState();\n          this.onTouched();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    return undefined;\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatChipsModule } from '@angular/material/chips';\n\nimport { TdChipsComponent, TdChipDirective, TdAutocompleteOptionDirective } from './chips.component';\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n    MatInputModule,\n    MatIconModule,\n    MatChipsModule,\n    MatAutocompleteModule,\n  ],\n  declarations: [\n    TdChipsComponent,\n    TdChipDirective,\n    TdAutocompleteOptionDirective,\n  ],\n  exports: [\n    TdChipsComponent,\n    TdChipDirective,\n    TdAutocompleteOptionDirective,\n  ],\n})\nexport class CovalentChipsModule {\n\n}\n",
    "import { Component, Input, Output, Renderer2, ElementRef, ContentChildren, QueryList, HostListener } from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styles: [`:host {\n  border-bottom-style: solid;\n  border-bottom-width: 1px; }\n\n:host.td-data-table-row {\n  height: 48px; }\n\n:host.td-data-table-column-row {\n  height: 56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableColumnRowComponent {\n\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styles: [`:host {\n  border-bottom-style: solid;\n  border-bottom-width: 1px; }\n\n:host.td-data-table-row {\n  height: 48px; }\n\n:host.td-data-table-column-row {\n  height: 56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableRowComponent {\n\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n}\n",
    "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdDataTableTemplate]ng-template'})\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy,\n         ChangeDetectorRef, ViewChild, OnDestroy, AfterViewInit,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject,\n         Optional, ViewChildren, ElementRef, OnInit, AfterContentChecked } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty} from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent, TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = <any>'ASC',\n  Descending = <any>'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdDataTableComponent),\n    multi: true,\n  }],\n  selector: 'td-data-table',\n  styles: [`:host {\n  display: block;\n  overflow: hidden; }\n  :host .td-data-table-scrollable {\n    position: relative;\n    overflow: auto;\n    height: calc(100% - 56px); }\n\ntable.td-data-table {\n  width: auto !important; }\n  table.td-data-table.mat-selectable tbody > tr.td-data-table-row {\n    -webkit-transition: background-color 0.2s;\n    transition: background-color 0.2s; }\n  table.td-data-table.mat-selectable .td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:first-child > .td-data-table-column-content-wrapper {\n    width: 18px;\n    min-width: 18px;\n    padding: 0 24px; }\n  table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper {\n    padding-left: 0; }\n  [dir='rtl'] table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper {\n    padding-right: 0;\n    padding-left: 28px; }\n  table.td-data-table td.mat-checkbox-cell,\n  table.td-data-table th.mat-checkbox-column {\n    min-width: 42px;\n    width: 42px;\n    font-size: 0 !important; }\n    table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox,\n    table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox {\n      width: 18px;\n      height: 18px; }\n      ::ng-deep table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after, ::ng-deep\n      table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after {\n        width: 11px !important;\n        height: 4px !important; }\n    table.td-data-table td.mat-checkbox-cell mat-checkbox ::ng-deep .mat-checkbox-inner-container,\n    table.td-data-table th.mat-checkbox-column mat-checkbox ::ng-deep .mat-checkbox-inner-container {\n      width: 18px;\n      height: 18px;\n      margin: 0; }\n`],\n  template: `<table td-data-table\n        [style.left.px]=\"columnsLeftScroll\"\n        [class.mat-selectable]=\"selectable\">\n  <thead class=\"td-data-table-head\">\n    <tr td-data-table-column-row>\n      <th td-data-table-column class=\"mat-checkbox-column\" *ngIf=\"selectable\">\n        <mat-checkbox\n          #checkBoxAll\n          *ngIf=\"multiple\"\n          [disabled]=\"!hasData\"\n          [indeterminate]=\"indeterminate && !allSelected && hasData\"\n          [checked]=\"allSelected && hasData\"\n          (click)=\"blockEvent($event); selectAll(!checkBoxAll.checked)\"\n          (keyup.enter)=\"selectAll(!checkBoxAll.checked)\"\n          (keyup.space)=\"selectAll(!checkBoxAll.checked)\"\n          (keydown.space)=\"blockEvent($event)\">\n        </mat-checkbox>\n      </th>\n      <th td-data-table-column\n          #columnElement\n          *ngFor=\"let column of columns; let i = index;\"\n          [style.min-width.px]=\"getColumnWidth(i)\"\n          [style.max-width.px]=\"getColumnWidth(i)\"\n          [name]=\"column.name\"\n          [numeric]=\"column.numeric\"\n          [active]=\"(column.sortable || sortable) && column === sortByColumn\"\n          [sortable]=\"column.sortable || (sortable && column.sortable !== false)\"\n          [sortOrder]=\"sortOrderEnum\"\n          [hidden]=\"column.hidden\"\n          (sortChange)=\"handleSort(column)\">\n          <span [matTooltip]=\"column.tooltip\">{{column.label}}</span>\n      </th>\n    </tr>\n  </thead>\n</table>\n<div #scrollableDiv class=\"td-data-table-scrollable\"\n      (scroll)=\"handleScroll($event)\">\n  <div [style.height.px]=\"totalHeight\"></div>\n  <table td-data-table\n          [style.transform]=\"offsetTransform\"\n          [style.position]=\"'absolute'\"\n          [class.mat-selectable]=\"selectable\"\n          [class.mat-clickable]=\"clickable\">\n    <tbody class=\"td-data-table-body\">\n      <tr td-data-table-row\n          #dtRow\n          [tabIndex]=\"selectable ? 0 : -1\"\n          [selected]=\"(clickable || selectable) && isRowSelected(row)\"\n          *ngFor=\"let row of virtualData; let rowIndex = index\"\n          (click)=\"handleRowClick(row, fromRow + rowIndex, $event)\"\n          (keyup)=\"selectable && _rowKeyup($event, row, rowIndex)\"\n          (keydown.space)=\"blockEvent($event)\"\n          (keydown.shift.space)=\"blockEvent($event)\"\n          (keydown.shift)=\"disableTextSelection()\"\n          (keyup.shift)=\"enableTextSelection()\">\n        <td td-data-table-cell class=\"mat-checkbox-cell\" *ngIf=\"selectable\">\n          <mat-pseudo-checkbox\n            [state]=\"dtRow.selected ? 'checked' : 'unchecked'\"\n            (mousedown)=\"disableTextSelection()\"\n            (mouseup)=\"enableTextSelection()\"\n            stopRowClick\n            (click)=\"select(row, $event, fromRow + rowIndex)\">\n          </mat-pseudo-checkbox>\n        </td>\n        <td td-data-table-cell\n            [numeric]=\"column.numeric\"\n            [hidden]=\"column.hidden\"\n            *ngFor=\"let column of columns; let i = index\"\n            [style.min-width.px]=\"getColumnWidth(i)\"\n            [style.max-width.px]=\"getColumnWidth(i)\">\n          <span *ngIf=\"!getTemplateRef(column.name)\">{{column.format ? column.format(getCellValue(column, row)) : getCellValue(column, row)}}</span>\n          <ng-template\n            *ngIf=\"getTemplateRef(column.name)\"\n            [ngTemplateOutlet]=\"getTemplateRef(column.name)\"\n            [ngTemplateOutletContext]=\"{ value: getCellValue(column, row), row: row, column: column.name }\">\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<ng-content></ng-content>\n`,\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase implements IControlValueAccessor, OnInit,\n                                          AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv') _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable()\n      .subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable()\n      .subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    if (this._elementRef.nativeElement) {\n      let newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        this._hostWidth = newHostWidth;\n        this._onResize.next();\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      let newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(\n      debounceTime(0),\n    ).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          let modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          let index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value ? this.value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if ((this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n           (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if ((this._firstSelectedIndex > currentSelected) || (this._firstSelectedIndex < currentSelected)) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            let rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) ||\n                (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (this._shiftPreviouslyPressed) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              if ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                  (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex)) {\n                this._doSelection(this._data[i], i);\n              }\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n      // if shift wasnt pressed, then we take the element checked as the first row\n      // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null) {\n        this.onRowClick.emit({\n          row: row,\n          index: index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < (this._rows.toArray().length - 1)) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, index: rowIndex, selected: !wasSelected});\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    let flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      let newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue ||\n            this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue ||\n            !this._widths[colWidth.index].limit) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      let newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value: value,\n      index: index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        let widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = (widthOpts && !!widthOpts.min);\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n        // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n      // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection &&\n        this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    let renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, index: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[index]) {\n          this._rowHeightCache[index] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[index];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      let fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      let range: number = (index - 1) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, HostListener, ViewChild } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styles: [`:host {\n  white-space: nowrap;\n  position: relative;\n  padding: 0;\n  vertical-align: middle;\n  text-align: left; }\n  :host > .td-data-table-heading {\n    padding: 0 28px; }\n  :host:first-child > .td-data-table-heading {\n    padding-left: 24px;\n    padding-right: initial; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host:last-child > .td-data-table-heading {\n    padding-left: 28px;\n    padding-right: 24px; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host mat-icon {\n    height: 16px;\n    width: 16px;\n    font-size: 16px !important;\n    line-height: 16px !important; }\n    :host mat-icon.td-data-table-sort-icon {\n      opacity: 0;\n      -webkit-transition: -webkit-transform 0.25s;\n      transition: -webkit-transform 0.25s;\n      transition: transform 0.25s;\n      transition: transform 0.25s, -webkit-transform 0.25s;\n      position: absolute;\n      top: 0; }\n      :host mat-icon.td-data-table-sort-icon.mat-asc {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg); }\n      :host mat-icon.td-data-table-sort-icon.mat-desc {\n        -webkit-transform: rotate(180deg);\n                transform: rotate(180deg); }\n  :host:hover.mat-sortable mat-icon.td-data-table-sort-icon,\n  :host.mat-active.mat-sortable mat-icon.td-data-table-sort-icon {\n    opacity: 1; }\n  html[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  body[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  [dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  :host bdo[dir=rtl] {\n    direction: rtl;\n    unicode-bidi: bidi-override; }\n  :host bdo[dir=ltr] {\n    direction: ltr;\n    unicode-bidi: bidi-override; }\n  :host > * {\n    vertical-align: middle; }\n  :host.mat-clickable {\n    cursor: pointer; }\n    :host.mat-clickable:focus {\n      outline: none; }\n  :host .td-data-table-heading {\n    display: inline-block;\n    position: relative; }\n  :host.mat-numeric {\n    text-align: right; }\n    html[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    [dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    :host.mat-numeric bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric mat-icon.td-data-table-sort-icon {\n      margin-left: -22px;\n      margin-right: initial; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n  :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n    margin-left: 6px;\n    margin-right: initial; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n`],\n  template: `<span #columnContent class=\"td-data-table-heading\">\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n  <span>\n    <ng-content></ng-content>\n  </span>\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && !numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n</span>\n`,\n})\nexport class TdDataTableColumnComponent {\n\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', {read: ElementRef}) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input('name') name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable') sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input('active') active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                        new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click', ['event'])\n  handleClick(): void {\n    if (this.sortable) {\n      this.onSortChange.emit({name: this.name, order: this._sortOrder});\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n\n}\n",
    "import { Component, Input, Renderer2, ElementRef, HostBinding } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td[td-data-table-cell]',\n  styles: [`:host {\n  vertical-align: middle;\n  text-align: left;\n  padding: 0; }\n  html[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  body[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  [dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  :host bdo[dir=rtl] {\n    direction: rtl;\n    unicode-bidi: bidi-override; }\n  :host bdo[dir=ltr] {\n    direction: ltr;\n    unicode-bidi: bidi-override; }\n  :host > .td-data-table-cell-content-wrapper {\n    padding: 0 28px;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    :host > .td-data-table-cell-content-wrapper.td-data-table-cell-numeric {\n      -webkit-box-pack: end;\n          -ms-flex-pack: end;\n              justify-content: flex-end; }\n  :host:first-child > .td-data-table-cell-content-wrapper {\n    padding-left: 24px;\n    padding-right: initial; }\n    html[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host:last-child > .td-data-table-cell-content-wrapper {\n    padding-left: 28px;\n    padding-right: 24px; }\n    html[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host > * {\n    vertical-align: middle; }\n  :host.mat-clickable {\n    cursor: pointer; }\n    :host.mat-clickable:focus {\n      outline: none; }\n  :host.mat-numeric {\n    text-align: right; }\n    html[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    [dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    :host.mat-numeric bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n`],\n  template: `<div class=\"td-data-table-cell-content-wrapper\"\n     [class.td-data-table-cell-numeric]=\"numeric\">\n  <ng-content></ng-content>\n</div>`,\n})\nexport class TdDataTableCellComponent {\n\n  /**\n   * numeric?: boolean\n   * Makes cell follow the numeric data-table specs.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-cell');\n  }\n\n}\n",
    "import { Component, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'table[td-data-table]',\n  styles: [`:host {\n  width: 100%;\n  position: relative;\n  border-spacing: 0;\n  overflow: hidden;\n  border-collapse: collapse; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableTableComponent {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table');\n  }\n\n}\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { TdDataTableSortingOrder, ITdDataTableColumn } from '../data-table.component';\n\n@Injectable()\nexport class TdDataTableService {\n\n  /**\n   * params:\n   * - data: any[]\n   * - searchTerm: string\n   * - ignoreCase: boolean = false\n   * - excludedColumns: string[] = []\n   *\n   * Searches [data] parameter for [searchTerm] matches and returns a new array with them.\n   */\n  filterData(data: any[], searchTerm: string, ignoreCase: boolean = false, excludedColumns?: string[]): any[] {\n    let filter: string = searchTerm ? (ignoreCase ? searchTerm.toLowerCase() : searchTerm) : '';\n    if (filter) {\n      data = data.filter((item: any) => {\n        const res: any = Object.keys(item).find((key: string) => {\n          if (!excludedColumns || excludedColumns.indexOf(key) === -1) {\n            const preItemValue: string = ('' + item[key]);\n            const itemValue: string = ignoreCase ? preItemValue.toLowerCase() : preItemValue;\n            return itemValue.indexOf(filter) > -1;\n          }\n        });\n        return !(typeof res === 'undefined');\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - sortBy: string\n   * - sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending\n   *\n   * Sorts [data] parameter by [sortBy] and [sortOrder] and returns the sorted data.\n   */\n  sortData(data: any[], sortBy: string, sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending): any[] {\n    if (sortBy) {\n      data = Array.from(data); // Change the array reference to trigger OnPush and not mutate original array\n      data.sort((a: any, b: any) => {\n        let compA: any = a[sortBy];\n        let compB: any = b[sortBy];\n        let direction: number = 0;\n        if (!Number.isNaN(Number.parseFloat(compA)) && !Number.isNaN(Number.parseFloat(compB))) {\n          direction = Number.parseFloat(compA) - Number.parseFloat(compB);\n        } else {\n          if (compA < compB) {\n            direction = -1;\n          } else if (compA > compB) {\n            direction = 1;\n          }\n        }\n        return direction * (sortOrder === TdDataTableSortingOrder.Descending ? -1 : 1);\n      });\n    }\n    return data;\n  }\n\n  /**\n   * params:\n   * - data: any[]\n   * - fromRow: number\n   * - toRow: : number\n   *\n   * Returns a section of the [data] parameter starting from [fromRow] and ending in [toRow].\n   */\n  pageData(data: any[], fromRow: number, toRow: number): any[] {\n    if (fromRow >= 1) {\n      data = data.slice(fromRow - 1, toRow);\n    }\n    return data;\n  }\n}\n\nexport function DATA_TABLE_PROVIDER_FACTORY(\n    parent: TdDataTableService): TdDataTableService {\n  return parent || new TdDataTableService();\n}\n\nexport const DATA_TABLE_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdDataTableService,\n  deps: [[new Optional(), new SkipSelf(), TdDataTableService]],\n  useFactory: DATA_TABLE_PROVIDER_FACTORY,\n};\n",
    "import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\nimport { TdDataTableComponent } from './data-table.component';\nimport { TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableCellComponent } from './data-table-cell/data-table-cell.component';\nimport { TdDataTableRowComponent, TdDataTableColumnRowComponent } from './data-table-row/data-table-row.component';\nimport { TdDataTableTableComponent } from './data-table-table/data-table-table.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { DATA_TABLE_PROVIDER } from './services/data-table.service';\n\nconst TD_DATA_TABLE: Type<any>[] = [\n  TdDataTableComponent,\n  TdDataTableTemplateDirective,\n\n  TdDataTableColumnComponent,\n  TdDataTableCellComponent,\n  TdDataTableRowComponent,\n  TdDataTableColumnRowComponent,\n  TdDataTableTableComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    MatIconModule,\n    MatPseudoCheckboxModule,\n  ],\n  declarations: [\n    TD_DATA_TABLE,\n  ],\n  exports: [\n    TD_DATA_TABLE,\n  ],\n  providers: [\n    DATA_TABLE_PROVIDER,\n  ],\n})\nexport class CovalentDataTableModule {\n\n}\n",
    "import { Component, Directive, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\n@Directive({selector: 'td-dialog-title'})\nexport class TdDialogTitleDirective {}\n\n@Directive({selector: 'td-dialog-content'})\nexport class TdDialogContentDirective {}\n\n@Directive({selector: 'td-dialog-actions'})\nexport class TdDialogActionsDirective {}\n\n@Component({\n  selector: 'td-dialog',\n  template: `<div class=\"td-dialog-wrapper\">\n  <h3 class=\"td-dialog-title\" *ngIf=\"dialogTitle.length > 0\">\n    <ng-content select=\"td-dialog-title\"></ng-content>\n  </h3>\n  <div class=\"td-dialog-content\" *ngIf=\"dialogContent.length > 0\">\n    <ng-content select=\"td-dialog-content\"></ng-content>\n  </div>\n  <div class=\"td-dialog-actions\" *ngIf=\"dialogActions.length > 0\">\n    <span class=\"td-dialog-spacer\"></span>\n    <ng-content select=\"td-dialog-actions\"></ng-content>\n  </div>\n</div>`,\n  styles: [`.td-dialog-title {\n  margin-top: 0;\n  margin-bottom: 20px; }\n\n.td-dialog-content {\n  margin-bottom: 16px; }\n\n.td-dialog-actions {\n  position: relative;\n  top: 16px;\n  left: 16px; }\n  ::ng-deep [dir='rtl'] .td-dialog-actions {\n    right: 16px;\n    left: auto; }\n\n:host {\n  display: block; }\n  :host .td-dialog-actions {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n    :host .td-dialog-actions .td-dialog-spacer {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n    :host .td-dialog-actions ::ng-deep button {\n      text-transform: uppercase;\n      margin-left: 8px;\n      padding-left: 8px;\n      padding-right: 8px;\n      min-width: 64px; }\n      [dir='rtl'] :host .td-dialog-actions ::ng-deep button {\n        margin-right: 8px;\n        margin-left: inherit; }\n`],\n})\nexport class TdDialogComponent implements AfterContentInit {\n\n  @ContentChildren(TdDialogTitleDirective) dialogTitle: QueryList<TdDialogTitleDirective>;\n  @ContentChildren(TdDialogContentDirective) dialogContent: QueryList<TdDialogContentDirective>;\n  @ContentChildren(TdDialogActionsDirective) dialogActions: QueryList<TdDialogActionsDirective>;\n\n  ngAfterContentInit(): void {\n    if (this.dialogTitle.length > 1) {\n      throw new Error('Duplicate td-dialog-title component at in td-dialog.');\n    }\n    if (this.dialogContent.length > 1) {\n      throw new Error('Duplicate td-dialog-content component at in td-dialog.');\n    }\n    if (this.dialogActions.length > 1) {\n      throw new Error('Duplicate td-dialog-actions component at in td-dialog.');\n    }\n  }\n\n}\n",
    "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-alert-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button color=\"accent\" (click)=\"close()\">{{closeButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-message {\n  word-break: break-word; }\n`],\n})\nexport class TdAlertDialogComponent {\n  title: string;\n  message: string;\n  closeButton: string = 'CLOSE';\n\n  constructor(private _dialogRef: MatDialogRef<TdAlertDialogComponent>) {}\n\n  close(): void {\n    this._dialogRef.close();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-confirm-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button\n            #closeBtn \n            (keydown.arrowright)=\"acceptBtn.focus()\"\n            (click)=\"cancel()\">{{cancelButton}}</button>\n    <button mat-button\n            color=\"accent\"\n            #acceptBtn\n            (keydown.arrowleft)=\"closeBtn.focus()\"\n            (click)=\"accept()\">{{acceptButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-message {\n  word-break: break-word; }\n`],\n})\nexport class TdConfirmDialogComponent {\n  title: string;\n  message: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  constructor(private _dialogRef: MatDialogRef<TdConfirmDialogComponent>) {}\n\n  cancel(): void {\n    this._dialogRef.close(false);\n  }\n\n  accept(): void {\n    this._dialogRef.close(true);\n  }\n}\n",
    "import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-prompt-dialog',\n  template: `<td-dialog>\n  <td-dialog-title *ngIf=\"title\">\n    {{title}}\n  </td-dialog-title>\n  <td-dialog-content>\n    <span class=\"td-dialog-message\">{{message}}</span>\n    <form #form=\"ngForm\" novalidate>\n      <div class=\"td-dialog-input-wrapper\">\n        <mat-form-field class=\"td-dialog-input\">\n          <input matInput\n                #input\n                (focus)=\"handleInputFocus()\"\n                (keydown.enter)=\"$event.preventDefault(); form.valid && accept()\"\n                [(ngModel)]=\"value\"\n                name=\"value\"\n                required/>\n        </mat-form-field>\n      </div>\n    </form>\n  </td-dialog-content>\n  <td-dialog-actions>\n    <button mat-button\n            #closeBtn \n            (keydown.arrowright)=\"acceptBtn.focus()\"\n            (click)=\"cancel()\">{{cancelButton}}</button>\n    <button mat-button\n            color=\"accent\"\n            #acceptBtn\n            (keydown.arrowleft)=\"closeBtn.focus()\"\n            [disabled]=\"!form.valid\"\n            (click)=\"accept()\">{{acceptButton}}</button>\n  </td-dialog-actions>\n</td-dialog>`,\n  styles: [`.td-dialog-input-wrapper {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n  .td-dialog-input-wrapper .td-dialog-input {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box; }\n\n.td-dialog-message {\n  word-break: break-word; }\n`],\n})\nexport class TdPromptDialogComponent implements AfterViewInit {\n  title: string;\n  message: string;\n  value: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  @ViewChild('input') _input: ElementRef;\n\n  constructor(private _dialogRef: MatDialogRef<TdPromptDialogComponent>) {}\n\n  ngAfterViewInit(): void {\n    // focus input once everything is rendered and good to go\n    Promise.resolve().then(() => {\n      (<HTMLInputElement>this._input.nativeElement).focus();\n    });\n  }\n\n  /**\n   * Method executed when input is focused\n   * Selects all text\n   */\n  handleInputFocus(): void {\n    (<HTMLInputElement>this._input.nativeElement).select();\n  }\n\n  cancel(): void {\n    this._dialogRef.close(undefined);\n  }\n\n  accept(): void {\n    this._dialogRef.close(this.value);\n  }\n}\n",
    "import { Injectable, ViewContainerRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { MatDialog, MatDialogRef, MatDialogConfig } from '@angular/material/dialog';\nimport { ComponentType } from '@angular/cdk/portal';\n\nimport { TdAlertDialogComponent } from '../alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from '../prompt-dialog/prompt-dialog.component';\n\nexport interface IDialogConfig extends MatDialogConfig {\n  title?: string;\n  message: string;\n}\n\nexport interface IAlertConfig extends IDialogConfig {\n  closeButton?: string;\n}\n\nexport interface IConfirmConfig extends IDialogConfig {\n  acceptButton?: string;\n  cancelButton?: string;\n}\n\nexport interface IPromptConfig extends IConfirmConfig {\n  value?: string;\n}\n\n@Injectable()\nexport class TdDialogService {\n\n  constructor(private _dialogService: MatDialog) {}\n\n  /**\n   * params:\n   * - component: ComponentType<T>\n   * - config: MatDialogConfig\n   * Wrapper function over the open() method in MatDialog.\n   * Opens a modal dialog containing the given component.\n   */\n  public open<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> {\n    return this._dialogService.open(component, config);\n  }\n\n  /**\n   * Wrapper function over the closeAll() method in MatDialog.\n   * Closes all of the currently-open dialogs.\n   */\n  public closeAll(): void {\n    this._dialogService.closeAll();\n  }\n\n  /**\n   * params:\n   * - config: IAlertConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     closeButton?: string;\n   * }\n   *\n   * Opens an alert dialog with the provided config.\n   * Returns an MatDialogRef<TdAlertDialogComponent> object.\n   */\n  public openAlert(config: IAlertConfig): MatDialogRef<TdAlertDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdAlertDialogComponent> =\n      this._dialogService.open(TdAlertDialogComponent, dialogConfig);\n    let alertDialogComponent: TdAlertDialogComponent = dialogRef.componentInstance;\n    alertDialogComponent.title = config.title;\n    alertDialogComponent.message = config.message;\n    if (config.closeButton) {\n      alertDialogComponent.closeButton = config.closeButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IConfirmConfig {\n   *     message: string;\n   *     title?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a confirm dialog with the provided config.\n   * Returns an MatDialogRef<TdConfirmDialogComponent> object.\n   */\n  public openConfirm(config: IConfirmConfig): MatDialogRef<TdConfirmDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdConfirmDialogComponent> =\n      this._dialogService.open(TdConfirmDialogComponent, dialogConfig);\n    let confirmDialogComponent: TdConfirmDialogComponent = dialogRef.componentInstance;\n    confirmDialogComponent.title = config.title;\n    confirmDialogComponent.message = config.message;\n    if (config.acceptButton) {\n      confirmDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      confirmDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  /**\n   * params:\n   * - config: IPromptConfig {\n   *     message: string;\n   *     title?: string;\n   *     value?: string;\n   *     viewContainerRef?: ViewContainerRef;\n   *     acceptButton?: string;\n   *     cancelButton?: string;\n   * }\n   *\n   * Opens a prompt dialog with the provided config.\n   * Returns an MatDialogRef<TdPromptDialogComponent> object.\n   */\n  public openPrompt(config: IPromptConfig): MatDialogRef<TdPromptDialogComponent> {\n    let dialogConfig: MatDialogConfig = this._createConfig(config);\n    let dialogRef: MatDialogRef<TdPromptDialogComponent> =\n      this._dialogService.open(TdPromptDialogComponent, dialogConfig);\n    let promptDialogComponent: TdPromptDialogComponent = dialogRef.componentInstance;\n    promptDialogComponent.title = config.title;\n    promptDialogComponent.message = config.message;\n    promptDialogComponent.value = config.value;\n    if (config.acceptButton) {\n      promptDialogComponent.acceptButton = config.acceptButton;\n    }\n    if (config.cancelButton) {\n      promptDialogComponent.cancelButton = config.cancelButton;\n    }\n    return dialogRef;\n  }\n\n  private _createConfig(config: IDialogConfig): MatDialogConfig {\n    let dialogConfig: MatDialogConfig = new MatDialogConfig();\n    dialogConfig.width = '400px';\n    Object.assign(dialogConfig, config);\n    return dialogConfig;\n  }\n\n}\n\nexport function DIALOG_PROVIDER_FACTORY(\n    parent: TdDialogService, dialog: MatDialog): TdDialogService {\n  return parent || new TdDialogService(dialog);\n}\n\nexport const DIALOG_PROVIDER: Provider = {\n  // If there is already service available, use that. Otherwise, provide a new one.\n  provide: TdDialogService,\n  deps: [[new Optional(), new SkipSelf(), TdDialogService], MatDialog],\n  useFactory: DIALOG_PROVIDER_FACTORY,\n};\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TdDialogComponent, TdDialogTitleDirective,\n         TdDialogActionsDirective, TdDialogContentDirective } from './dialog.component';\nimport { TdAlertDialogComponent } from './alert-dialog/alert-dialog.component';\nimport { TdConfirmDialogComponent } from './confirm-dialog/confirm-dialog.component';\nimport { TdPromptDialogComponent } from './prompt-dialog/prompt-dialog.component';\nimport { DIALOG_PROVIDER } from './services/dialog.service';\n\nconst TD_DIALOGS: Type<any>[] = [\n  TdAlertDialogComponent,\n  TdConfirmDialogComponent,\n  TdPromptDialogComponent,\n  TdDialogComponent,\n  TdDialogTitleDirective,\n  TdDialogActionsDirective,\n  TdDialogContentDirective,\n];\n\nconst TD_DIALOGS_ENTRY_COMPONENTS: Type<any>[] = [\n  TdAlertDialogComponent,\n  TdConfirmDialogComponent,\n  TdPromptDialogComponent,\n];\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatDialogModule,\n    MatInputModule,\n    MatButtonModule,\n  ],\n  declarations: [\n    TD_DIALOGS,\n  ],\n  exports: [\n    TD_DIALOGS,\n  ],\n  providers: [\n    DIALOG_PROVIDER,\n  ],\n  entryComponents: [\n    TD_DIALOGS_ENTRY_COMPONENTS,\n  ],\n})\nexport class CovalentDialogsModule {\n\n}\n",
    "import { Component, Directive, Input, Output, TemplateRef, ViewContainerRef, ContentChild,\n         ElementRef, Renderer2 } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport {\n  TdCollapseAnimation,\n  ICanDisable,\n  mixinDisabled,\n  ICanDisableRipple,\n  mixinDisableRipple,\n  TdRotateAnimation,\n} from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-expansion-panel-header]ng-template',\n})\nexport class TdExpansionPanelHeaderDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-expansion-panel-label]ng-template',\n})\nexport class TdExpansionPanelLabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-expansion-panel-sublabel]ng-template',\n})\nexport class TdExpansionPanelSublabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Component({\n  selector: 'td-expansion-summary',\n  template: '<ng-content></ng-content>',\n})\nexport class TdExpansionPanelSummaryComponent {}\n\nexport class TdExpansionPanelBase {}\n\n/* tslint:disable-next-line */\nexport const _TdExpansionPanelMixinBase = mixinDisableRipple(mixinDisabled(TdExpansionPanelBase));\n\n@Component({\n  selector: 'td-expansion-panel',\n  styles: [`:host {\n  display: block; }\n  :host .td-expansion-panel-header {\n    position: relative;\n    outline: none; }\n    :host .td-expansion-panel-header:focus:not(.mat-disabled), :host .td-expansion-panel-header:hover:not(.mat-disabled) {\n      cursor: pointer; }\n    :host .td-expansion-panel-header .td-expansion-panel-header-content {\n      height: 48px;\n      padding: 0 24px;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%; }\n      :host .td-expansion-panel-header .td-expansion-panel-header-content .td-expansion-label,\n      :host .td-expansion-panel-header .td-expansion-panel-header-content .td-expansion-sublabel {\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n  :host .td-expansion-content.ng-animating,\n  :host .td-expansion-summary.ng-animating {\n    overflow: hidden; }\n\n.td-expansion-label,\n.td-expansion-sublabel {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-right: 16px; }\n  ::ng-deep [dir='rtl'] .td-expansion-label, ::ng-deep [dir='rtl']\n  .td-expansion-sublabel {\n    margin-left: 16px;\n    margin-right: inherit; }\n`],\n  template: `<div class=\"td-expansion-panel-header\"\n      [class.mat-disabled]=\"disabled\"\n      matRipple\n      [matRippleDisabled]=\"disabled || disableRipple\"\n      [tabIndex]=\"disabled? -1 : 0\"\n      (keydown.enter)=\"clickEvent()\"\n      (click)=\"clickEvent()\">\n  <ng-template [cdkPortalHost]=\"expansionPanelHeader\"></ng-template>\n  <div class=\"td-expansion-panel-header-content\"\n        [class.mat-disabled]=\"disabled\"\n        *ngIf=\"!expansionPanelHeader\">\n    <div *ngIf=\"label || expansionPanelLabel\" class=\"td-expansion-label\">\n      <ng-template [cdkPortalHost]=\"expansionPanelLabel\"></ng-template>\n      <ng-template [ngIf]=\"!expansionPanelLabel\">{{label}}</ng-template>\n    </div>\n    <div *ngIf=\"sublabel || expansionPanelSublabel\" class=\"td-expansion-sublabel\">\n      <ng-template [cdkPortalHost]=\"expansionPanelSublabel\"></ng-template>\n      <ng-template [ngIf]=\"!expansionPanelSublabel\">{{sublabel}}</ng-template>\n    </div>\n    <mat-icon class=\"td-expand-icon\" *ngIf=\"!disabled\" [@tdRotate]=\"expand\">keyboard_arrow_down</mat-icon>\n  </div>\n</div>\n<div class=\"td-expansion-content\"\n      [@tdCollapse]=\"!expand\">\n  <ng-content></ng-content>\n</div>\n<div class=\"td-expansion-summary\"\n      [@tdCollapse]=\"expand\">\n  <ng-content select=\"td-expansion-summary\"></ng-content>\n</div>\n`,\n  inputs: ['disabled', 'disableRipple'],\n  animations: [\n    TdCollapseAnimation(),\n    TdRotateAnimation({ anchor: 'tdRotate' }),\n  ],\n})\nexport class TdExpansionPanelComponent extends _TdExpansionPanelMixinBase implements ICanDisable, ICanDisableRipple {\n\n  private _expand: boolean = false;\n\n  @ContentChild(TdExpansionPanelHeaderDirective) expansionPanelHeader: TdExpansionPanelHeaderDirective;\n  @ContentChild(TdExpansionPanelLabelDirective) expansionPanelLabel: TdExpansionPanelLabelDirective;\n  @ContentChild(TdExpansionPanelSublabelDirective) expansionPanelSublabel: TdExpansionPanelSublabelDirective;\n\n  /**\n   * label?: string\n   * Sets label of [TdExpansionPanelComponent] header.\n   * Defaults to 'Click to expand'\n   */\n  @Input() label: string;\n\n  /**\n   * sublabel?: string\n   * Sets sublabel of [TdExpansionPanelComponent] header.\n   */\n  @Input() sublabel: string;\n\n  /**\n   * expand?: boolean\n   * Toggles [TdExpansionPanelComponent] between expand/collapse.\n   */\n  @Input('expand')\n  set expand(expand: boolean) {\n    this._setExpand(coerceBooleanProperty(expand));\n  }\n  get expand(): boolean {\n    return this._expand;\n  }\n\n  /**\n   * expanded?: function\n   * Event emitted when [TdExpansionPanelComponent] is expanded.\n   */\n  @Output() expanded: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * collapsed?: function\n   * Event emitted when [TdExpansionPanelComponent] is collapsed.\n   */\n  @Output() collapsed: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-expansion-panel');\n  }\n\n  /**\n   * Method executed when [TdExpansionPanelComponent] is clicked.\n   */\n  clickEvent(): void {\n    this._setExpand(!this._expand);\n  }\n\n  /**\n   * Toggle expand state of [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  toggle(): boolean {\n    return this._setExpand(!this._expand);\n  }\n\n  /**\n   * Opens [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  open(): boolean {\n    return this._setExpand(true);\n  }\n\n  /**\n   * Closes [TdExpansionPanelComponent]\n   * retuns 'true' if successful, else 'false'.\n   */\n  close(): boolean {\n    return this._setExpand(false);\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v && this._expand) {\n      this._expand = false;\n      this._onCollapsed();\n    }\n  }\n\n  /**\n   * Method to change expand state internally and emit the [onExpanded] event if 'true' or [onCollapsed]\n   * event if 'false'. (Blocked if [disabled] is 'true')\n   */\n  private _setExpand(newExpand: boolean): boolean {\n    if (this.disabled) {\n      return false;\n    }\n    if (this._expand !== newExpand) {\n      this._expand = newExpand;\n      if (newExpand) {\n        this._renderer.addClass(this._elementRef.nativeElement, 'td-expanded');\n        this._onExpanded();\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, 'td-expanded');\n        this._onCollapsed();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private _onExpanded(): void {\n    this.expanded.emit(undefined);\n  }\n\n  private _onCollapsed(): void {\n    this.collapsed.emit(undefined);\n  }\n}\n",
    "import { Component, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'td-expansion-panel-group',\n  styles: [``],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdExpansionPanelGroupComponent {\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-expansion-panel-group');\n  }\n\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdExpansionPanelComponent, TdExpansionPanelHeaderDirective, TdExpansionPanelLabelDirective,\n         TdExpansionPanelSublabelDirective, TdExpansionPanelSummaryComponent } from './expansion-panel.component';\nimport { TdExpansionPanelGroupComponent } from './expansion-panel-group.component';\n\nconst TD_EXPANSION_PANEL: Type<any>[] = [\n  TdExpansionPanelGroupComponent,\n  TdExpansionPanelComponent,\n  TdExpansionPanelHeaderDirective,\n  TdExpansionPanelLabelDirective,\n  TdExpansionPanelSublabelDirective,\n  TdExpansionPanelSummaryComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatIconModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_EXPANSION_PANEL,\n  ],\n  exports: [\n    TD_EXPANSION_PANEL,\n  ],\n})\nexport class CovalentExpansionPanelModule {\n\n}\n",
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, Host, Optional } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: '[tdFileSelect]',\n})\nexport class TdFileSelectDirective {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be selected at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileSelect?: function\n   * Event emitted when a file or files are selected in host [HTMLInputElement].\n   * Emits a [FileList | File] object.\n   * Alternative to not use [(ngModel)].\n   */\n  @Output('fileSelect') onFileSelect: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  constructor(@Optional() @Host() private model: NgModel) {\n  }\n\n  /**\n   * Listens to 'change' host event to get [HTMLInputElement] files.\n   * Emits the 'onFileSelect' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Uses [(ngModel)] if declared, instead of emitting 'onFileSelect' event.\n   */\n  @HostListener('change', ['$event'])\n  onChange(event: Event): void {\n    if (event.target instanceof HTMLInputElement) {\n      let fileInputEl: HTMLInputElement = (<HTMLInputElement>event.target);\n      let files: FileList = fileInputEl.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.model ? this.model.update.emit(value) : this.onFileSelect.emit(value);\n      }\n    }\n  }\n}\n",
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, ElementRef, Renderer2 } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nexport class TdFileDropBase {}\n\n/* tslint:disable-next-line */\nexport const _TdFileDropMixinBase = mixinDisabled(TdFileDropBase);\n\n@Directive({\n  selector: '[tdFileDrop]',\n  inputs: ['disabled'],\n})\nexport class TdFileDropDirective extends _TdFileDropMixinBase implements ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be dropped at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileDrop?: function\n   * Event emitted when a file or files are dropped in host element after being validated.\n   * Emits a [FileList | File] object.\n   */\n  @Output('fileDrop') onFileDrop: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  /**\n   * Binds native 'disabled' attribute if [disabled] property is 'true'.\n   */\n  @HostBinding('attr.disabled')\n  get disabledBinding(): string {\n    return this.disabled ? '' : undefined;\n  }\n\n  constructor(private _renderer: Renderer2, private _element: ElementRef) {\n    super();\n  }\n\n  /**\n   * Listens to 'drop' host event to get validated transfer items.\n   * Emits the 'onFileDrop' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Stops event propagation and default action from browser for 'drop' event.\n   */\n  @HostListener('drop', ['$event'])\n  onDrop(event: Event): void {\n    if (!this.disabled) {\n      let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n      let files: FileList = transfer.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.onFileDrop.emit(value);\n      }\n    }\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragover' host event to validate transfer items.\n   * Checks if 'multiple' attr exists in host to allow multiple file drops.\n   * Stops event propagation and default action from browser for 'dragover' event.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: Event): void {\n    let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n    transfer.dropEffect = this._typeCheck(transfer.types);\n    if (this.disabled || (!this._multiple &&\n      ((transfer.items && transfer.items.length > 1) || (<any>transfer).mozItemCount > 1))) {\n      transfer.dropEffect = 'none';\n    } else {\n      transfer.dropEffect = 'copy';\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragenter' host event to add animation class 'drop-zone' which can be overriden in host.\n   * Stops event propagation and default action from browser for 'dragenter' event.\n   */\n  @HostListener('dragenter', ['$event'])\n  onDragEnter(event: Event): void {\n    if (!this.disabled) {\n      this._renderer.addClass(this._element.nativeElement, 'drop-zone');\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragleave' host event to remove animation class 'drop-zone'.\n   * Stops event propagation and default action from browser for 'dragleave' event.\n   */\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: Event): void {\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Validates if the transfer item types are 'Files'.\n   */\n  private _typeCheck(types: string[] | DOMStringList): string {\n    let dropEffect: string = 'none';\n    if (types) {\n      if (((<any>types).contains && (<any>types).contains('Files'))\n      || ((<any>types).indexOf && (<any>types).indexOf('Files') !== -1)) {\n        dropEffect = 'copy';\n      }\n    }\n    return dropEffect;\n  }\n\n  private _stopEvent(event: Event): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n",
    "import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild,\n         ElementRef, Renderer2, TemplateRef, ViewContainerRef, ChangeDetectorRef, forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-file-input-label]ng-template',\n})\nexport class TdFileInputLabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdFileInputBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileInputMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileInputBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileInputComponent),\n    multi: true,\n  }],\n  selector: 'td-file-input',\n  inputs: ['disabled', 'value'],\n  styles: [`:host {\n  /**\n  * Class that is added ondragenter by the [TdFileDrop] directive.\n  */ }\n  :host .td-file-input {\n    padding-left: 8px;\n    padding-right: 8px; }\n  :host input.td-file-input-hidden {\n    display: none; }\n  :host .drop-zone {\n    border-radius: 3px; }\n    :host .drop-zone * {\n      pointer-events: none; }\n`],\n  template: `<div>\n  <button mat-raised-button\n          class=\"td-file-input\"\n          type=\"button\"\n          [color]=\"color\" \n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          (keyup.enter)=\"fileInput.click()\"\n          (click)=\"fileInput.click()\"\n          (fileDrop)=\"handleSelect($event)\"\n          tdFileDrop>\n    <ng-content></ng-content>\n  </button>\n  <input #fileInput \n          class=\"td-file-input-hidden\" \n          type=\"file\"\n          [attr.accept]=\"accept\"                \n          (fileSelect)=\"handleSelect($event)\"\n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          tdFileSelect>\n</div>`,\n})\nexport class TdFileInputComponent extends _TdFileInputMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /** The native `<input type=\"file\"> element */\n  @ViewChild('fileInput') _inputElement: ElementRef;\n  get inputElement(): HTMLInputElement {\n    return this._inputElement.nativeElement;\n  }\n\n  /**\n   * color?: string\n   * Sets button color. Uses same color palette accepted as [MatButton].\n   */\n  @Input('color') color: string;\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileInputComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted a file is selected\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  constructor(private _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(files: File | FileList): void {\n    this.writeValue(files);\n    this.onSelect.emit(files);\n  }\n\n  /**\n   * Used to clear the selected files from the [TdFileInputComponent].\n   */\n  clear(): void {\n    this.writeValue(undefined);\n    this._renderer.setProperty(this.inputElement, 'value', '');\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.clear();\n    }\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild, ContentChild, ChangeDetectorRef,\n  forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from '../file-input/file-input.component';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport class TdFileUploadBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileUploadMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileUploadBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileUploadComponent),\n    multi: true,\n  }],\n  selector: 'td-file-upload',\n  inputs: ['disabled', 'value'],\n  styles: [`.td-file-upload {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.td-file-upload-cancel {\n  height: 24px;\n  width: 24px;\n  position: relative;\n  top: 24px;\n  left: -12px; }\n  ::ng-deep [dir='rtl'] .td-file-upload-cancel {\n    right: -12px;\n    left: 0; }\n  .td-file-upload-cancel mat-icon {\n    border-radius: 12px;\n    vertical-align: baseline; }\n\n/**\n* Class that is added ondragenter by the [TdFileDrop] directive.\n*/\n.drop-zone {\n  border-radius: 3px; }\n  .drop-zone * {\n    pointer-events: none; }\n`],\n  template: `<td-file-input *ngIf=\"!value\"\n               [(ngModel)]=\"value\"\n               [multiple]=\"multiple\"\n               [disabled]=\"disabled\"\n               [accept]=\"accept\"\n               [color]=\"defaultColor\"\n               (select)=\"handleSelect($event)\">\n  <ng-template [cdkPortalHost]=\"inputLabel\" [ngIf]=\"true\"></ng-template>\n</td-file-input>\n<div *ngIf=\"value\">\n  <button #fileUpload\n          class=\"td-file-upload\"\n          mat-raised-button\n          type=\"button\"\n          [color]=\"activeColor\"\n          (keyup.delete)=\"cancel()\"\n          (keyup.backspace)=\"cancel()\"\n          (keyup.escape)=\"cancel()\"\n          (click)=\"uploadPressed()\"> \n    <ng-content></ng-content>\n  </button>\n  <button mat-icon-button\n          type=\"button\"\n          class=\"td-file-upload-cancel\"\n          [color]=\"cancelColor\"            \n          (click)=\"cancel()\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n</div>`,\n})\nexport class TdFileUploadComponent extends _TdFileUploadMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n  private _required: boolean = false;\n\n  @ViewChild(TdFileInputComponent) fileInput: TdFileInputComponent;\n\n  @ContentChild(TdFileInputLabelDirective) inputLabel: TdFileInputLabelDirective;\n\n  /**\n   * defaultColor?: string\n   * Sets browse button color. Uses same color palette accepted as [MatButton] and defaults to 'primary'.\n   */\n  @Input('defaultColor') defaultColor: string = 'primary';\n\n  /**\n   * activeColor?: string\n   * Sets upload button color. Uses same color palette accepted as [MatButton] and defaults to 'accent'.\n   */\n  @Input('activeColor') activeColor: string = 'accent';\n\n  /**\n   * cancelColor?: string\n   * Sets cancel button color. Uses same color palette accepted as [MatButton] and defaults to 'warn'.\n   */\n  @Input('cancelColor') cancelColor: string = 'warn';\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileUploadComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * required?: boolean\n   * Forces at least one file upload.\n   * Defaults to 'false'\n   */\n  @Input('required')\n  set required(required: boolean) {\n    this._required = coerceBooleanProperty(required);\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted when a file is selected.\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * upload?: function\n   * Event emitted when upload button is clicked.\n   * Emits a [File | FileList] object.\n   */\n  @Output('upload') onUpload: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * cancel?: function\n   * Event emitted when cancel button is clicked.\n   */\n  @Output('cancel') onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(_changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when upload button is clicked.\n   */\n  uploadPressed(): void {\n    if (this.value) {\n      this.onUpload.emit(this.value);\n    }\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(value: File | FileList): void {\n    this.value = value;\n    this.onSelect.emit(value);\n  }\n\n  /**\n   * Methods executed when cancel button is clicked.\n   * Clears files.\n   */\n  cancel(): void {\n    this.value = undefined;\n    this.onCancel.emit(undefined);\n    // check if the file input is rendered before clearing it\n    if (this.fileInput) {\n      this.fileInput.clear();\n    }\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.cancel();\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nexport interface IUploadOptions {\n  url: string;\n  method: 'post' | 'put';\n  file?: File;\n  headers?: {[key: string]: string};\n  formData?: FormData;\n}\n\n@Injectable()\nexport class TdFileService {\n\n  private _progressSubject: Subject<number> = new Subject<number>();\n  private _progressObservable: Observable<number>;\n\n  /**\n   * Gets progress observable to keep track of the files being uploaded.\n   * Needs to be supported by backend.\n   */\n  get progress(): Observable<number> {\n    return this._progressObservable;\n  }\n\n  constructor() {\n    this._progressObservable = this._progressSubject.asObservable();\n  }\n\n  /**\n   * params:\n   * - options: IUploadOptions {\n   *     url: string,\n   *     method: 'post' | 'put',\n   *     file?: File,\n   *     headers?: {[key: string]: string},\n   *     formData?: FormData\n   * }\n   *\n   * Uses underlying [XMLHttpRequest] to upload a file to a url.\n   * Will be depricated when angular fixes [Http] to allow [FormData] as body.\n   */\n  upload(options: IUploadOptions): Observable<any> {\n    return new Observable<any>((subscriber: Subscriber<any>) => {\n      let xhr: XMLHttpRequest = new XMLHttpRequest();\n      let formData: FormData = new FormData();\n\n      if (options.file !== undefined) {\n        formData.append('file', options.file);\n      } else if (options.formData !== undefined) {\n        formData = options.formData;\n      } else {\n        return subscriber.error('For [IUploadOptions] you have to set either the [file] or the [formData] property.');\n      }\n\n      xhr.upload.onprogress = (event: ProgressEvent) => {\n        let progress: number = 0;\n        if (event.lengthComputable) {\n          progress = Math.round(event.loaded / event.total * 100);\n        }\n        this._progressSubject.next(progress);\n      };\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            subscriber.next(xhr.response);\n            subscriber.complete();\n          } else {\n            subscriber.error(xhr.response);\n          }\n        }\n      };\n\n      xhr.open(options.method, options.url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      if (options.headers) {\n        for (let key in options.headers) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        }\n      }\n\n      xhr.send(formData);\n    });\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TdFileSelectDirective } from './directives/file-select.directive';\nimport { TdFileDropDirective } from './directives/file-drop.directive';\nimport { TdFileUploadComponent } from './file-upload/file-upload.component';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from './file-input/file-input.component';\nimport { TdFileService } from './services/file.service';\n\nconst TD_FILE: Type<any>[] = [\n  TdFileSelectDirective,\n  TdFileDropDirective,\n  TdFileUploadComponent,\n  TdFileInputComponent,\n  TdFileInputLabelDirective,\n];\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_FILE,\n  ],\n  exports: [\n    TD_FILE,\n  ],\n  providers: [\n    TdFileService,\n  ],\n})\nexport class CovalentFileModule {\n\n}\n",
    "import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';\nimport { Dir } from '@angular/cdk/bidi';\nimport { TdCollapseAnimation } from '@covalent/core/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'td-json-formatter',\n  styles: [`:host {\n  display: block; }\n\n.td-json-formatter-wrapper {\n  padding-top: 2px;\n  padding-bottom: 2px; }\n  .td-json-formatter-wrapper .td-key {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    .td-json-formatter-wrapper .td-key.td-key-node:hover {\n      cursor: pointer; }\n  .td-json-formatter-wrapper .td-object-children.ng-animating {\n    overflow: hidden; }\n  .td-json-formatter-wrapper .td-object-children .td-key,\n  .td-json-formatter-wrapper .td-object-children .td-object-children {\n    padding-left: 24px; }\n    ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .td-object-children .td-key, ::ng-deep [dir='rtl']\n    .td-json-formatter-wrapper .td-object-children .td-object-children {\n      padding-right: 24px;\n      padding-left: 0; }\n    .td-json-formatter-wrapper .td-object-children .td-key.td-key-leaf,\n    .td-json-formatter-wrapper .td-object-children .td-object-children.td-key-leaf {\n      padding-left: 48px; }\n      ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .td-object-children .td-key.td-key-leaf, ::ng-deep [dir='rtl']\n      .td-json-formatter-wrapper .td-object-children .td-object-children.td-key-leaf {\n        padding-right: 48px;\n        padding-left: 0; }\n  .td-json-formatter-wrapper .value {\n    margin-left: 5px; }\n    ::ng-deep [dir='rtl'] .td-json-formatter-wrapper .value {\n      padding-right: 5px;\n      padding-left: 0; }\n    .td-json-formatter-wrapper .value .td-empty {\n      opacity: 0.5;\n      text-decoration: line-through; }\n    .td-json-formatter-wrapper .value .string {\n      word-break: break-word; }\n    .td-json-formatter-wrapper .value .date {\n      word-break: break-word; }\n`],\n  template: `<div class=\"td-json-formatter-wrapper\">\n  <a class=\"td-key\"\n     [class.td-key-node]=\"hasChildren()\"\n     [class.td-key-leaf]=\"!hasChildren()\"\n     [tabIndex]=\"isObject()? 0 : -1\"\n     (keydown.enter)=\"toggle()\"\n     (click)=\"toggle()\">\n    <mat-icon class=\"td-node-icon\" *ngIf=\"hasChildren()\">{{open? 'keyboard_arrow_down' : (isRTL ? 'keyboard_arrow_left' : 'keyboard_arrow_right')}}</mat-icon>\n    <span *ngIf=\"key\" class=\"key\">{{key}}:</span>\n    <span class=\"value\">\n      <span [class.td-empty]=\"!hasChildren()\" *ngIf=\"isObject()\" [matTooltip]=\"getPreview()\" matTooltipPosition=\"after\">\n        <span class=\"td-object-name\">{{getObjectName()}}</span>\n        <span class=\"td-array-length\" *ngIf=\"isArray()\">[{{data.length}}]</span>\n      </span>\n      <span *ngIf=\"!isObject()\" [class]=\"getType(data)\">{{getValue(data)}}</span>\n    </span>\n  </a>\n  <div class=\"td-object-children\" [@tdCollapse]=\"!(hasChildren() && open)\">\n    <ng-template let-key ngFor [ngForOf]=\"children\">\n      <td-json-formatter [key]=\"key\" [data]=\"data[key]\" [levelsOpen]=\"levelsOpen - 1\"></td-json-formatter>\n    </ng-template>\n  </div>\n</div>`,\n  animations: [\n    TdCollapseAnimation(),\n  ],\n})\nexport class TdJsonFormatterComponent {\n\n  /**\n   * Max length for property names. Any names bigger than this get trunctated.\n   */\n  private static KEY_MAX_LENGTH: number = 30;\n\n  /**\n   * Max length for preview string. Any names bigger than this get trunctated.\n   */\n  private static PREVIEW_STRING_MAX_LENGTH: number = 80;\n\n  /**\n   * Max tooltip preview elements.\n   */\n  private static PREVIEW_LIMIT: number = 5;\n\n  private _key: string;\n  private _data: any;\n  private _children: string[];\n  private _open: boolean = false;\n  private _levelsOpen: number = 0;\n\n  /**\n   * levelsOpen?: number\n   * Levels opened by default when JS object is formatted and rendered.\n   */\n  @Input('levelsOpen')\n  set levelsOpen(levelsOpen: number) {\n    if (!Number.isInteger(levelsOpen)) {\n      throw new Error('[levelsOpen] needs to be an integer.');\n    }\n    this._levelsOpen = levelsOpen;\n    this._open = levelsOpen > 0;\n  }\n  get levelsOpen(): number {\n    return this._levelsOpen;\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * key?: string\n   * Tag to be displayed next to formatted object.\n   */\n  @Input('key')\n  set key(key: string) {\n    this._key = key;\n  }\n  get key(): string {\n    let elipsis: string = this._key && this._key.length > TdJsonFormatterComponent.KEY_MAX_LENGTH ? '…' : '';\n    return this._key ? this._key.substring(0, TdJsonFormatterComponent.KEY_MAX_LENGTH) + elipsis : this._key;\n  }\n\n  /**\n   * data: any\n   * JS object to be formatted.\n   */\n  @Input('data')\n  set data(data: any) {\n    this._data = data;\n    this.parseChildren();\n  }\n  get data(): any {\n    return this._data;\n  }\n\n  get children(): string[] {\n    return this._children;\n  }\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Dir) {\n  }\n\n  /**\n   * Refreshes json-formatter and rerenders [data]\n   */\n  refresh(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Toggles collapse/expanded state of component.\n   */\n  toggle(): void {\n    this._open = !this._open;\n  }\n\n  isObject(): boolean {\n    return this.getType(this._data) === 'object';\n  }\n\n  isArray(): boolean {\n    return Array.isArray(this._data);\n  }\n\n  hasChildren(): boolean {\n    return this._children && this._children.length > 0;\n  }\n\n  /**\n   * Gets parsed value depending on value type.\n   */\n  getValue(value: any): string {\n    let type: string = this.getType(value);\n    if (type === 'undefined' || (type === 'null')) {\n      return type;\n    } else if (type === 'date') {\n      value = new Date(value).toString();\n    } else if (type === 'string') {\n      value = '\"' + value + '\"';\n    } else if (type === 'function') {\n      // Remove content of the function\n      return value.toString()\n          .replace(/[\\r\\n]/g, '')\n          .replace(/\\{.*\\}/, '') + '{…}';\n    } else if (Array.isArray(value)) {\n      return this.getObjectName() + ' [' + value.length + ']';\n    }\n    return value;\n  }\n\n  /**\n   * Gets type of object.\n   * returns 'null' if object is null and 'date' if value is object and can be parsed to a date.\n   */\n  getType(object: any): string {\n    if (typeof object === 'object') {\n      if (!object) {\n        return 'null';\n      }\n      if (Array.isArray(object)) {\n        return 'object';\n      }\n      let date: Date = new Date(object);\n      if (Object.prototype.toString.call(date) === '[object Date]') {\n        if (!Number.isNaN(date.getTime())) {\n          return 'date';\n        }\n      }\n    }\n    return typeof object;\n  }\n\n  /**\n   * Generates string representation depending if its an object or function.\n   * see: http://stackoverflow.com/a/332429\n   */\n  getObjectName(): string {\n    let object: any = this._data;\n    if (this.isObject() && !object.constructor) {\n        return 'Object';\n    }\n    let funcNameRegex: RegExp = /function (.{1,})\\(/;\n    let results: RegExpExecArray = (funcNameRegex).exec((object).constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Creates preview of nodes children to render in tooltip depending if its an array or an object.\n   */\n  getPreview(): string {\n    let previewData: string[];\n    let startChar: string = '{ ';\n    let endChar: string = ' }';\n    if (this.isArray()) {\n      let previewArray: any[] = this._data.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewArray.map((obj: any) => {\n        return this.getValue(obj);\n      });\n      startChar = '[';\n      endChar = ']';\n    } else {\n      let previewKeys: string[] = this._children.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewKeys.map((key: string) => {\n        return key + ': ' + this.getValue(this._data[key]);\n      });\n    }\n    let previewString: string =  previewData.join(', ');\n    let ellipsis: string = previewData.length >= TdJsonFormatterComponent.PREVIEW_LIMIT ||\n                           previewString.length > TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH ? '…' : '';\n    return startChar + previewString.substring(0, TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH) +\n           ellipsis + endChar;\n  }\n\n  private parseChildren(): void {\n    if (this.isObject()) {\n      this._children = [];\n      for (let key in this._data) {\n        this._children.push(key);\n      }\n    }\n  }\n\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdJsonFormatterComponent } from './json-formatter.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatIconModule,\n  ],\n  declarations: [\n    TdJsonFormatterComponent,\n  ],\n  exports: [\n    TdJsonFormatterComponent,\n  ],\n})\nexport class CovalentJsonFormatterModule {\n\n}\n",
    "import { Component, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from './layout-toggle.class';\n\n@Component({\n  selector: 'td-layout',\n  styles: [`:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host ::ng-deep > mat-sidenav-container > mat-sidenav {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n`],\n  template: `<mat-sidenav-container fullscreen>\n  <mat-sidenav #sidenav\n              class=\"td-layout-sidenav\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\"\n              [disableClose]=\"disableClose\">\n    <ng-content select=\"td-navigation-drawer\"></ng-content>\n    <ng-content select=\"[td-sidenav-content]\"></ng-content>\n  </mat-sidenav>\n  <ng-content></ng-content>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"over\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'over';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"false\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = false;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"320px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '320px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nexport interface ILayoutTogglable {\n  opened: boolean;\n  sidenav: MatSidenav;\n  toggle(): Promise<void>;\n  open(): Promise<void>;\n  close(): Promise<void>;\n}\n\nexport class LayoutToggleBase { }\n\n/* tslint:disable-next-line */\nexport const _TdLayoutToggleMixinBase = mixinDisabled(LayoutToggleBase);\n\nexport abstract class LayoutToggle extends _TdLayoutToggleMixinBase implements AfterViewInit, OnDestroy, ICanDisable {\n\n  private _toggleSubs: Subscription;\n\n  private _initialized: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened')\n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    this._toggleSubs = this._layout.sidenav._animationStarted.subscribe(() => {\n      this._toggleVisibility();\n    });\n    // execute toggleVisibility since the onOpenStart and onCloseStart\n    // methods might not be executed always when the element is rendered\n    this._toggleVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._toggleSubs) {\n      this._toggleSubs.unsubscribe();\n      this._toggleSubs = undefined;\n    }\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      this.onClick();\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout.sidenav.opened && this._hideWhenOpened) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n    }\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutComponent } from './layout.component';\nimport { LayoutToggle } from './layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutToggle]',\n})\nexport class TdLayoutToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutToggle') \n  set tdLayoutToggle(tdLayoutToggle: boolean) {\n    this.disabled = !(<any>tdLayoutToggle === '' || tdLayoutToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutClose]',\n})\nexport class TdLayoutCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutClose') \n  set tdLayoutClose(tdLayoutClose: boolean) {\n    this.disabled = !(<any>tdLayoutClose === '' || tdLayoutClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutOpen]',\n})\nexport class TdLayoutOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutOpen') \n  set tdLayoutClose(tdLayoutOpen: boolean) {\n    this.disabled = !(<any>tdLayoutOpen === '' || tdLayoutOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styles: [`.td-menu-button {\n  margin-left: 0; }\n  ::ng-deep [dir='rtl'] .td-menu-button {\n    margin-right: 0;\n    margin-left: 6px; }\n\n:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host .td-layout-nav-wrapper {\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    margin: 0;\n    width: 100%;\n    min-height: 100%;\n    height: 100%; }\n    :host .td-layout-nav-wrapper .td-layout-nav-toolbar-content {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start; }\n    :host .td-layout-nav-wrapper .td-layout-nav-content {\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch; }\n`],\n  template: `<div class=\"td-layout-nav-wrapper\">\n  <mat-toolbar [color]=\"color\">\n    <ng-content select=\"[td-menu-button]\"></ng-content>\n    <span *ngIf=\"icon || logo || toolbarTitle\"\n          [class.cursor-pointer]=\"routerEnabled\"\n          (click)=\"handleNavigationClick()\"\n          class=\"td-layout-nav-toolbar-content\">\n      <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n      <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n      <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n    </span>\n    <ng-content select=\"[td-toolbar-content]\"></ng-content>\n  </mat-toolbar>\n  <div class=\"td-layout-nav-content\" cdkScrollable>\n    <ng-content></ng-content>\n  </div>\n  <ng-content select=\"td-layout-footer\"></ng-content>\n</div>\n`,\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n",
    "import { Component, Input, ViewChild, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-nav-list',\n  styles: [`:host {\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1; }\n  :host .td-layout-nav-list-wrapper {\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    position: relative;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-toolbar-content {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-content {\n      text-align: start;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      display: block;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-main {\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      margin: 0;\n      width: 100%;\n      min-height: 100%;\n      height: 100%;\n      position: relative;\n      overflow: auto; }\n      :host .td-layout-nav-list-wrapper .td-layout-nav-list-main .td-layout-nav-list-content {\n        display: block;\n        position: relative;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n    :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n      :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opened, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opening, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closed, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closing {\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-nav-list {\n  /* Ensure the left sidenav is a flex column & 100% height */ }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > .mat-drawer-content {\n    -webkit-box-flex: 1;\n        -ms-flex-positive: 1;\n            flex-grow: 1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > mat-sidenav {\n    -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n`],\n  template: `<div class=\"td-layout-nav-list-wrapper\">\n  <mat-sidenav-container fullscreen class=\"td-layout-nav-list\">\n    <mat-sidenav #sidenav\n                position=\"start\"\n                [mode]=\"mode\"\n                [opened]=\"opened\"\n                [disableClose]=\"disableClose\"\n                [style.max-width]=\"sidenavWidth\"\n                [style.min-width]=\"sidenavWidth\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-menu-button]\"></ng-content>\n        <span *ngIf=\"icon || logo || toolbarTitle\"\n              class=\"td-layout-nav-list-toolbar-content\"\n              [class.cursor-pointer]=\"routerEnabled\"\n              (click)=\"handleNavigationClick()\">\n          <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n          <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n          <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n        </span>\n        <ng-content select=\"[td-sidenav-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content select=\"[td-sidenav-content]\"></ng-content>\n      </div>\n    </mat-sidenav>\n    <div class=\"td-layout-nav-list-main\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\"td-layout-footer-inner\"></ng-content>\n    </div>\n  </mat-sidenav-container>\n</div>\n<ng-content select=\"td-layout-footer\"></ng-content>`,\n})\nexport class TdLayoutNavListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"350px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '350px';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutNavListComponent } from './layout-nav-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutNavListToggle]',\n})\nexport class TdLayoutNavListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListToggle') \n  set tdLayoutNavListToggle(tdLayoutNavListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutNavListToggle === '' || tdLayoutNavListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListClose]',\n})\nexport class TdLayoutNavListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutNavListClose') \n  set tdLayoutNavListClose(tdLayoutNavListClose: boolean) {\n    this.disabled = !(<any>tdLayoutNavListClose === '' || tdLayoutNavListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListOpen]',\n})\nexport class TdLayoutNavListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListOpen') \n  set tdLayoutNavListOpen(tdLayoutNavListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutNavListOpen === '' || tdLayoutNavListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'td-layout-card-over',\n  styles: [`:host {\n  position: relative;\n  display: block;\n  z-index: 2;\n  width: 100%;\n  min-height: 100%;\n  height: 100%; }\n  :host [td-after-card] {\n    display: block; }\n\n.td-layout-card-over-wrapper {\n  margin: -64px;\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%; }\n  @media (min-width: 600px) {\n    .td-layout-card-over-wrapper {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: start;\n          -ms-flex-align: start;\n              align-items: flex-start;\n      -ms-flex-line-pack: start;\n          align-content: flex-start;\n      -webkit-box-pack: center;\n          -ms-flex-pack: center;\n              justify-content: center; }\n      .td-layout-card-over-wrapper .td-layout-card-over {\n        max-height: 100%;\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box; } }\n  @media (max-width: 599px) {\n    .td-layout-card-over-wrapper .td-layout-card-over {\n      max-width: 100% !important; } }\n`],\n  template: `<mat-toolbar [color]=\"color\">\n</mat-toolbar>\n<div class=\"td-layout-card-over-wrapper\">\n  <div class=\"td-layout-card-over\"\n        [style.max-width.%]=\"cardWidth\"\n        [style.flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-ms-flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-webkit-box-flex]=\"1\">\n    <mat-card>\n      <mat-card-title *ngIf=\"cardTitle\">{{cardTitle}}</mat-card-title>\n      <mat-card-subtitle *ngIf=\"cardSubtitle\">{{cardSubtitle}}</mat-card-subtitle>\n      <mat-divider *ngIf=\"cardTitle || cardSubtitle\"></mat-divider>\n      <ng-content></ng-content>\n    </mat-card>\n    <ng-content select=\"[td-after-card]\"></ng-content>\n  </div>\n</div>\n`,\n})\nexport class TdLayoutCardOverComponent {\n\n  /**\n   * cardTitle?: string\n   *\n   * Title set in card.\n   */\n  @Input('cardTitle') cardTitle: string;\n\n  /**\n   * cardSubtitle?: string\n   *\n   * Subtitle set in card.\n   */\n  @Input('cardSubtitle') cardSubtitle: string;\n\n  /**\n   * cardWidth?: string\n   *\n   * Card flex width in %.\n   * Defaults to 70%.\n   */\n  @Input('cardWidth') cardWidth: number = 70;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n}\n",
    "import { Component, Directive, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-manage-list',\n  styles: [`:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host mat-sidenav-container.td-layout-manage-list {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1; }\n    :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opened, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opening, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closed, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closing {\n      -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2);\n              box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2); }\n  :host .td-layout-manage-list-sidenav {\n    text-align: start;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    display: block;\n    position: relative;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n  :host .td-layout-manage-list-main {\n    margin: 0;\n    width: 100%;\n    min-height: 100%;\n    height: 100%;\n    position: relative;\n    overflow: auto;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n    :host .td-layout-manage-list-main .td-layout-manage-list-content {\n      display: block;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-manage-list {\n  /* Ensure the left sidenav is a flex column & 100% height */ }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > .mat-drawer-content {\n    -webkit-box-flex: 1;\n        -ms-flex-positive: 1;\n            flex-grow: 1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > mat-sidenav {\n    -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n\n:host ::ng-deep mat-nav-list a[mat-list-item] .mat-list-item-content {\n  font-size: 14px; }\n\n:host ::ng-deep .mat-toolbar {\n  font-weight: 400; }\n`],\n  template: `<mat-sidenav-container fullscreen class=\"td-layout-manage-list\">\n  <mat-sidenav #sidenav\n              position=\"start\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [disableClose]=\"disableClose\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\">\n    <ng-content select=\"mat-toolbar[td-sidenav-content]\"></ng-content>\n    <div class=\"td-layout-manage-list-sidenav\" cdkScrollable>\n      <ng-content select=\"[td-sidenav-content]\"></ng-content>\n    </div>\n  </mat-sidenav>\n  <div class=\"td-layout-manage-list-main\">\n    <ng-content select=\"mat-toolbar\"></ng-content>\n    <div class=\"td-layout-manage-list-content\" cdkScrollable>\n      <ng-content></ng-content>\n    </div>\n    <ng-content select=\"td-layout-footer-inner\"></ng-content>\n  </div>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutManageListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"257px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '257px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutManageListComponent } from './layout-manage-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutManageListToggle]',\n})\nexport class TdLayoutManageListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListToggle') \n  set tdLayoutManageListToggle(tdLayoutManageListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutManageListToggle === '' || tdLayoutManageListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListClose]',\n})\nexport class TdLayoutManageListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutManageListClose') \n  set tdLayoutManageListClose(tdLayoutManageListClose: boolean) {\n    this.disabled = !(<any>tdLayoutManageListClose === '' || tdLayoutManageListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListOpen]',\n})\nexport class TdLayoutManageListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListOpen') \n  set tdLayoutManageListOpen(tdLayoutManageListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutManageListOpen === '' || tdLayoutManageListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component, Directive, Input, ContentChildren, OnInit, OnDestroy, forwardRef, Inject,\n         QueryList, SecurityContext, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SafeResourceUrl, SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLayoutComponent } from '../layout.component';\n\nimport { TdCollapseAnimation } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-navigation-drawer-menu]',\n})\nexport class TdNavigationDrawerMenuDirective {\n\n}\n\n@Directive({\n  selector: '[td-navigation-drawer-toolbar]',\n})\nexport class TdNavigationDrawerToolbarDirective {\n\n}\n\n@Component({\n  selector: 'td-navigation-drawer',\n  styles: [`:host {\n  width: 100%; }\n  :host .td-navigation-drawer-content.ng-animating,\n  :host .td-navigation-drawer-menu-content.ng-animating {\n    overflow: hidden; }\n  :host mat-toolbar {\n    padding: 16px; }\n    :host mat-toolbar.td-toolbar-background {\n      background-repeat: no-repeat;\n      background-size: cover; }\n    :host mat-toolbar.td-nagivation-drawer-toolbar {\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      height: auto !important;\n      display: block !important; }\n    :host mat-toolbar .td-navigation-drawer-toolbar-content {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start; }\n    :host mat-toolbar .td-navigation-drawer-menu-toggle {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex; }\n      :host mat-toolbar .td-navigation-drawer-menu-toggle .td-navigation-drawer-label {\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n      :host mat-toolbar .td-navigation-drawer-menu-toggle .td-navigation-drawer-menu-button {\n        height: 24px;\n        line-height: 24px;\n        width: 24px; }\n  :host > div {\n    overflow: hidden; }\n`],\n  template: `<mat-toolbar [color]=\"color\"\n             [style.background-image]=\"backgroundImage\"\n             [class.td-toolbar-background]=\"!!isBackgroundAvailable\"\n             class=\"td-nagivation-drawer-toolbar\">\n  <ng-content select=\"[td-navigation-drawer-toolbar]\"></ng-content>\n  <ng-container *ngIf=\"!isCustomToolbar\">\n    <div *ngIf=\"icon || logo || sidenavTitle\"\n          class=\"td-navigation-drawer-toolbar-content\"\n          [class.cursor-pointer]=\"routerEnabled\"\n          (click)=\"handleNavigationClick()\">\n      <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n      <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n      <span *ngIf=\"sidenavTitle\" class=\"td-navigation-drawer-title\">{{sidenavTitle}}</span>\n    </div>\n    <div class=\"td-navigation-drawer-name\" *ngIf=\"email && name\">{{name}}</div>\n    <div class=\"td-navigation-drawer-menu-toggle\"\n        href\n        *ngIf=\"email || name\"\n        (click)=\"toggleMenu()\">\n      <span class=\"td-navigation-drawer-label\">{{email || name}}</span>\n      <button mat-icon-button class=\"td-navigation-drawer-menu-button\" *ngIf=\"isMenuAvailable\">\n        <mat-icon *ngIf=\"!menuToggled\">arrow_drop_down</mat-icon>\n        <mat-icon *ngIf=\"menuToggled\">arrow_drop_up</mat-icon>\n      </button>\n    </div>\n  </ng-container>\n</mat-toolbar>\n<div class=\"td-navigation-drawer-content\" [@tdCollapse]=\"menuToggled\">\n  <ng-content></ng-content>\n</div>\n<div class=\"td-navigation-drawer-menu-content\" [@tdCollapse]=\"!menuToggled\">\n  <ng-content select=\"[td-navigation-drawer-menu]\"></ng-content>\n</div>\n`,\n  animations: [ TdCollapseAnimation() ],\n})\nexport class TdNavigationDrawerComponent implements OnInit, OnDestroy {\n\n  private _closeSubscription: Subscription;\n  private _menuToggled: boolean = false;\n  private _backgroundImage: SafeStyle;\n\n  get menuToggled(): boolean {\n    return this._menuToggled;\n  }\n\n  @ContentChildren(TdNavigationDrawerMenuDirective) _drawerMenu: QueryList<TdNavigationDrawerMenuDirective>;\n\n  @ContentChildren(TdNavigationDrawerToolbarDirective) _toolbar: QueryList<TdNavigationDrawerToolbarDirective>;\n\n  /**\n   * Checks if there is a [TdNavigationDrawerMenuDirective] has content.\n   */\n  get isMenuAvailable(): boolean {\n    return this._drawerMenu ? this._drawerMenu.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a [TdNavigationDrawerToolbarDirective] has content.\n   */\n  get isCustomToolbar(): boolean {\n    return this._toolbar ? this._toolbar.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a background image for the toolbar.\n   */\n  get isBackgroundAvailable(): boolean {\n    return !!this._backgroundImage;\n  }\n\n  /**\n   * sidenavTitle?: string\n   * Title set in sideNav.\n   */\n  @Input('sidenavTitle') sidenavTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, default is used.\n   */\n  @Input('color') color: string;\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and sidenavTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * backgroundUrl?: SafeResourceUrl\n   *\n   * image to be displayed as the background of the toolbar.\n   * URL used will be sanitized, but it should be always from a trusted source to avoid XSS.\n   */\n  @Input('backgroundUrl')\n  // TODO angular complains with warnings if this is type [SafeResourceUrl].. so we will make it <any> until its fixed.\n  // https://github.com/webpack/webpack/issues/2977\n  set backgroundUrl(backgroundUrl: any) {\n    if (backgroundUrl) {\n      let sanitizedUrl: string = this._sanitize.sanitize(SecurityContext.RESOURCE_URL, backgroundUrl);\n      this._backgroundImage = this._sanitize.sanitize(SecurityContext.STYLE, 'url(' + sanitizedUrl + ')');\n    }\n  }\n  get backgroundImage(): SafeStyle {\n    return this._backgroundImage;\n  }\n\n  /**\n   * name?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel.\n   * if [email] is not set, then [name] will be the toggle menu text.\n   */\n  @Input('name') name: string;\n\n  /**\n   * email?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel in the [toggle] menu text.\n   * if [email] and [name] are not set, then the toggle menu is not rendered.\n   */\n  @Input('email') email: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) private _layout: TdLayoutComponent,\n              @Optional() private _router: Router,\n              private _sanitize: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this._closeSubscription = this._layout.sidenav.openedChange.subscribe((opened: boolean) => {\n      if (!opened) {\n        this._menuToggled = false;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._closeSubscription) {\n      this._closeSubscription.unsubscribe();\n      this._closeSubscription = undefined;\n    }\n  }\n\n  toggleMenu(): void {\n    if (this.isMenuAvailable) {\n      this._menuToggled = !this._menuToggled;\n    }\n  }\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n      this.close();\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this._layout.toggle();\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this._layout.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this._layout.close();\n  }\n}\n",
    "import { Component, Input, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td-layout-footer,td-layout-footer-inner',\n  styles: [`:host {\n  display: block;\n  padding: 10px 16px; }\n`],\n  template: `<ng-content></ng-content>\n`,\n})\nexport class TdLayoutFooterComponent {\n\n  private _color: 'primary' | 'accent' | 'warn';\n\n  /**\n   * color?: string\n   *\n   * Optional color option: primary | accent | warn.\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-footer');\n  }\n\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatListModule } from '@angular/material/list';\n\nimport { TdLayoutComponent } from './layout.component';\nimport { TdLayoutToggleDirective, TdLayoutCloseDirective, TdLayoutOpenDirective } from './layout.directives';\nimport { TdLayoutNavComponent } from './layout-nav/layout-nav.component';\nimport { TdLayoutNavListComponent } from './layout-nav-list/layout-nav-list.component';\nimport {\n  TdLayoutNavListToggleDirective, TdLayoutNavListCloseDirective, TdLayoutNavListOpenDirective,\n} from './layout-nav-list/layout-nav-list.directives';\nimport { TdLayoutCardOverComponent } from './layout-card-over/layout-card-over.component';\nimport { TdLayoutManageListComponent } from './layout-manage-list/layout-manage-list.component';\nimport {\n  TdLayoutManageListToggleDirective, TdLayoutManageListCloseDirective, TdLayoutManageListOpenDirective,\n} from './layout-manage-list/layout-manage-list.directives';\nimport { TdLayoutFooterComponent } from './layout-footer/layout-footer.component';\n\nimport {\n  TdNavigationDrawerComponent, TdNavigationDrawerMenuDirective, TdNavigationDrawerToolbarDirective,\n} from './navigation-drawer/navigation-drawer.component';\n\nconst TD_LAYOUTS: Type<any>[] = [\n  TdLayoutComponent,\n  TdLayoutToggleDirective,\n  TdLayoutCloseDirective,\n  TdLayoutOpenDirective,\n\n  TdLayoutNavComponent,\n\n  TdLayoutNavListComponent,\n  TdLayoutNavListToggleDirective,\n  TdLayoutNavListCloseDirective,\n  TdLayoutNavListOpenDirective,\n\n  TdLayoutCardOverComponent,\n\n  TdLayoutManageListComponent,\n  TdLayoutManageListToggleDirective,\n  TdLayoutManageListCloseDirective,\n  TdLayoutManageListOpenDirective,\n\n  TdLayoutFooterComponent,\n\n  TdNavigationDrawerComponent,\n  TdNavigationDrawerMenuDirective,\n  TdNavigationDrawerToolbarDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ScrollDispatchModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatListModule,\n  ],\n  declarations: [\n    TD_LAYOUTS,\n  ],\n  exports: [\n    TD_LAYOUTS,\n  ],\n})\nexport class CovalentLayoutModule {\n\n}\n",
    "import { Component, ViewChild, TemplateRef, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, DoCheck } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum LoadingType {\n  Circular = <any>'circular',\n  Linear = <any>'linear',\n}\n\nexport enum LoadingMode {\n  Determinate = <any>'determinate',\n  Indeterminate = <any>'indeterminate',\n}\n\nexport enum LoadingStrategy {\n  Overlay = <any>'overlay',\n  Replace = <any>'replace',\n}\n\nexport enum LoadingStyle {\n  FullScreen = <any>'fullscreen',\n  Overlay = <any>'overlay',\n  None = <any>'none',\n}\n\nimport { TdFadeInOutAnimation } from '@covalent/core/common';\n\nexport const TD_CIRCLE_DIAMETER: number = 100;\n\n@Component({\n  selector: 'td-loading',\n  styles: [`.td-loading-wrapper {\n  position: relative;\n  display: block; }\n  .td-loading-wrapper.td-fullscreen {\n    position: inherit; }\n  .td-loading-wrapper .td-loading {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1; }\n  .td-loading-wrapper.td-overlay .td-loading {\n    position: absolute;\n    margin: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1000; }\n    .td-loading-wrapper.td-overlay .td-loading mat-progress-bar {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0; }\n  .td-loading-wrapper.td-overlay-circular .td-loading {\n    bottom: 0; }\n`],\n  template: `<div class=\"td-loading-wrapper\"\n    [style.min-height]=\"getHeight()\"\n    [class.td-overlay-circular]=\"(isOverlay() || isFullScreen()) && !isLinear()\"\n    [class.td-overlay]=\"isOverlay() || isFullScreen()\" \n    [class.td-fullscreen]=\"isFullScreen()\">\n  <div [@tdFadeInOut]=\"animation\"\n     (@tdFadeInOut.done)=\"animationComplete($event)\"\n     [style.min-height]=\"getHeight()\"\n     class=\"td-loading\">\n    <mat-progress-spinner *ngIf=\"isCircular()\" \n                        [mode]=\"mode\"\n                        [value]=\"value\" \n                        [color]=\"color\" \n                        [diameter]=\"getCircleDiameter()\"\n                        [strokeWidth]=\"getCircleStrokeWidth()\">\n    </mat-progress-spinner>\n    <mat-progress-bar *ngIf=\"isLinear()\" \n                     [mode]=\"mode\"\n                     [value]=\"value\"\n                     [color]=\"color\">\n    </mat-progress-bar>\n  </div>\n  <ng-template [cdkPortalHost]=\"content\"></ng-template>\n</div>`,\n  animations: [\n    TdFadeInOutAnimation(),\n  ],\n})\nexport class TdLoadingComponent implements DoCheck {\n\n  private _animationIn: Subject<any> = new Subject<any>();\n  private _animationOut: Subject<any> = new Subject<any>();\n  private _mode: LoadingMode = LoadingMode.Indeterminate;\n  private _defaultMode: LoadingMode = LoadingMode.Indeterminate;\n  private _value: number = 0;\n  private _circleDiameter: number = TD_CIRCLE_DIAMETER;\n\n  /**\n   * Flag for animation\n   */\n  animation: boolean = false;\n\n  /**\n   * Content injected into loading component.\n   */\n  content: TemplatePortal<any>;\n\n  /**\n   * Sets mode of [TdLoadingComponent] to LoadingMode.Determinate or LoadingMode.Indeterminate\n   */\n  set mode(mode: LoadingMode) {\n    this._defaultMode = mode;\n  }\n  get mode(): LoadingMode {\n    return this._mode;\n  }\n\n  /**\n   * Sets value of [TdLoadingComponent] if mode is 'LoadingMode.Determinate'\n   */\n  set value(value: number) {\n    this._value = value;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  style: LoadingStyle = LoadingStyle.None;\n\n  /**\n   * height: number\n   * Sets height of [TdLoadingComponent].\n   */\n  height: number;\n\n  /**\n   * type: LoadingType\n   * Sets type of [TdLoadingComponent] rendered.\n   */\n  type: LoadingType = LoadingType.Circular;\n\n  /**\n   * color: primary' | 'accent' | 'warn'\n   * Sets theme color of [TdLoadingComponent] rendered.\n   */\n  color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngDoCheck(): void {\n    // When overlay is used and the host width has a value greater than 1px\n    // set the circle diameter when possible incase the loading component was rendered in a hidden state\n    if (this.isOverlay() && this._hostHeight() > 1) {\n      if (this.animation) {\n        this._setCircleDiameter();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  getHeight(): string {\n    // Ignore height if style is `overlay` or `fullscreen`.\n    // Add height if child elements have a height and style is `none`, else return default height.\n    if (this.isOverlay() || this.isFullScreen()) {\n      return undefined;\n    } else {\n      return this.height ? `${this.height}px` : '150px';\n    }\n  }\n\n  getCircleDiameter(): number {\n    return this._circleDiameter;\n  }\n\n  getCircleStrokeWidth(): number {\n    // we calculate the stroke width by setting it as 10% of its diameter\n    let strokeWidth: number = this.getCircleDiameter() / 10;\n    return Math.abs(strokeWidth);\n  }\n\n  isCircular(): boolean {\n    return this.type === LoadingType.Circular;\n  }\n\n  isLinear(): boolean {\n    return this.type === LoadingType.Linear;\n  }\n\n  isFullScreen(): boolean {\n    return this.style === LoadingStyle.FullScreen;\n  }\n\n  isOverlay(): boolean {\n    return this.style === LoadingStyle.Overlay;\n  }\n\n  animationComplete(event: AnimationEvent): void {\n    // Check to see if its \"in\" or \"out\" animation to execute the proper callback\n    if (!event.fromState) {\n      this.inAnimationCompleted();\n    } else {\n      this.outAnimationCompleted();\n    }\n  }\n\n  inAnimationCompleted(): void {\n    this._animationIn.next(undefined);\n  }\n\n  outAnimationCompleted(): void {\n   /* little hack to reset the loader value and animation before removing it from DOM\n    * else, the loader will appear with prev value when its registered again\n    * and will do an animation going prev value to 0.\n    */\n    this.value = 0;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    this._animationOut.next(undefined);\n  }\n\n  /**\n   * Starts in animation and returns an observable for completition event.\n   */\n  startInAnimation(): Observable<any> {\n    /* need to switch back to the selected mode, so we have saved it in another variable\n    *  and then recover it. (issue with protractor)\n    */\n    this._mode = this._defaultMode;\n    // Set values before the animations starts\n    this._setCircleDiameter();\n    // Check for changes for `OnPush` change detection\n    this.animation = true;\n    this._changeDetectorRef.markForCheck();\n    return this._animationIn.asObservable();\n  }\n\n  /**\n   * Starts out animation and returns an observable for completition event.\n   */\n  startOutAnimation(): Observable<any> {\n    this.animation = false;\n    /* need to switch back and forth from determinate/indeterminate so the setInterval()\n    * inside mat-progress-spinner stops and protractor doesnt timeout waiting to sync.\n    */\n    this._mode = LoadingMode.Determinate;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    return this._animationOut.asObservable();\n  }\n\n  /**\n   * Calculate the proper diameter for the circle and set it\n   */\n  private _setCircleDiameter(): void {\n    // we set a default diameter of 100 since this is the default in material\n    let diameter: number = TD_CIRCLE_DIAMETER;\n    // if height is provided, then we take that as diameter\n    if (this.height) {\n      diameter = this.height;\n      // else if its not provided, then we take the host height\n    } else if (this.height === undefined) {\n      diameter = this._hostHeight();\n    }\n    // if the diameter is over TD_CIRCLE_DIAMETER, we set TD_CIRCLE_DIAMETER\n    if (!!diameter && diameter <= TD_CIRCLE_DIAMETER) {\n      this._circleDiameter = Math.floor(diameter);\n    } else {\n      this._circleDiameter = TD_CIRCLE_DIAMETER;\n    }\n  }\n\n  /**\n   * Returns the host height of the loading component\n   */\n  private _hostHeight(): number {\n    if (<HTMLElement>this._elementRef.nativeElement) {\n      return (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return 0;\n  }\n}\n",
    "import { Injectable, ComponentFactoryResolver, ChangeDetectorRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { Injector, ComponentRef, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingType, LoadingMode, LoadingStrategy, LoadingStyle } from '../loading.component';\nimport { ITdLoadingConfig } from './loading.service';\n\nexport interface IInternalLoadingOptions extends ITdLoadingConfig {\n  height?: number;\n  style?: LoadingStyle;\n}\n\nexport interface ILoadingRef {\n  observable: Observable<any>;\n  componentRef: ComponentRef<any>;\n  subject?: Subject<any>;\n  times?: number;\n}\n\n/**\n * NOTE: @internal usage only.\n */\n@Injectable()\nexport class TdLoadingFactory {\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _overlay: Overlay,\n              private _injector: Injector) {\n  }\n\n  /**\n   * Uses material `Overlay` services to create a DOM element and attach the loading component\n   * into it. Leveraging the state and configuration from it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createFullScreenComponent(options: ITdLoadingConfig): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.FullScreen;\n    let loadingRef: ILoadingRef = this._initializeContext();\n    let loading: boolean = false;\n    let overlayRef: OverlayRef;\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        overlayRef = this._createOverlay();\n        loadingRef.componentRef = overlayRef.attach(new ComponentPortal(TdLoadingComponent));\n        this._mapOptions(options, loadingRef.componentRef.instance);\n        loadingRef.componentRef.instance.startInAnimation();\n        loadingRef.componentRef.changeDetectorRef.detectChanges();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          loadingRef.componentRef.destroy();\n          overlayRef.detach();\n          overlayRef.dispose();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Leverages TemplatePortals from material to inject the template inside of it so it fits\n   * perfectly when overlaying it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createOverlayComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.Overlay;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    loadingRef.componentRef.instance.content = new TemplatePortal(templateRef, viewContainerRef);\n    viewContainerRef.clear();\n    viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        loadingRef.componentRef.instance.startOutAnimation();\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Replaces the template with the loading component depending if it was registered or resolved.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createReplaceComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let nativeElement: HTMLElement = <HTMLElement>templateRef.elementRef.nativeElement;\n    (<IInternalLoadingOptions>options).height = nativeElement.nextElementSibling ?\n      nativeElement.nextElementSibling.scrollHeight : undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.None;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    viewContainerRef.createEmbeddedView(templateRef, context);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        let index: number = viewContainerRef.indexOf(loadingRef.componentRef.hostView);\n        if (index < 0) {\n          viewContainerRef.clear();\n          viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n        }\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          // passing context so when the template is re-attached, we can keep the reference of the variables\n          let cdr: ChangeDetectorRef = viewContainerRef.createEmbeddedView(templateRef, context);\n          viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.componentRef.hostView));\n          /**\n           * Need to call \"markForCheck\" and \"detectChanges\" on attached template, so its detected by parent component when attached\n           * with \"OnPush\" change detection\n           */\n          cdr.detectChanges();\n          cdr.markForCheck();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a fullscreen overlay for the loading usage.\n   */\n  private _createOverlay(): OverlayRef {\n    let state: OverlayConfig = new OverlayConfig();\n    state.hasBackdrop = false;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();\n    return this._overlay.create(state);\n  }\n\n  /**\n   * Creates a generic component dynamically waiting to be attached to a viewContainerRef.\n   */\n  private _createComponent(options: IInternalLoadingOptions): ILoadingRef {\n    let compRef: ILoadingRef = this._initializeContext();\n    compRef.componentRef = this._componentFactoryResolver\n    .resolveComponentFactory(TdLoadingComponent).create(this._injector);\n    this._mapOptions(options, compRef.componentRef.instance);\n    return compRef;\n  }\n\n  /**\n   * Initialize context for loading component.\n   */\n  private _initializeContext(): ILoadingRef {\n    let subject: Subject<any> = new Subject<any>();\n    return {\n      observable: subject.asObservable(),\n      subject: subject,\n      componentRef: undefined,\n      times: 0,\n    };\n  }\n\n  /**\n   * Maps configuration to the loading component instance.\n   */\n  private _mapOptions(options: IInternalLoadingOptions, instance: TdLoadingComponent): void {\n    instance.style = options.style;\n    if (options.type !== undefined) {\n      instance.type = options.type;\n    }\n    if (options.height !== undefined) {\n      instance.height = options.height;\n    }\n    if (options.mode !== undefined) {\n      instance.mode = options.mode;\n    }\n    if (options.color !== undefined) {\n      instance.color = options.color;\n    }\n  }\n}\n\nexport function LOADING_FACTORY_PROVIDER_FACTORY(\n    parent: TdLoadingFactory, componentFactoryResolver: ComponentFactoryResolver, overlay: Overlay, injector: Injector): TdLoadingFactory {\n  return parent || new TdLoadingFactory(componentFactoryResolver, overlay, injector);\n}\n\nexport const LOADING_FACTORY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingFactory,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingFactory], ComponentFactoryResolver, Overlay, Injector],\n  useFactory: LOADING_FACTORY_PROVIDER_FACTORY,\n};\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingMode, LoadingStrategy, LoadingType } from '../loading.component';\nimport { TdLoadingFactory, ILoadingRef } from './loading.factory';\n\nexport interface ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n}\n\nexport class TdLoadingConfig implements ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n\n  constructor(config: ITdLoadingConfig) {\n    this.name = config.name;\n    if (!this.name) {\n      throw Error('Name is required for [TdLoading] configuration.');\n    }\n    this.mode = config.mode ? config.mode : LoadingMode.Indeterminate;\n    this.type = config.type ? config.type : LoadingType.Circular;\n    this.color = config.color ? config.color : 'primary';\n  }\n}\n\nexport interface ITdLoadingDirectiveConfig extends ITdLoadingConfig {\n  strategy?: LoadingStrategy;\n}\n\nexport class TdLoadingDirectiveConfig extends TdLoadingConfig implements ITdLoadingDirectiveConfig {\n  name: string;\n  type: LoadingType;\n  mode: LoadingMode;\n  strategy: LoadingStrategy;\n\n  constructor(config: ITdLoadingDirectiveConfig) {\n    super(config);\n    this.strategy = config.strategy ? config.strategy : LoadingStrategy.Replace;\n  }\n}\n\n@Injectable()\nexport class TdLoadingService {\n\n  private _context: {[key: string]: ILoadingRef} = {};\n  private _timeouts: {[key: string]: any} = {};\n\n  constructor(private _loadingFactory: TdLoadingFactory) {\n    this.create({\n      name: 'td-loading-main',\n    });\n  }\n\n  /**\n   * params:\n   * - config: ILoadingDirectiveConfig\n   * - viewContainerRef: ViewContainerRef\n   * - templateRef: TemplateRef<Object>\n   *\n   * Creates an replace loading mask and attaches it to the viewContainerRef.\n   * Replaces the templateRef with the mask when a request is registered on it.\n   *\n   * NOTE: @internal usage only.\n   */\n  createComponent(config: ITdLoadingDirectiveConfig, viewContainerRef: ViewContainerRef,\n                  templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let directiveConfig: TdLoadingDirectiveConfig = new TdLoadingDirectiveConfig(config);\n    if (this._context[directiveConfig.name]) {\n      throw Error(`Name duplication: [TdLoading] directive has a name conflict with ${directiveConfig.name}.`);\n    }\n    if (directiveConfig.strategy === LoadingStrategy.Overlay) {\n      this._context[directiveConfig.name] = this._loadingFactory.createOverlayComponent(directiveConfig, viewContainerRef, templateRef);\n    } else {\n      this._context[directiveConfig.name] = this._loadingFactory.createReplaceComponent(directiveConfig, viewContainerRef, templateRef, context);\n    }\n    return this._context[directiveConfig.name];\n  }\n\n  /**\n   * params:\n   * - config: ITdLoadingConfig\n   *\n   * Creates a fullscreen loading mask and attaches it to the DOM with the given configuration.\n   * Only displayed when the mask has a request registered on it.\n   */\n  public create(config: ITdLoadingConfig): void {\n    let fullscreenConfig: TdLoadingConfig = new TdLoadingConfig(config);\n    this.removeComponent(fullscreenConfig.name);\n    this._context[fullscreenConfig.name] = this._loadingFactory.createFullScreenComponent(fullscreenConfig);\n  }\n\n  /**\n   * params:\n   * - name: string\n   *\n   * Removes `loading` component from service context.\n   */\n  public removeComponent(name: string): void {\n    if (this._context[name]) {\n      this._context[name].subject.unsubscribe();\n      if (this._context[name].componentRef) {\n        this._context[name].componentRef.destroy();\n      }\n      this._context[name] = undefined;\n      delete this._context[name];\n    }\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - registers?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass registers argument to set a number of register calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.register()\n   */\n  public register(name: string = 'td-loading-main', registers: number = 1): boolean {\n    // try registering into the service if the loading component has been instanciated or if it exists.\n    if (this._context[name]) {\n      registers = registers < 1 ? 1 : registers;\n      this._context[name].times += registers;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    } else {\n      // if it doesnt exist, set a timeout so its registered after change detection happens\n      // this in case \"register\" occured on the `ngOnInit` lifehook cycle.\n      if (!this._timeouts[name]) {\n        this._timeouts[name] = setTimeout(() => {\n          this.register(name, registers);\n        });\n      } else {\n        // if it timeout occured and still doesnt exist, it means the tiemout wasnt needed so we clear it.\n        this._clearTimeout(name);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - resolves?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass resolves argument to set a number of resolve calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolve()\n   */\n  public resolve(name: string = 'td-loading-main', resolves: number = 1): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      resolves = resolves < 1 ? 1 : resolves;\n      if (this._context[name].times > 0) {\n        let times: number = this._context[name].times;\n        times -= resolves;\n        this._context[name].times = times < 0 ? 0 : times;\n      }\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * returns: true if successful\n   *\n   * Resolves all request for the loading mask referenced by the name parameter.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolveAll()\n   */\n  public resolveAll(name: string = 'td-loading-main'): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      this._context[name].times = 0;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - value: number\n   * returns: true if successful\n   *\n   * Set value on a loading mask referenced by the name parameter.\n   * Usage only available if its mode is 'determinate' and if loading is showing.\n   */\n  public setValue(name: string, value: number): boolean {\n    if (this._context[name]) {\n      let instance: TdLoadingComponent = this._context[name].componentRef.instance;\n      if (instance.mode === LoadingMode.Determinate && instance.animation) {\n        instance.value = value;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears timeout linked to the name.\n   * @param name Name of the loading component to be cleared\n   */\n  private _clearTimeout(name: string): void {\n    clearTimeout(this._timeouts[name]);\n    delete this._timeouts[name];\n  }\n}\n\nexport function LOADING_PROVIDER_FACTORY(\n    parent: TdLoadingService, loadingFactory: TdLoadingFactory): TdLoadingService {\n  return parent || new TdLoadingService(loadingFactory);\n}\n\nexport const LOADING_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingService,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingService], TdLoadingFactory],\n  useFactory: LOADING_PROVIDER_FACTORY,\n};\n",
    "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\n\nimport { LoadingType, LoadingMode, LoadingStrategy, TdLoadingComponent } from '../loading.component';\nimport { TdLoadingService } from '../services/loading.service';\nimport { ILoadingRef } from '../services/loading.factory';\n\n/**\n * Context class for variable reference\n */\nexport class TdLoadingContext {\n  public $implicit: any = undefined;\n  public tdLoading: any = undefined;\n}\n\n// Constant for generation of the id for the next component\nlet TD_LOADING_NEXT_ID: number = 0;\n\n@Directive({\n  selector: '[tdLoading]',\n})\nexport class TdLoadingDirective implements OnInit, OnDestroy {\n\n  private _context: TdLoadingContext = new TdLoadingContext();\n  private _type: LoadingType;\n  private _mode: LoadingMode;\n  private _strategy: LoadingStrategy;\n  private _name: string;\n  private _loadingRef: ILoadingRef;\n\n  /**\n   * tdLoading: string\n   * Name reference of the loading mask, used to register/resolve requests to the mask.\n   */\n  @Input('tdLoading')\n  set name(name: string) {\n    if (!this._name) {\n      if (name) {\n        this._name = name;\n      }\n    }\n  }\n\n  /**\n   * tdLoadingUntil?: any\n   * If its null, undefined or false it will be used to register requests to the mask.\n   * Else if its any value that can be resolved as true, it will resolve the mask.\n   * [name] is optional when using [until], but can still be used to register/resolve it manually.\n   */\n  @Input('tdLoadingUntil')\n  set until(until: any) {\n    if (!this._name) {\n      this._name = 'td-loading-until-' + TD_LOADING_NEXT_ID++;\n    }\n    this._context.$implicit = this._context.tdLoading = until;\n    if (!until) {\n      this._loadingService.register(this._name);\n    } else {\n      this._loadingService.resolveAll(this._name);\n    }\n  }\n\n  /**\n   * tdLoadingType?: LoadingType or ['linear' | 'circular']\n   * Sets the type of loading mask depending on value.\n   * Defaults to [LoadingType.Circular | 'circular'].\n   */\n  @Input('tdLoadingType')\n  set type(type: LoadingType) {\n    switch (type) {\n      case LoadingType.Linear:\n        this._type = LoadingType.Linear;\n        break;\n      default:\n        this._type = LoadingType.Circular;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingMode?: LoadingMode or ['determinate' | 'indeterminate']\n   * Sets the mode of loading mask depending on value.\n   * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].\n   */\n  @Input('tdLoadingMode')\n  set mode(mode: LoadingMode) {\n    switch (mode) {\n      case LoadingMode.Determinate:\n        this._mode = LoadingMode.Determinate;\n        break;\n      default:\n        this._mode = LoadingMode.Indeterminate;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingStrategy?: LoadingStrategy or ['replace' | 'overlay']\n   * Sets the strategy of loading mask depending on value.\n   * Defaults to [LoadingMode.Replace | 'replace'].\n   */\n  @Input('tdLoadingStrategy')\n  set strategy(stategy: LoadingStrategy) {\n    switch (stategy) {\n      case LoadingStrategy.Overlay:\n        this._strategy = LoadingStrategy.Overlay;\n        break;\n      default:\n        this._strategy = LoadingStrategy.Replace;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingColor?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the loading component. Defaults to \"primary\"\n   */\n  @Input('tdLoadingColor') color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _viewContainerRef: ViewContainerRef,\n              private _templateRef: TemplateRef<TdLoadingContext>,\n              private _loadingService: TdLoadingService) {}\n\n  /**\n   * Registers component in the DOM, so it will be available when calling resolve/register.\n   */\n  ngOnInit(): void {\n    this._registerComponent();\n  }\n\n  /**\n   * Remove component when directive is destroyed.\n   */\n  ngOnDestroy(): void {\n    this._loadingService.removeComponent(this._name);\n    this._loadingRef = undefined;\n  }\n\n  /**\n   * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].\n   * Passes this directive's [TemplateRef] to modify DOM depending on loading `strategy`.\n   */\n  private _registerComponent(): void {\n    if (!this._name) {\n      throw new Error('Name is needed to register loading directive');\n    }\n    // Check if `TdLoadingComponent` has been created before trying to add one again.\n    // There is a weird edge case when using `[routerLinkActive]` that calls the `ngOnInit` twice in a row\n    if (!this._loadingRef) {\n      this._loadingRef = this._loadingService.createComponent({\n        name: this._name,\n        type: this._type,\n        mode: this._mode,\n        color: this.color,\n        strategy: this._strategy,\n      }, this._viewContainerRef, this._templateRef, this._context);\n    }\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { TdLoadingService, LOADING_PROVIDER } from './services/loading.service';\nimport { TdLoadingFactory, LOADING_FACTORY_PROVIDER } from './services/loading.factory';\nimport { TdLoadingDirective } from './directives/loading.directive';\nimport { TdLoadingComponent } from './loading.component';\n\nconst TD_LOADING: Type<any>[] = [\n  TdLoadingComponent,\n  TdLoadingDirective,\n];\n\nconst TD_LOADING_ENTRY_COMPONENTS: Type<any>[] = [\n  TdLoadingComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_LOADING,\n  ],\n  exports: [\n    TD_LOADING,\n  ],\n  providers: [\n    LOADING_FACTORY_PROVIDER,\n    LOADING_PROVIDER,\n  ],\n  entryComponents: [\n    TD_LOADING_ENTRY_COMPONENTS,\n  ],\n})\nexport class CovalentLoadingModule {\n\n}\n",
    "import { Injectable, NgZone, SkipSelf, Optional, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\n\n@Injectable()\nexport class TdMediaService {\n\n  private _resizing: boolean = false;\n  private _globalSubscription: Subscription;\n  private _queryMap: Map<string, string> = new Map<string, string>();\n  private _querySources: { [key: string]: BehaviorSubject<boolean>} = {};\n  private _queryObservables: {[key: string]: Observable<boolean>} = {};\n\n  constructor(private _ngZone: NgZone) {\n    this._queryMap.set('xs', '(max-width: 599px)');\n    this._queryMap.set('gt-xs', '(min-width: 600px)');\n    this._queryMap.set('sm', '(min-width: 600px) and (max-width: 959px)');\n    this._queryMap.set('gt-sm', '(min-width: 960px)');\n    this._queryMap.set('md', '(min-width: 960px) and (max-width: 1279px)');\n    this._queryMap.set('gt-md', '(min-width: 1280px)');\n    this._queryMap.set('lg', '(min-width: 1280px) and (max-width: 1919px)');\n    this._queryMap.set('gt-lg', '(min-width: 1920px)');\n    this._queryMap.set('xl', '(min-width: 1920px)');\n    this._queryMap.set('landscape', '(orientation: landscape)');\n    this._queryMap.set('portrait', '(orientation: portrait)');\n    this._queryMap.set('print', 'print');\n\n    this._resizing = false;\n    // we make sure that the resize checking happend outside of angular since it happens often\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      return fromEvent(window, 'resize').subscribe(() => {\n        // way to prevent the resize event from triggering the match media if there is already one event running already.\n        if (!this._resizing) {\n          this._resizing = true;\n          setTimeout(() => {\n            this._onResize();\n            this._resizing = false;\n          }, 100);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deregisters a query so its stops being notified or used.\n   */\n  deregisterQuery(query: string): void {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    this._querySources[query].unsubscribe();\n    delete this._querySources[query];\n    delete this._queryObservables[query];\n  }\n\n  /**\n   * Used to evaluate whether a given media query is true or false given the current device's screen / window size.\n   */\n  public query(query: string): boolean {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    return this._ngZone.run(() => {\n      return matchMedia(query).matches;\n    });\n  }\n\n  /**\n   * Registers a media query and returns an [Observable] that will re-evaluate and\n   * return if the given media query matches on window resize.\n   * Note: don't forget to unsubscribe from [Observable] when finished watching.\n   */\n  public registerQuery(query: string): Observable<boolean> {\n    if (this._queryMap.get(query.toLowerCase())) {\n      query = this._queryMap.get(query.toLowerCase());\n    }\n    if (!this._querySources[query]) {\n      this._querySources[query] = new BehaviorSubject<boolean>(matchMedia(query).matches);\n      this._queryObservables[query] = this._querySources[query].asObservable();\n    }\n    return this._queryObservables[query];\n  }\n\n  /**\n   * Trigger a match media event on all subscribed observables.\n   */\n  public broadcast(): void {\n    this._onResize();\n  }\n\n  private _onResize(): void {\n    for (let query in this._querySources) {\n      this._ngZone.run(() => {\n        this._matchMediaTrigger(query);\n      });\n    }\n  }\n\n  private _matchMediaTrigger(query: string): void {\n    this._querySources[query].next(matchMedia(query).matches);\n  }\n}\n\nexport function MEDIA_PROVIDER_FACTORY(\n    parent: TdMediaService, ngZone: NgZone): TdMediaService {\n  return parent || new TdMediaService(ngZone);\n}\n\nexport const MEDIA_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdMediaService,\n  deps: [[new Optional(), new SkipSelf(), TdMediaService], NgZone],\n  useFactory: MEDIA_PROVIDER_FACTORY,\n};\n",
    "import { Directive, ElementRef, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdMediaService } from '../services/media.service';\n\n@Directive({\n  selector: '[tdMediaToggle]',\n})\nexport class TdMediaToggleDirective implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n\n  private _query: string;\n  private _matches: boolean = false;\n  private _attributes: {[key: string]: string} = {};\n  private _styles: {[key: string]: string} = {};\n  private _classes: string[] = [];\n\n  /**\n   * tdMediaToggle: string\n   * Media query used to evaluate screen/window size.\n   * Toggles attributes, classes and styles if media query is matched.\n   */\n  @Input('tdMediaToggle')\n  set query(query: string) {\n    if (!query) {\n      throw new Error('Query needed for [tdMediaToggle] directive.');\n    }\n    this._query = query;\n  }\n\n  /**\n   * mediaAttributes: {[key: string]: string}\n   * Attributes to be toggled when media query matches.\n   */\n  @Input('mediaAttributes')\n  set attributes(attributes: any) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * mediaClasses: string[]\n   * CSS Classes to be toggled when media query matches.\n   */\n  @Input('mediaClasses')\n  set classes(classes: string[]) {\n    this._classes = classes;\n  }\n\n  /**\n   * mediaStyles: {[key: string]: string}\n   * CSS Styles to be toggled when media query matches.\n   */\n  @Input('mediaStyles')\n  set styles(styles: any) {\n    this._styles = styles;\n  }\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _mediaService: TdMediaService) { }\n\n  ngOnInit(): void {\n    this._mediaChange(this._mediaService.query(this._query));\n    this._subscription = this._mediaService.registerQuery(this._query).subscribe((matches: boolean) => {\n      this._mediaChange(matches);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n  private _mediaChange(matches: boolean): void {\n    this._matches = matches;\n    this._changeAttributes();\n    this._changeClasses();\n    this._changeStyles();\n  }\n\n  private _changeAttributes(): void {\n    for (let attr in this._attributes) {\n      if (this._matches) {\n        this._renderer.setAttribute(this._elementRef.nativeElement, attr, this._attributes[attr]);\n      } else {\n        this._renderer.removeAttribute(this._elementRef.nativeElement, attr);\n      }\n    }\n  }\n\n  private _changeClasses(): void {\n    this._classes.forEach((className: string) => {\n      if (this._matches) {\n        this._renderer.addClass(this._elementRef.nativeElement, className);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, className);\n      }\n    });\n  }\n\n  private _changeStyles(): void {\n    for (let style in this._styles) {\n      if (this._matches) {\n        this._renderer.setStyle(this._elementRef.nativeElement, style, this._styles[style]);\n      } else {\n        this._renderer.removeStyle(this._elementRef.nativeElement, style);\n      }\n    }\n  }\n\n}\n",
    "import { trigger, state, style, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\nexport interface ICollapseAnimation extends IAnimationOptions {\n   easeOnClose?: string;\n   easeOnOpen?: string;\n}\n\n/**\n * Function TdCollapseAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation. Defaults to tdCollapse.\n * * duration: Duration the animation will run in milliseconds. Defaults to 150 ms.\n * * delay: Delay before the animation will run in milliseconds. Defaults to 0 ms.\n * * easeOnClose: Animation accelerates and decelerates when closing. Defaults to ease-in.\n * * easeOnOpen: Animation accelerates and decelerates when opening. Defaults to ease-out.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a collapse/expand animation.\n *\n * usage: [@tdCollapse]=\"true|false\"\n */\nexport function TdCollapseAnimation(collapseOptions: ICollapseAnimation = {}): AnimationTriggerMetadata {\n  return trigger(collapseOptions.anchor || 'tdCollapse', [\n    state('1', style({\n      height: '0',\n      display: 'none',\n    })),\n    state('0',  style({\n      height: AUTO_STYLE,\n      display: AUTO_STYLE,\n    })),\n    transition('0 => 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((collapseOptions.duration || 150) + 'ms ' +\n                (collapseOptions.delay || 0) + 'ms ' +\n                (collapseOptions.easeOnClose || 'ease-in')),\n      ]),\n    ]),\n    transition('1 => 0', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((collapseOptions.duration || 150) + 'ms ' +\n                (collapseOptions.delay || 0) + 'ms ' +\n                (collapseOptions.easeOnOpen || 'ease-out')),\n      ]),\n    ]),\n  ]);\n}\n",
    "import { trigger, state, style, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group  } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\nexport interface IFadeInOutAnimation extends IAnimationOptions {\n  easeOnIn?: string;\n  easeOnOut?: string;\n}\n\n/**\n * Function TdFadeInOutAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation. Defaults to tdFadeInOut\n * * duration: Duration the animation will run in milliseconds. Defaults to 150 ms.\n * * delay: Delay before the animation will run in milliseconds. Defaults to 0 ms.\n * * easeOnIn: Animation accelerates and decelerates when fading in. Defaults to ease-in.\n * * easeOnOut: Animation accelerates and decelerates when fading out. Defaults to ease-out.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a fading animation.\n *\n * usage: [@tdFadeInOut]=\"true|false\"\n */\nexport function TdFadeInOutAnimation(fadeInOut: IFadeInOutAnimation = {}): AnimationTriggerMetadata {\n  return trigger((fadeInOut.anchor || 'tdFadeInOut'), [\n    state('0', style({\n      opacity: '0',\n      display: 'none',\n    })),\n    state('1',  style({\n      opacity: AUTO_STYLE,\n      display: AUTO_STYLE,\n    })),\n    transition('0 => 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((fadeInOut.duration || 150) + 'ms ' +\n                (fadeInOut.delay || 0) + 'ms ' +\n                (fadeInOut.easeOnIn || 'ease-in')),\n      ]),\n    ]),\n    transition('1 => 0', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((fadeInOut.duration || 150) + 'ms ' +\n                (fadeInOut.delay || 0) + 'ms ' +\n                (fadeInOut.easeOnOut || 'ease-out')),\n      ]),\n    ]),\n  ]);\n}\n",
    "\nimport { trigger, state, style, keyframes, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\n/**\n * Function TdBounceAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation.\n * * duration: Duration the animation will run in milliseconds. Defaults to 500 ms.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based bounce animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdBounceAnimation(bounceOptions: IAnimationOptions = {}): AnimationTriggerMetadata {\n  return trigger(bounceOptions.anchor || 'tdBounce', [\n    state('0', style({\n      transform: 'translate3d(0, 0, 0)',\n    })),\n    state('1',  style({\n      transform: 'translate3d(0, 0, 0)',\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((bounceOptions.duration || 500) + 'ms ' + (bounceOptions.delay || 0) + 'ms', keyframes([\n          style({animationTimingFunction: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)', transform: 'translate3d(0, 0, 0)', offset: 0}),\n          style({animationTimingFunction: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)', transform: 'translate3d(0, 0, 0)', offset: 0.2}),\n          style({animationTimingFunction: 'cubic-bezier(0.755, 0.050, 0.855, 0.060)', transform: 'translate3d(0, -30px, 0)', offset: 0.4}),\n          style({animationTimingFunction: 'cubic-bezier(0.755, 0.050, 0.855, 0.060)', transform: 'translate3d(0, -30px, 0)', offset: 0.43}),\n          style({animationTimingFunction: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)', transform: 'translate3d(0, 0, 0)', offset: 0.53}),\n          style({animationTimingFunction: 'cubic-bezier(0.755, 0.050, 0.855, 0.060)', transform: 'translate3d(0, -15px, 0)', offset: .7}),\n          style({animationTimingFunction: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)', transform: 'translate3d(0, 0, 0)', offset: 0.8}),\n          style({transform: 'translate3d(0, -4px, 0)', offset: .9}),\n          style({animationTimingFunction: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)', transform: 'translate3d(0, 0, 0)', offset: 1.0}),\n        ])),\n      ]),\n    ]),\n  ]);\n}\n",
    "\nimport { trigger, state, style, keyframes, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\n/**\n * Function TdFlashAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation.\n * * duration: Duration the animation will run in milliseconds. Defaults to 500 ms.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based flash animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdFlashAnimation(flashOptions: IAnimationOptions = {}): AnimationTriggerMetadata {\n  return trigger(flashOptions.anchor || 'tdFlash', [\n    state('0', style({\n      opacity: 1,\n    })),\n    state('1',  style({\n      opacity: 1,\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((flashOptions.duration || 500) + 'ms ' + (flashOptions.delay || 0) + 'ms', keyframes([\n          style({opacity: 1, offset: 0}),\n          style({opacity: 0, offset: 0.25}),\n          style({opacity: 1, offset: 0.5}),\n          style({opacity: 0, offset: 0.75}),\n          style({opacity: 1, offset: 1.0}),\n        ])),\n      ]),\n    ]),\n  ]);\n}\n",
    "\nimport { trigger, state, style, keyframes, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\n/**\n * Function TdHeadshakeAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation.\n * * duration: Duration the animation will run in milliseconds. Defaults to 500 ms.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based headshake animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdHeadshakeAnimation(headshakeOptions: IAnimationOptions = {}): AnimationTriggerMetadata {\n  return trigger(headshakeOptions.anchor || 'tdHeadshake', [\n    state('0', style({\n      transform: 'translateX(0)',\n    })),\n    state('1',  style({\n      transform: 'translateX(0)',\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((headshakeOptions.duration || 500) + 'ms ' + (headshakeOptions.delay || 0) + 'ms', keyframes([\n          style({transform: 'translateX(0)', offset: 0}),\n          style({transform: 'translateX(-6px) rotateY(-9deg)', offset: 0.065}),\n          style({transform: 'translateX(5px) rotateY(7deg)', offset: 0.185}),\n          style({transform: 'translateX(-3px) rotateY(-5deg)', offset: 0.315}),\n          style({transform: 'translateX(2px) rotateY(3deg)', offset: 0.435}),\n          style({transform: 'translateX(0)', offset: 0.50}),\n        ])),\n      ]),\n    ]),\n  ]);\n}\n",
    "\nimport { trigger, state, style, keyframes, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\n/**\n * Function TdJelloAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation.\n * * duration: Duration the animation will run in milliseconds. Defaults to 500 ms.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based jello animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdJelloAnimation(jelloOptions: IAnimationOptions = {}): AnimationTriggerMetadata {\n  return trigger(jelloOptions.anchor || 'tdJello', [\n    state('0', style({\n      transform: 'none',\n    })),\n    state('1',  style({\n      transform: 'none',\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((jelloOptions.duration || 500) + 'ms ' + (jelloOptions.delay || 0) + 'ms', keyframes([\n          style({transform: 'none', offset: 0}),\n          style({transform: 'none', offset: 0.011}),\n          style({transform: 'skewX(-12.5deg) skewY(-12.5deg)', offset: 0.222}),\n          style({transform: 'skewX(6.25deg) skewY(6.25deg)', offset: 0.333}),\n          style({transform: 'skewX(-3.125deg) skewY(-3.125deg)', offset: 0.444}),\n          style({transform: 'skewX(1.5625deg) skewY(1.5625deg)', offset: 0.555}),\n          style({transform: 'skewX(-0.78125deg) skewY(-0.78125deg)', offset: 0.666}),\n          style({transform: 'skewX(0.390625deg) skewY(0.390625deg)', offset: 0.777}),\n          style({transform: 'skewX(-0.1953125deg) skewY(-0.1953125deg)', offset: 0.888}),\n        ])),\n      ]),\n    ]),\n  ]);\n}\n",
    "\nimport { trigger, state, style, keyframes, transition, animate,\n         AnimationTriggerMetadata, AUTO_STYLE, query, animateChild, group } from '@angular/animations';\nimport { IAnimationOptions } from '../common/interfaces';\n\n/**\n * Function TdPulseAnimation\n *\n * params:\n * * anchor: Name of the anchor that will attach to a dom element in the components template that will contain the animation.\n * * duration: Duration the animation will run in milliseconds. Defaults to 500 ms.\n *\n * Returns an [AnimationTriggerMetadata] object with states for a boolean trigger based pulse animation.\n *\n * usage: [@myAnchorName]=\"true|false\"\n */\nexport function TdPulseAnimation(pulseOptions: IAnimationOptions = {}): AnimationTriggerMetadata {\n  return trigger(pulseOptions.anchor || 'tdPulse', [\n    state('0', style({\n      transform: 'scale3d(1, 1, 1)',\n    })),\n    state('1',  style({\n      transform: 'scale3d(1, 1, 1)',\n    })),\n    transition('0 <=> 1', [\n      group([\n        query('@*', animateChild(), { optional: true }),\n        animate((pulseOptions.duration || 500) + 'ms ' + (pulseOptions.delay || 0) + 'ms',\n          keyframes([\n            style({ transform: 'scale3d(1, 1, 1)', offset: 0 }),\n            style({ transform: 'scale3d(1.05, 1.05, 1.05)', offset: 0.5 }),\n            style({ transform: 'scale3d(1, 1, 1)', offset: 1.0 }),\n          ]),\n        ),\n      ]),\n    ]),\n  ]);\n}\n",
    "import { Constructor } from './constructor';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nconst noop: any = () => {\n  // empty method\n};\n\nexport interface IControlValueAccessor extends ControlValueAccessor {\n  value: any;\n  valueChanges: Observable<any>;\n  onChange: (_: any) => any;\n  onTouched: () => any;\n}\n\nexport interface IHasChangeDetectorRef {\n  _changeDetectorRef: ChangeDetectorRef;\n}\n\n/** Mixin to augment a component with ngModel support. */\nexport function mixinControlValueAccessor<T extends Constructor<IHasChangeDetectorRef>>\n                (base: T, initialValue?: any): Constructor<IControlValueAccessor> & T {\n  return class extends base {\n    private _value: any = initialValue;\n    private _subjectValueChanges: Subject<any>;\n    valueChanges: Observable<any>;\n\n    constructor(...args: any[]) {\n      super(...args); \n      this._subjectValueChanges = new Subject<any>();\n      this.valueChanges = this._subjectValueChanges.asObservable();\n    }\n\n    set value(v: any) {\n      if (v !== this._value) {\n        this._value = v;\n        this.onChange(v);\n        this._changeDetectorRef.markForCheck();\n        this._subjectValueChanges.next(v);\n      }\n    }\n    get value(): any {\n      return this._value;\n    }\n\n    writeValue(value: any): void {\n      this.value = value;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    registerOnChange(fn: any): void {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n      this.onTouched = fn;\n    }\n\n    onChange = (_: any) => noop;\n    onTouched = () => noop;\n\n  };\n}\n",
    "import { Constructor } from './constructor';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Interface to implement when applying the disabled mixin */\nexport interface ICanDisable {\n  disabled: boolean;\n  onDisabledChange(v: boolean): void;\n}\n\n/** Mixin to augment a component or directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<ICanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n    set disabled(value: boolean) {\n      let newValue: boolean = coerceBooleanProperty(value);\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n        this.onDisabledChange(this._disabled);\n      }\n    }\n\n    onDisabledChange(v: boolean): void {\n      /** NOT IMPLEMENTED, this needs to be overriden by subclasses if needed */\n    }\n  };\n}\n",
    "import { Constructor } from './constructor';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Interface to implement when applying the disabled mixin */\nexport interface ICanDisableRipple {\n  disableRipple: boolean;\n  onDisableRippleChange(v: boolean): void;\n}\n\n/** Mixin to augment a component or directive with a `disabled` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): Constructor<ICanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    get disableRipple(): boolean {\n      return this._disableRipple;\n    }\n    set disableRipple(value: boolean) {\n      let newValue: boolean = coerceBooleanProperty(value);\n      if (this._disableRipple !== newValue) {\n        this._disableRipple = newValue;\n        this.onDisableRippleChange(this._disableRipple);\n      }\n    }\n\n    onDisableRippleChange(v: boolean): void {\n      /** NOT IMPLEMENTED, this needs to be overriden by subclasses if needed */\n    }\n  };\n}\n",
    "import { Validators, AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class CovalentValidators {\n  static min(minValue: any): ValidatorFn {\n    let func: ValidatorFn = (c: AbstractControl): {[key: string]: any} => {\n      if (!!Validators.required(c) || (!minValue && minValue !== 0)) {\n        return undefined;\n      }\n      let v: number = c.value;\n      return v < minValue ?\n        { min: {minValue: minValue, actualValue: v} } :\n        undefined;\n    };\n    return func;\n  }\n\n  static max(maxValue: any): ValidatorFn {\n    let func: ValidatorFn = (c: AbstractControl): {[key: string]: any} => {\n      if (!!Validators.required(c) || (!maxValue && maxValue !== 0)) {\n        return undefined;\n      }\n      let v: number = c.value;\n      return v > maxValue ?\n        { max: {maxValue: maxValue, actualValue: v} } :\n        undefined;\n    };\n    return func;\n  }\n\n  static numberRequired(c: AbstractControl): {[key: string]: any} {\n    return (Number.isNaN(c.value)) ?\n        { required: true } :\n        undefined;\n  }\n\n}\n"
  ],
  "names": [
    "TdPagingBarComponent",
    "_dir",
    "_changeDetectorRef",
    "this",
    "_fromRow",
    "_toRow",
    "_initialized",
    "firstLast",
    "onChange",
    "EventEmitter",
    "_pageLinkCount",
    "coerceNumberProperty",
    "pageLinkCount",
    "_calculatePageLinks",
    "markForCheck",
    "_handleOnChange",
    "enumerable",
    "configurable",
    "Object",
    "defineProperty",
    "prototype",
    "_pageLinks",
    "get",
    "ngOnInit",
    "_page",
    "initialPage",
    "navigateToPage",
    "page",
    "Math",
    "floor",
    "nextPage",
    "isMinPage",
    "isMaxPage",
    "maxPage",
    "_pageSize",
    "_total",
    "top",
    "actualPageLinkCount",
    "_calculateRows",
    "pageSize",
    "total",
    "fromRow",
    "toRow",
    "type",
    "Component",
    "args",
    "template",
    "styles",
    "ctorParameters",
    "Dir",
    "decorators",
    "Optional",
    "ChangeDetectorRef",
    "propDecorators",
    "Input",
    "MatButtonModule",
    "exports",
    "TdVirtualScrollRowDirective",
    "templateRef",
    "viewContainerRef",
    "_super",
    "call",
    "TemplatePortalDirective",
    "Directive",
    "selector",
    "TemplateRef",
    "TdVirtualScrollContainerComponent",
    "_elementRef",
    "_domSanitizer",
    "_renderer",
    "_totalHeight",
    "item",
    "_data",
    "set",
    "data",
    "_rows",
    "toArray",
    "nativeElement",
    "getBoundingClientRect",
    "height",
    "_this",
    "_calculateVirtualRows",
    "ngAfterViewChecked",
    "newHostHeight",
    "_hostHeight",
    "handleScroll",
    "event",
    "element",
    "verticalScroll",
    "scrollTop",
    "_scrollVerticalOffset",
    "refresh",
    "scrollTo",
    "row",
    "rowHeight",
    "offset",
    "_offsetTransform",
    "bypassSecurityTrustStyle",
    "totalHeight",
    "_virtualData",
    "slice",
    "ElementRef",
    "DomSanitizer",
    "Renderer2",
    "CovalentVirtualScrollModule",
    "imports",
    "CommonModule",
    "TD_VIRTUAL_SCROLL",
    "TdNotificationCountPositionY",
    "Top",
    "TdNotificationCountPositionX",
    "Before",
    "After",
    "_positionY",
    "positionY",
    "TdNotificationCountComponent",
    "CovalentNotificationsModule",
    "NgModule",
    "declarations",
    "TdToggleDirective",
    "state$$1",
    "_state",
    "_animationShowPlayer",
    "_animationHidePlayer",
    "destroy",
    "undefined",
    "hide",
    "create",
    "_element",
    "setStyle",
    "onDone",
    "_onHideDone",
    "play",
    "show",
    "display",
    "animate",
    "duration",
    "style",
    "AUTO_STYLE",
    "_onShowDone",
    "state",
    "ariaExpandedBinding",
    "HostBinding",
    "_defaultDisplay",
    "_animationFadeOutPlayer",
    "_animationFadeInPlayer",
    "TdFadeDirective",
    "_animationBuilder",
    "build",
    "animation",
    "opacity",
    "_onFadeOutDone",
    "onFadeIn",
    "emit",
    "onFadeOut",
    "Output",
    "TdAutoTrimDirective",
    "_model",
    "onBlur",
    "value",
    "TdTimeAgoPipe",
    "transform",
    "time",
    "reference",
    "Date",
    "ref",
    "getTime",
    "startTime",
    "isNaN",
    "now",
    "diff",
    "Pipe",
    "TdTimeDifferencePipe",
    "start",
    "end",
    "endTime",
    "days",
    "hours",
    "minutes",
    "seconds",
    "pad",
    "daysFormatted",
    "TdBytesPipe",
    "bytes",
    "precision",
    "parseInt",
    "parseFloat",
    "pow",
    "i",
    "toFixed",
    "name",
    "TdDigitsPipe",
    "_locale",
    "_decimalPipe",
    "DecimalPipe",
    "digits",
    "size",
    "Inject",
    "LOCALE_ID",
    "TdTruncatePipe",
    "truncated",
    "trim",
    "RouterPathService",
    "_router",
    "_previousRoute",
    "Injectable",
    "Router",
    "IconService",
    "_icons",
    "icons",
    "filter",
    "el",
    "toLowerCase",
    "indexOf",
    "query$$1",
    "TD_ANIMATIONS",
    "TD_FORMS",
    "TD_VALIDATORS",
    "TD_PIPES",
    "CovalentCommonModule$1",
    "min",
    "minValue",
    "actualValue",
    "v",
    "Validators",
    "required",
    "c",
    "maxValue",
    "CovalentValidators",
    "numberRequired",
    "Number",
    "viewContainer",
    "TdMessageContainerDirective",
    "ViewContainerRef",
    "TdMessageComponent",
    "_opened",
    "_hidden",
    "_color",
    "color",
    "removeClass",
    "addClass",
    "open",
    "close",
    "opened",
    "_detach",
    "_animating",
    "ngAfterViewInit",
    "_attach",
    "_startAnimationState",
    "_childElement",
    "clear",
    "ViewChild",
    "_template",
    "collapsedAnimation",
    "hidden",
    "label",
    "sublabel",
    "icon",
    "animationDoneListener",
    "HostListener",
    "TD_MESSAGE",
    "CovalentMessageModule",
    "TdChipDirective",
    "__extends",
    "TdAutocompleteOptionDirective",
    "TdChipsBase",
    "_stacked",
    "_focused",
    "inputControl",
    "FormControl",
    "onInputChange",
    "items",
    "_items",
    "TdChipsComponent",
    "_inputPosition",
    "_toggleInput",
    "chipRemoval",
    "_chipRemoval",
    "disabled",
    "_tabIndex",
    "focusListener",
    "preventDefault",
    "_isMousedown",
    "toPromise$1",
    "timer$1",
    "then",
    "clickListener",
    "stopPropagation",
    "keyCode",
    "TAB",
    "removeFocusedState",
    "ESCAPE",
    "_inputChild",
    "focused",
    "_nativeInput",
    "blur",
    "_closeAutocomplete",
    "focus",
    "valueChanges",
    "pipe",
    "debounceTime$1",
    "debounce",
    "subscribe",
    "toPromise",
    "length",
    "_length",
    "ngOnDestroy",
    "_outsideClickSubs",
    "unsubscribe",
    "onDisabledChange",
    "_handleAddChip",
    "requireMatch",
    "selectedOptions",
    "_options",
    "option",
    "active",
    "setInactiveStyles",
    "_autocompleteTrigger",
    "activeOption",
    "addChip",
    "setFocusedState",
    "_setFirstOptionActive",
    "_openAutocomplete",
    "setValue",
    "push",
    "onAdd",
    "removeChip",
    "index",
    "removedValues",
    "splice",
    "_totalChips",
    "_focusChip",
    "onRemove",
    "_handleChipBlur",
    "_handleChipFocus",
    "onChipFocus",
    "_handleFocus",
    "canAddChip",
    "_focusFirstChip",
    "LEFT_ARROW",
    "DELETE",
    "BACKSPACE",
    "RIGHT_ARROW",
    "_chipKeydown",
    "UP_ARROW",
    "panelOpen",
    "openPanel",
    "closePanel",
    "_chipsChildren",
    "TdDataTableRowComponent",
    "selected",
    "TdDataTableTemplateDirective",
    "tdDataTableTemplate",
    "TdDataTableSortingOrder",
    "Ascending",
    "Descending",
    "_TdDataTableMixinBase",
    "mixinControlValueAccessor",
    "TdDataTableBase",
    "_hostWidth",
    "_onHorizontalScroll",
    "Subject$1",
    "_onVerticalScroll",
    "_selectable",
    "_clickable",
    "_multiple",
    "_allSelected",
    "_indeterminate",
    "_shiftPreviouslyPressed",
    "_lastSelectedIndex",
    "_firstSelectedIndex",
    "_firstCheckboxValue",
    "onRowSelect",
    "compareWith",
    "model",
    "TdDataTableComponent",
    "selectable",
    "_rowHeightCache",
    "Promise",
    "resolve",
    "_scrollableDiv",
    "Subject",
    "_columns",
    "coerceBooleanProperty",
    "multiple",
    "columnName",
    "_sortBy",
    "column",
    "order",
    "sortOrder",
    "toUpperCase",
    "Error",
    "_sortOrder",
    "forEach",
    "_scrollHorizontalOffset",
    "horizontalScroll",
    "newHostWidth",
    "_onResize",
    "next",
    "_horizontalScrollSubs",
    "_rowsChangedSubs",
    "scrollLeft",
    "getColumnWidth",
    "_widths",
    "getCellValue",
    "getTemplateRef",
    "_templateMap",
    "clearModel",
    "checked",
    "isRowSelected",
    "toggledRows",
    "onSelectAll",
    "rows",
    "blockEvent",
    "mouseEvent",
    "shiftKey",
    "firstIndex",
    "currentSelected",
    "lastIndex",
    "rowSelected",
    "_doSelection",
    "disableTextSelection",
    "_document",
    "onselectstart",
    "enableTextSelection",
    "handleRowClick",
    "clickable",
    "srcElement",
    "currentTarget",
    "getAttribute",
    "onRowClick",
    "handleSort",
    "onSortChange",
    "_rowKeyup",
    "DOWN_ARROW",
    "splitName",
    "split",
    "wasSelected",
    "val",
    "rowIndex",
    "_calculateCheckboxState",
    "e_1",
    "_c",
    "_a",
    "__values",
    "_b",
    "done",
    "error",
    "_calculateWidths",
    "_adjustColumnWidhts",
    "fixedTotalWidth",
    "flexibleWidths",
    "width",
    "columns",
    "limit",
    "max",
    "recalculateHostWidth",
    "hostWidth",
    "newValue_1",
    "adjustedNumber_1",
    "colWidth",
    "_adjustColumnWidth",
    "newFlexibleWidths",
    "widthOpts",
    "skipMinWidthProjection",
    "_colElements",
    "projectedWidth",
    "renderedColumns",
    "scrolledRows",
    "rowHeightSum_1",
    "d",
    "hostHeight",
    "isFinite",
    "inputs",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "_templates",
    "ContentChildren",
    "ViewChildren",
    "sortable",
    "TdDataTableColumnComponent",
    "numeric",
    "TdDataTableCellComponent",
    "bindNumeric",
    "TdDataTableTableComponent",
    "TdDataTableService",
    "filterData",
    "searchTerm",
    "ignoreCase",
    "excludedColumns",
    "filter$$1",
    "preItemValue",
    "sort",
    "a",
    "b",
    "compA",
    "sortBy",
    "compB",
    "direction",
    "TdConfirmDialogComponent",
    "accept",
    "TdPromptDialogComponent",
    "_dialogRef",
    "_input",
    "MatDialogRef",
    "TdDialogService",
    "_createConfig",
    "config",
    "dialogConfig",
    "MatDialogConfig",
    "DIALOG_PROVIDER",
    "provide",
    "deps",
    "SkipSelf",
    "MatDialog",
    "TdDialogTitleDirective",
    "TdDialogActionsDirective",
    "TdDialogContentDirective",
    "CovalentDialogsModule",
    "providers",
    "entryComponents",
    "TD_DIALOGS_ENTRY_COMPONENTS",
    "TdExpansionPanelHeaderDirective",
    "TdExpansionPanelLabelDirective",
    "TdExpansionPanelSublabelDirective",
    "TdExpansionPanelSummaryComponent",
    "TdExpansionPanelBase",
    "TdExpansionPanelComponent",
    "_expand",
    "expanded",
    "_setExpand",
    "animations",
    "expansionPanelSublabel",
    "ContentChild",
    "collapsed",
    "TdExpansionPanelGroupComponent",
    "CovalentExpansionPanelModule",
    "MatRippleModule",
    "MatIconModule",
    "TD_EXPANSION_PANEL",
    "TdFileSelectDirective",
    "target",
    "HTMLInputElement",
    "files",
    "TdFileDropDirective",
    "dataTransfer",
    "transfer",
    "mozItemCount",
    "dropEffect",
    "_stopEvent",
    "onDragLeave",
    "_TdFileDropMixinBase",
    "onDragEnter",
    "TdFileInputLabelDirective",
    "_TdFileInputMixinBase",
    "mixinDisabled",
    "TdFileInputBase",
    "TdFileInputComponent",
    "onSelect",
    "_inputElement",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "TdFileUploadComponent",
    "defaultColor",
    "cancelColor",
    "onUpload",
    "handleSelect",
    "fileInput",
    "cancel",
    "_TdFileUploadMixinBase",
    "subscriber",
    "xhr",
    "response",
    "options",
    "method",
    "url",
    "setRequestHeader",
    "headers",
    "send",
    "formData",
    "TdFileService",
    "CovalentFileModule",
    "FormsModule",
    "PortalModule",
    "TdJsonFormatterComponent",
    "_open",
    "_levelsOpen",
    "levelsOpen",
    "_key",
    "substring",
    "KEY_MAX_LENGTH",
    "elipsis",
    "key",
    "parseChildren",
    "_children",
    "toggle",
    "toString",
    "replace",
    "getType",
    "object",
    "Array",
    "isArray",
    "results",
    "exec",
    "constructor",
    "getPreview",
    "previewData",
    "startChar",
    "endChar",
    "getValue",
    "previewString",
    "join",
    "ellipsis",
    "isObject",
    "TdCollapseAnimation",
    "CovalentJsonFormatterModule",
    "MatTooltipModule",
    "mode",
    "sidenavWidth",
    "TdLayoutComponent",
    "sidenav",
    "_TdLayoutToggleMixinBase",
    "LayoutToggleBase",
    "LayoutToggle",
    "_layout",
    "_hideWhenOpened",
    "_toggleSubs",
    "_animationStarted",
    "_toggleVisibility",
    "onClick",
    "hideWhenOpened",
    "TdLayoutToggleDirective",
    "layout",
    "renderer",
    "elementRef",
    "tdLayoutToggle",
    "tdLayoutOpen",
    "TdLayoutOpenDirective",
    "TdLayoutNavComponent",
    "navigationRoute",
    "handleNavigationClick",
    "routerEnabled",
    "navigateByUrl",
    "toolbarTitle",
    "logo",
    "TdLayoutNavListComponent",
    "TdLayoutNavListToggleDirective",
    "TdLayoutNavListCloseDirective",
    "tdLayoutNavListClose",
    "TdLayoutNavListOpenDirective",
    "tdLayoutNavListOpen",
    "TdLayoutCardOverComponent",
    "cardWidth",
    "cardSubtitle",
    "TdLayoutManageListComponent",
    "TdLayoutManageListToggleDirective",
    "tdLayoutManageListToggle",
    "tdLayoutManageListClose",
    "TdLayoutManageListCloseDirective",
    "TdLayoutManageListOpenDirective",
    "TdLayoutFooterComponent",
    "TdNavigationDrawerMenuDirective",
    "TdNavigationDrawerToolbarDirective",
    "TdNavigationDrawerComponent",
    "_sanitize",
    "_toolbar",
    "_backgroundImage",
    "sanitize",
    "SecurityContext",
    "STYLE",
    "sanitizedUrl",
    "_closeSubscription",
    "openedChange",
    "toggleMenu",
    "isMenuAvailable",
    "_menuToggled",
    "sidenavTitle",
    "email",
    "TD_LAYOUTS",
    "Determinate",
    "Indeterminate",
    "TdLoadingComponent",
    "_animationOut",
    "_value",
    "_circleDiameter",
    "TD_CIRCLE_DIAMETER",
    "LoadingType",
    "Circular",
    "_mode",
    "ngDoCheck",
    "getHeight",
    "isOverlay",
    "isFullScreen",
    "TdLoadingFactory",
    "_componentFactoryResolver",
    "_overlay",
    "_injector",
    "createFullScreenComponent",
    "LoadingStyle",
    "FullScreen",
    "loading",
    "registered",
    "overlayRef",
    "dispose",
    "createOverlayComponent",
    "Overlay",
    "loadingRef",
    "componentRef",
    "instance",
    "content",
    "TemplatePortal",
    "insert",
    "hostView",
    "createReplaceComponent",
    "context",
    "_createComponent",
    "createEmbeddedView",
    "detach",
    "cdr",
    "OverlayConfig",
    "hasBackdrop",
    "positionStrategy",
    "position",
    "global",
    "centerHorizontally",
    "centerVertically",
    "compRef",
    "times",
    "useFactory",
    "LOADING_FACTORY_PROVIDER_FACTORY",
    "LoadingMode",
    "TdLoadingDirectiveConfig",
    "strategy",
    "LoadingStrategy",
    "Replace",
    "_context",
    "directiveConfig",
    "_loadingFactory",
    "_clearTimeout",
    "TdLoadingService",
    "LOADING_PROVIDER_FACTORY",
    "parent",
    "loadingFactory",
    "$implicit",
    "tdLoading",
    "TD_LOADING_NEXT_ID",
    "TdLoadingDirective",
    "_name",
    "until",
    "_loadingService",
    "resolveAll",
    "Linear",
    "_type",
    "stategy",
    "TD_LOADING_ENTRY_COMPONENTS",
    "CovalentLoadingModule",
    "MatProgressBarModule",
    "TD_LOADING",
    "LOADING_PROVIDER",
    "TdMediaService",
    "_ngZone",
    "_queryMap",
    "_querySources",
    "matchMedia",
    "matches",
    "MEDIA_PROVIDER_FACTORY",
    "ngZone",
    "MEDIA_PROVIDER",
    "TdMediaToggleDirective",
    "_mediaService",
    "_matches",
    "_attributes",
    "_styles",
    "_classes",
    "_query",
    "_mediaChange",
    "query",
    "_subscription",
    "_changeClasses",
    "_changeStyles",
    "_changeAttributes",
    "removeAttribute",
    "attr",
    "className",
    "style$$1",
    "classes",
    "TD_MEDIA",
    "CovalentMediaModule",
    "TdMenuComponent",
    "CovalentMenuModule",
    "MatMenuModule",
    "TD_MENU",
    "TdSearchInputBase",
    "showUnderline",
    "onSearchDebounce",
    "onSearch",
    "TdSearchInputComponent",
    "clearSearch",
    "MatInput",
    "placeholder",
    "clearIcon",
    "onClear",
    "TdSearchBoxBase",
    "_searchVisible",
    "backIcon",
    "searchIcon",
    "alwaysVisible",
    "TdSearchBoxComponent",
    "searchClicked",
    "handleClear",
    "_TdSearchBoxMixinBase",
    "trigger",
    "margin",
    "transition",
    "CovalentSearchModule",
    "MatInputModule",
    "Required",
    "Complete",
    "TdStepLabelDirective",
    "TdStepActionsDirective",
    "TdStepSummaryDirective",
    "TdStepBase",
    "onActivated",
    "onDeactivated",
    "_contentPortal",
    "TdStepComponent",
    "_content",
    "_viewContainerRef",
    "_setActive",
    "StepState",
    "_onDeactivated",
    "newActive",
    "_active",
    "_onActivated",
    "_TdStepMixinBase",
    "stepSummary",
    "StepMode",
    "Vertical",
    "Horizontal",
    "TdStepsComponent",
    "steps",
    "_steps",
    "_registerSteps",
    "ngAfterContentInit",
    "_deregisterSteps",
    "isHorizontal",
    "isVertical",
    "areStepsActive",
    "step",
    "_onStepSelection",
    "prevStep",
    "newStep",
    "_deactivateAllBut",
    "onStepChange",
    "activeStep",
    "_subcriptions",
    "subscription",
    "asObservable",
    "subs",
    "TdStepHeaderBase",
    "_TdStepHeaderMixinBase",
    "mixinDisableRipple",
    "TdStepHeaderComponent",
    "apply",
    "__spread",
    "arguments",
    "None",
    "isRequired",
    "number",
    "TdStepBodyComponent",
    "summaryRef",
    "children",
    "textContent",
    "contentRef",
    "read",
    "actionsRef",
    "CovalentStepsModule",
    "TD_STEPS",
    "collapseOptions",
    "anchor",
    "fadeInOut",
    "easeOnOut",
    "bounceOptions",
    "headshakeOptions",
    "jelloOptions",
    "base",
    "initialValue",
    "_i",
    "_subjectValueChanges",
    "class_1",
    "newValue",
    "_disabled",
    "class_2",
    "_disableRipple",
    "class_3",
    "onDisableRippleChange"
  ],
  "mappings": "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,eACA,eACA,eACA,aACA,kBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,kBACA,kBACA,iBACA,oBACA,eACA,QACA,aACA,QACA,WACA,SACA,OACA,OACA,WACA,YACA,aACA,cACA,gBACA,aACA,SACA,aACA,eACA,cACA,cACA,SACA,OACA,iBACA,sBACA,oBACA,OACA,QACA,YACA,0BACA,eACA,eACA,gBACA,QACA,QACA,YACA,QACA,iBACA,QACA,eACA,aACA,iBACA,YACA,cACA,eACA,cACA,uBACA,aACA,WACA,UACA,UACA,WACA,sBACA,gBACA,WACA,eACA,cACA,gBACA,gBACA,0BACA,SACA,cACA,OACA,YACA,WACA,WACA,WACA,WACA,YACA,iBACA,gBACA,gBACA,cACA,YACA,aACA,SACA,SACA,cACA,cACA,kBACA,UACA,kBACA,iBACA,aACA,UACA,aACA,UACA,aACA,kBACA,kBACA,iBACA,iBACA,qBACA,iBACA,oBACA,qBACA,kBACA,YACA,MACA,iBACA,qBACA,OACA,SACA,OACA,WACA,SACA,YACA,MACA,OACA,QACA,QACA,YACA,QACA,gBACA,QACA,kBACA,aACA,aACA,aACA,cACA,cACA,cACA,WACA,UACA,WACA,iBACA,iBACA,kBACA,kBACA,gBACA,YACA,OACA,eACA,cACA,WACA,kBACA,WACA,gBACA,cACA,SACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,gBACA,iBACA,sBACA,eACA,gBACA,aACA,cACA,cACA,oBACA,iBACA,eACA,eACA,OACA,QACA,aACA,YACA,WACA,SACA,cACA,iBACA,OACA,eACA,gBACA,SACA,cACA,gBACA,iBACA,gBACA,sBACA,uBACA,oBACA,qBACA,cACA,eACA,oBACA,qBACA,oBACA,yBACA,yBACA,gBACA,sBACA,uBACA,uBACA,eACA,eACA,cACA,uBACA,8BACA,8BACA,oBACA,QACA,UACA,aACA,aACA,YACA,aACA,kBACA,YACA,UACA,QACA,UACA,UACA,MACA,YACA,gBACA,UACA,QACA,WACA,QACA,aACA,WACA,UACA,QACA,YACA,aACA,KACA,UACA,SACA,aACA,WACA,UACA,cACA,UACA,UACA,OACA,eACA,eACA,gBACA,UACA,OACA,QACA,kBACA,iBACA,OACA,QACA,QACA,qBACA,gBACA,QACA,0BACA,OACA,eACA,QACA,eACA,iBACA,oBACA,kBACA,oBACA,cACA,eACA,gBACA,oBACA,MACA,WACA,sBACA,sBACA,uBACA,oBACA,qBACA,oBACA,gBACA,kBACA,eACA,iBACA,QACA,gBACA,YACA,WACA,SACA,oBACA,aACA,iBACA,SACA,SACA,eACA,WACA,cACA,OACA,cACA,gBACA,gBACA,OACA,OACA,YACA,UACA,iBACA,gBACA,YACA,YACA,aACA,iBACA,0BACA,eACA,cACA,gBACA,oBACA,sBACA,iBACA,cACA,wBACA,gBACA,aACA,eACA,cACA,gBACA,iBACA,cACA,cACA,aACA,oBACA,kBACA,YACA,iBACA,aACA,gBACA,oBACA,eACA,cACA,qBACA,OACA,YACA,eACA,QACA,UACA,UACA,UACA,UACA,YACA,YACA,OACA,QACA,UACA,OACA,MACA,aACA,qBACA,SACA,OACA,aACA,UACA,MACA,WACA,UACA,MACA,eACA,YACA,YACA,oBACA,OACA,WACA,OACA,aACA,YACA,QACA,QACA,iBACA,aACA,iBACA,mBACA,mBACA,cACA,SACA,gBACA,kBACA,gBACA,aACA,eACA,iBACA,eACA,eACA,MACA,SACA,iBACA,WACA,gBACA,uBACA,qBACA,oBACA,uBACA,cACA,iBACA,kBACA,cACA,YACA,QACA,WACA,UACA,WACA,oBACA,sBACA,oBACA,sBACA,aACA,QACA,sBACA,uBACA,UACA,SACA,iBACA,kBACA,wBACA,oBACA,0BACA,gBACA,aACA,iBACA,iBACA,SACA,aACA,iBACA,aACA,iBACA,QACA,gBACA,0BACA,kBACA,gBACA,eACA,eACA,eACA,eACA,YACA,kBACA,iBACA,gBACA,iBACA,kBACA,QACA,cACA,eACA,gBACA,2BACA,0BACA,0BACA,iBACA,qBACA,WACA,QACA,aACA,qBACA,sBACA,gBACA,oBACA,eACA,WACA,OACA,UACA,oBACA,WACA,QACA,cACA,qBACA,iBACA,QACA,SACA,UACA,gBACA,kBACA,QACA,cACA,QACA,uBACA,yBACA,cACA,UACA,gBACA,SACA,OACA,UACA,SACA,gBACA,wBACA,iBACA,UACA,SACA,aACA,SACA,YACA,YACA,WACA,QACA,YACA,SACA,iBACA,kBACA,UACA,cACA,OACA,wBACA,cACA,eACA,SACA,YACA,OACA,UACA,WACA,SACA,wBACA,uBACA,uBACA,kBACA,UACA,aACA,SACA,WACA,aACA,OACA,WACA,wBACA,0BACA,qBACA,sBACA,gBACA,oBACA,yBACA,2BACA,2BACA,sBACA,wBACA,oBACA,iBACA,iBACA,kBACA,2BACA,iBACA,QACA,OACA,WACA,kBACA,gBACA,UACA,wBACA,8CACA,yBACA,uBACA,sBACA,oBACA,yBACA,kBACA,WACA,iBACA,YACA,gBACA,YACA,aACA,MACA,aACA,SACA,OACA,gBACA,YACA,UACA,gBACA,gBACA,gBACA,aACA,OACA,cACA,YACA,QACA,yBACA,wBACA,yBACA,wBACA,OACA,UACA,QACA,uBACA,aACA,kBACA,QACA,UACA,YACA,qBACA,iBACA,aACA,aACA,YACA,uBACA,gBACA,eACA,OACA,gBACA,eACA,gBACA,oBACA,MACA,iBACA,SACA,iBACA,aACA,YACA,eACA,UACA,cACA,UACA,UACA,WACA,aACA,WACA,iBACA,gBACA,YACA,QACA,WACA,UACA,YACA,MACA,QACA,OACA,WACA,OACA,gBACA,UACA,YACA,YACA,gBACA,gBACA,cACA,OACA,YACA,gBACA,KACA,OACA,cACA,cACA,MACA,gBACA,wBACA,wBACA,qBACA,YACA,gBACA,WACA,eACA,cACA,aACA,gBACA,cACA,aACA,eACA,WACA,gBACA,YACA,cACA,aACA,cAC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"
}
